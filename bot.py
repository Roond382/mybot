import os
import re
import sqlite3
import logging
import asyncio
from datetime import datetime, timedelta
import pytz
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse
import uvicorn
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore
from apscheduler.executors.asyncio import AsyncIOExecutor
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.ext import (
    Application, CallbackContext, CallbackQueryHandler,
    CommandHandler, MessageHandler, filters, ConversationHandler
)
from dotenv import load_dotenv

# ========== –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ==========
load_dotenv()

# ========== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ==========
PORT = int(os.environ.get('PORT', 10000))
WEBHOOK_URL = os.getenv('WEBHOOK_URL', '')
TOKEN = os.getenv('TELEGRAM_TOKEN')
WEBHOOK_SECRET = os.getenv('WEBHOOK_SECRET')
CHANNEL_ID = int(os.getenv('CHANNEL_ID')) if os.getenv('CHANNEL_ID') else None
ADMIN_CHAT_ID = int(os.getenv('ADMIN_CHAT_ID')) if os.getenv('ADMIN_CHAT_ID') else None
TIMEZONE = pytz.timezone('Europe/Moscow')
MAX_TEXT_LENGTH = 4000

if not all([TOKEN, CHANNEL_ID, ADMIN_CHAT_ID]):
    raise ValueError("–ö–ª—é—á–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Telegram –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")

# ========== –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ==========
BACK_BUTTON = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]]

REQUEST_TYPES = {
    "congrat": {"name": "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ", "icon": "üéâ"},
    "announcement": {"name": "üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ", "icon": "üì¢"},
    "news": {"name": "üóûÔ∏è –ù–æ–≤–æ—Å—Ç—å –æ—Ç –∂–∏—Ç–µ–ª—è", "icon": "üóûÔ∏è"},
}

ANNOUNCE_SUBTYPES = {
    "sp": "–°–ø—Ä–æ—Å –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
    "n": "–ü–æ—Ç–µ—Ä—è–ª–∏/–ù–∞—à–ª–∏",
    "ride": "üöó –ü–æ–ø—É—Ç–∫–∞",  # –ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è
}

EXAMPLE_TEXTS = {
    "sender_name": "–ò–≤–∞–Ω–æ–≤ –í–∏—Ç–∞–ª–∏–π",
    "recipient_name": "–∫–æ–ª–ª–µ–∫—Ç–∏–≤ –¥–µ—Ç—Å–∞–¥–∞ '–°–æ–ª–Ω—ã—à–∫–æ'",
    "congrat": {
        "birthday": "–° –î–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è, –¥–æ—Ä–æ–≥–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏!",
        "wedding": "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∑–æ–ª–æ—Ç–æ–π —Å–≤–∞–¥—å–±–æ–π!"
    },
    "announcement": {
        "sp": "–°–¥–∞–º 2-–∫–æ–º–Ω–∞—Ç–Ω—É—é –∫–≤–∞—Ä—Ç–∏—Ä—É, 15000 —Ä—É–±, –∫–æ–º–º—É–Ω–∞–ª–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞",
        "n": "–ö—É–ø–ª—é —Å—Ç–∞—Ä—ã–µ –±–∞—Ç–∞—Ä–µ–π–∫–∏, –ø–ª–∞—Ç–∏–º –¥–µ–Ω—å–≥–∏"
    }
}

(TYPE_SELECTION, SENDER_NAME_INPUT, RECIPIENT_NAME_INPUT, CONGRAT_TYPE_SELECTION,
 CONGRAT_TEXT_INPUT, ANNOUNCE_SUBTYPE_SELECTION, ANNOUNCE_TEXT_INPUT,
 PHONE_INPUT, WAIT_CENSOR_APPROVAL, NEWS_PHONE_INPUT, NEWS_TEXT_INPUT) = range(11)

# ========== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ==========
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[logging.FileHandler('bot.log'), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# ========== –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ==========
BOT_STATE = {'running': False, 'start_time': None}
application_lock = asyncio.Lock()
application: Application = None

# ========== –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ==========
def get_db_connection() -> sqlite3.Connection:
    conn = sqlite3.connect('db.sqlite', check_same_thread=False)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    with get_db_connection() as conn:
        conn.execute("""
            CREATE TABLE IF NOT EXISTS applications (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                username TEXT,
                type TEXT NOT NULL,
                subtype TEXT,
                from_name TEXT,
                to_name TEXT,
                text TEXT,
                photo_id TEXT,
                phone_number TEXT,
                status TEXT NOT NULL DEFAULT 'pending',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                published_at TIMESTAMP,
                publish_date DATE,
                congrat_type TEXT
            )
        """)
        try:
            conn.execute("ALTER TABLE applications ADD COLUMN phone_number TEXT")
            conn.commit()
        except sqlite3.OperationalError:
            pass
        conn.execute("""
            CREATE INDEX IF NOT EXISTS idx_approved_unpublished 
            ON applications(status, published_at) 
            WHERE status = 'approved' AND published_at IS NULL
        """)
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

# ========== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ==========
def validate_phone(phone: str) -> bool:
    clean_phone = re.sub(r'[^\d+]', '', phone)
    return bool(re.match(r'^(\+7|8)\d{10}$', clean_phone))

async def load_bad_words() -> list:
    bad_words_file = 'bad_words.txt'
    default_words = ["—Ö—É–π", "–ø–∏–∑–¥–∞", "–±–ª—è—Ç—å", "–±–ª—è–¥—å", "–µ–±–∞—Ç—å", "—Å—É–∫–∞"]
    if os.path.exists(bad_words_file):
        try:
            with open(bad_words_file, 'r', encoding='utf-8') as f:
                return [word.strip() for line in f for word in line.split(',') if word.strip()]
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ bad_words.txt: {e}")
    return default_words

async def check_text_for_bad_words(text: str) -> tuple[str, bool]:
    bad_words = await load_bad_words()
    censored = text
    has_bad = False
    for word in bad_words:
        if re.search(re.escape(word), censored, re.IGNORECASE):
            has_bad = True
            censored = re.sub(re.escape(word), '***', censored, flags=re.IGNORECASE)
    return censored, has_bad

# ========== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ==========
async def safe_reply_text(update: Update, text: str, **kwargs):
    try:
        await update.message.reply_text(text, **kwargs)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def safe_edit_message_text(query, text, **kwargs):
    try:
        await query.edit_message_text(text, **kwargs)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

async def start_command(update: Update, context: CallbackContext) -> int:
    context.user_data.clear()
    keyboard = [
        [InlineKeyboardButton(f"{info['icon']} {info['name']}", callback_data=key)]
        for key, info in REQUEST_TYPES.items()
    ]
    await safe_reply_text(
        update,
        "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return TYPE_SELECTION

async def handle_type_selection(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    request_type = query.data
    context.user_data["type"] = request_type

    if request_type == "congrat":
        await safe_edit_message_text(
            query,
            "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –í–∏—Ç–∞–ª–∏–π):",
            reply_markup=InlineKeyboardMarkup(BACK_BUTTON)
        )
        return SENDER_NAME_INPUT
    elif request_type == "announcement":
        keyboard = [
            [InlineKeyboardButton(name, callback_data=f"announce_{key}")]
            for key, name in ANNOUNCE_SUBTYPES.items()
        ] + BACK_BUTTON
        await safe_edit_message_text(
            query,
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ANNOUNCE_SUBTYPE_SELECTION
    elif request_type == "news":
        await safe_edit_message_text(
            query,
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω (—Ñ–æ—Ä–º–∞—Ç: +7... –∏–ª–∏ 8...):",
            reply_markup=InlineKeyboardMarkup(BACK_BUTTON)
        )
        return NEWS_PHONE_INPUT
    else:
        return ConversationHandler.END

async def handle_announce_subtype_selection(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    subtype_key = query.data.replace("announce_", "")
    context.user_data["subtype"] = subtype_key

    example = EXAMPLE_TEXTS["announcement"].get(subtype_key, "")
    await safe_edit_message_text(
        query,
        f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–¥–æ {MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤).\n–ü—Ä–∏–º–µ—Ä: {example}",
        reply_markup=InlineKeyboardMarkup(BACK_BUTTON)
    )
    return ANNOUNCE_TEXT_INPUT

async def handle_announce_text_input(update: Update, context: CallbackContext) -> int:
    text = update.message.text.strip()
    if len(text) > MAX_TEXT_LENGTH:
        await safe_reply_text(update, f"–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –ú–∞–∫—Å–∏–º—É–º: {MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.")
        return ANNOUNCE_TEXT_INPUT

    censored_text, has_bad = await check_text_for_bad_words(text)
    if has_bad:
        await safe_reply_text(update, "‚ùå –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞. –ó–∞—è–≤–∫–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
        return ConversationHandler.END

    context.user_data["text"] = censored_text

    # –ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è –¥–ª—è "–ü–æ–ø—É—Ç–∫–∞"
    if context.user_data.get("subtype") == "ride":
        phone = context.user_data.get("phone")
        if not phone:
            await safe_reply_text(update, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω:")
            return PHONE_INPUT

        try:
            message = f"üöó <b>–ü–æ–ø—É—Ç–∫–∞</b>\n{censored_text}\nüìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n#–ü–æ–ø—É—Ç–∫–∞–ù–∏–∫–æ–ª–∞–µ–≤—Å–∫"
            await context.bot.send_message(
                chat_id=CHANNEL_ID,
                text=message,
                parse_mode="HTML"
            )
            await safe_reply_text(update, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ–ø—É—Ç–∫–∏: {e}")
            await safe_reply_text(update, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö ‚Äî –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
    await safe_reply_text(update, "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
    # ... (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É)
    return ConversationHandler.END

# ========== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ==========
async def initialize_bot():
    global application
    async with application_lock:
        if application is not None:
            return
        application = Application.builder().token(TOKEN).build()
        # ... (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)
        await application.initialize()
        await application.start()
        await application.bot.set_webhook(url=WEBHOOK_URL, secret_token=WEBHOOK_SECRET)
        logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

# ========== FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ==========
app = FastAPI()

@app.on_event("startup")
async def startup_event():
    init_db()
    await initialize_bot()
    scheduler = AsyncIOScheduler(
        jobstores={'default': SQLAlchemyJobStore(url='sqlite:///jobs.sqlite')},
        executors={'default': AsyncIOExecutor()},
        timezone=TIMEZONE
    )
    scheduler.add_job(check_pending_applications, 'interval', minutes=1)
    scheduler.start()
    BOT_STATE['running'] = True
    BOT_STATE['start_time'] = datetime.now(TIMEZONE)
    logger.info("FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ.")

@app.post("/telegram-webhook/{secret}")
async def telegram_webhook(secret: str, request: Request):
    global application
    if secret != WEBHOOK_SECRET:
        raise HTTPException(status_code=403, detail="Invalid secret")
    if application is None:
        await initialize_bot()
    try:
        data = await request.json()
        update = Update.de_json(data, application.bot)
        await application.process_update(update)
        return JSONResponse(status_code=200, content={"status": "ok"})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞: {e}")
        raise HTTPException(status_code=500, detail="Internal error")

@app.get("/")
async def root():
    return {"status": "running"}

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=PORT)import os
import re
import sqlite3
import hashlib
import logging
import asyncio
from pathlib import Path
from typing import Optional, Dict, List
from datetime import datetime
import pytz
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse
import uvicorn
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore
from apscheduler.executors.asyncio import AsyncIOExecutor
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
)
from telegram.ext import (
    Application, CallbackContext, CallbackQueryHandler,
    CommandHandler, MessageHandler, filters, ConversationHandler
)
from dotenv import load_dotenv

# ========== –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ==========
load_dotenv()

# ========== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ==========
PORT = int(os.environ.get('PORT', 10000))
WEBHOOK_URL = os.getenv('WEBHOOK_URL', '')
TOKEN = os.getenv('TELEGRAM_TOKEN')
WEBHOOK_SECRET = os.getenv('WEBHOOK_SECRET')
CHANNEL_ID = int(os.getenv('CHANNEL_ID')) if os.getenv('CHANNEL_ID') else None
ADMIN_CHAT_ID = int(os.getenv('ADMIN_CHAT_ID')) if os.getenv('ADMIN_CHAT_ID') else None
TIMEZONE = pytz.timezone('Europe/Moscow')
MAX_TEXT_LENGTH = 4000

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not all([TOKEN, CHANNEL_ID, ADMIN_CHAT_ID]):
    raise ValueError("–ö–ª—é—á–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Telegram –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")

# ========== –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ==========
BACK_BUTTON = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]]

# --- –¢–∏–ø—ã –∑–∞—è–≤–æ–∫ ---
REQUEST_TYPES = {
    "congrat": {"name": "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ", "icon": "üéâ"},
    "announcement": {"name": "üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ", "icon": "üì¢"},
    "news": {"name": "üóûÔ∏è –ù–æ–≤–æ—Å—Ç—å –æ—Ç –∂–∏—Ç–µ–ª—è", "icon": "üóûÔ∏è"},
    "carpool": {"name": "üöó –ü–æ–ø—É—Ç–∫–∞", "icon": "üöó"},  # –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
}

# --- –ü–æ–¥—Ç–∏–ø—ã –ø–æ–ø—É—Ç–∫–∏ ---
CARPOOL_SUBTYPES = {
    "has_seats": "–ï—Å—Ç—å –º–µ—Å—Ç–∞",
    "needs_seats": "–ù—É–∂–Ω—ã –º–µ—Å—Ç–∞"
}

# --- –ü—Ä–∏–º–µ—Ä—ã —Ç–µ–∫—Å—Ç–æ–≤ ---
EXAMPLE_TEXTS = {
    "sender_name": "–ò–≤–∞–Ω–æ–≤ –í–∏—Ç–∞–ª–∏–π",
    "recipient_name": "–∫–æ–ª–ª–µ–∫—Ç–∏–≤ –¥–µ—Ç—Å–∞–¥–∞ '–°–æ–ª–Ω—ã—à–∫–æ'",
    "congrat": {
        "birthday": "–° –î–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è, –¥–æ—Ä–æ–≥–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏!",
        "wedding": "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∑–æ–ª–æ—Ç–æ–π —Å–≤–∞–¥—å–±–æ–π!"
    },
    "announcement": {
        "sp": "–°–¥–∞–º 2-–∫–æ–º–Ω–∞—Ç–Ω—É—é –∫–≤–∞—Ä—Ç–∏—Ä—É, 15000 —Ä—É–±, –∫–æ–º–º—É–Ω–∞–ª–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞",
        "n": "–ö—É–ø–ª—é —Å—Ç–∞—Ä—ã–µ –±–∞—Ç–∞—Ä–µ–π–∫–∏, –ø–ª–∞—Ç–∏–º –¥–µ–Ω—å–≥–∏"
    },
    "carpool": {
        "has_seats": "10.08 –µ–¥—É –≤ –•–∞–±–∞—Ä–æ–≤—Å–∫. 2 –º–µ—Å—Ç–∞. –í—ã–µ–∑–¥ –≤ 9:00",
        "needs_seats": "–ò—â—É –ø–æ–ø—É—Ç–∫—É –≤ –ù–∏–∫–æ–ª–∞–µ–≤—Å–∫ –Ω–∞ 12.08"
    }
}

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
TYPE_SELECTION = "TYPE_SELECTION"
SENDER_NAME_INPUT = "SENDER_NAME_INPUT"
RECIPIENT_NAME_INPUT = "RECIPIENT_NAME_INPUT"
CONGRAT_TEXT_INPUT = "CONGRAT_TEXT_INPUT"
ANNOUNCE_SUBTYPE = "ANNOUNCE_SUBTYPE"
ANNOUNCE_TEXT_INPUT = "ANNOUNCE_TEXT_INPUT"
NEWS_PHONE_INPUT = "NEWS_PHONE_INPUT"
NEWS_TEXT_INPUT = "NEWS_TEXT_INPUT"
CARPOOL_SUBTYPE = "CARPOOL_SUBTYPE"
CARPOOL_TEXT_INPUT = "CARPOOL_TEXT_INPUT"
CARPOOL_PHONE_INPUT = "CARPOOL_PHONE_INPUT"

# ========== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ==========
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ========== –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ==========
BOT_STATE = {'running': False, 'start_time': None, 'last_activity': None}
application_lock = asyncio.Lock()
application: Optional[Application] = None

# ========== –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ==========
def get_db_connection() -> sqlite3.Connection:
    conn = sqlite3.connect('db.sqlite', check_same_thread=False)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    with get_db_connection() as conn:
        conn.execute("""
            CREATE TABLE IF NOT EXISTS applications (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                username TEXT,
                type TEXT NOT NULL,
                subtype TEXT,
                from_name TEXT,
                to_name TEXT,
                text TEXT,
                photo_id TEXT,
                phone_number TEXT,
                status TEXT NOT NULL DEFAULT 'pending',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                published_at TIMESTAMP,
                publish_date DATE
            )
        """)
        try:
            conn.execute("ALTER TABLE applications ADD COLUMN phone_number TEXT")
            conn.commit()
        except sqlite3.OperationalError:
            pass
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

# ========== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ==========
def validate_phone(phone: str) -> bool:
    clean_phone = re.sub(r'[^\d+]', '', phone)
    return bool(re.match(r'^(\+7|8)\d{10}$', clean_phone))

async def load_bad_words() -> List[str]:
    bad_words_file = Path("bad_words.txt")
    default_words = ["—Ö—É–π", "–ø–∏–∑–¥–∞", "–±–ª—è—Ç—å", "–±–ª—è–¥—å", "–µ–±–∞—Ç—å", "—Å—É–∫–∞"]
    if bad_words_file.exists():
        try:
            with bad_words_file.open('r', encoding='utf-8') as f:
                return [word.strip() for line in f for word in line.split(',') if word.strip()]
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ bad_words.txt: {e}")
    return default_words

async def censor_text(text: str) -> tuple[str, bool]:
    bad_words = await load_bad_words()
    censored = text
    has_bad = False
    for word in bad_words:
        if re.search(re.escape(word), censored, re.IGNORECASE):
            has_bad = True
            censored = re.sub(re.escape(word), '***', censored, flags=re.IGNORECASE)
    return censored, has_bad

# ========== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ==========
async def safe_reply_text(update: Update, text: str, **kwargs):
    try:
        await update.message.reply_text(text, **kwargs)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def safe_edit_message_text(query, text, **kwargs):
    try:
        await query.edit_message_text(text, **kwargs)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def start_command(update: Update, context: CallbackContext) -> str:
    keyboard = [
        [InlineKeyboardButton(f"{info['icon']} {info['name']}", callback_data=key)]
        for key, info in REQUEST_TYPES.items()
    ]
    await safe_reply_text(
        update,
        "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return TYPE_SELECTION

async def handle_type_selection(update: Update, context: CallbackContext) -> str:
    query = update.callback_query
    await query.answer()
    request_type = query.data
    context.user_data["type"] = request_type

    if request_type == "carpool":
        keyboard = [
            [InlineKeyboardButton(name, callback_data=f"carpool_{key}")]
            for key, name in CARPOOL_SUBTYPES.items()
        ] + BACK_BUTTON
        await safe_edit_message_text(
            query,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–ø—É—Ç–∫–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return CARPOOL_SUBTYPE
    elif request_type == "news":
        await safe_edit_message_text(
            query,
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω (—Ñ–æ—Ä–º–∞—Ç: +7... –∏–ª–∏ 8...):",
            reply_markup=InlineKeyboardMarkup(BACK_BUTTON)
        )
        return NEWS_PHONE_INPUT
    else:
        await safe_edit_message_text(
            query,
            "–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(BACK_BUTTON)
        )
        return ConversationHandler.END

async def handle_carpool_subtype(update: Update, context: CallbackContext) -> str:
    query = update.callback_query
    await query.answer()
    subtype_key = query.data.replace("carpool_", "")
    context.user_data["subtype"] = subtype_key

    example = EXAMPLE_TEXTS["carpool"].get(subtype_key, "")
    await safe_edit_message_text(
        query,
        f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ (–¥–æ {MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤).\n–ü—Ä–∏–º–µ—Ä: {example}",
        reply_markup=InlineKeyboardMarkup(BACK_BUTTON)
    )
    return CARPOOL_TEXT_INPUT

async def handle_carpool_text(update: Update, context: CallbackContext) -> str:
    text = update.message.text.strip()
    if len(text) > MAX_TEXT_LENGTH:
        await safe_reply_text(update, f"–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –ú–∞–∫—Å–∏–º—É–º: {MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.")
        return CARPOOL_TEXT_INPUT

    censored_text, has_bad = await censor_text(text)
    if has_bad:
        await safe_reply_text(update, "‚ùå –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞. –ó–∞—è–≤–∫–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
        return ConversationHandler.END

    phone = context.user_data.get("phone")
    if not phone:
        await safe_reply_text(update, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω:")
        return CARPOOL_PHONE_INPUT

    # –ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è
    try:
        message = f"üöó <b>–ü–æ–ø—É—Ç–∫–∞</b>\n{censored_text}\nüìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n#–ü–æ–ø—É—Ç–∫–∞–ù–∏–∫–æ–ª–∞–µ–≤—Å–∫"
        await context.bot.send_message(
            chat_id=CHANNEL_ID,
            text=message,
            parse_mode="HTML"
        )
        await safe_reply_text(update, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ–ø—É—Ç–∫–∏: {e}")
        await safe_reply_text(update, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    context.user_data.clear()
    return ConversationHandler.END

async def pending_command(update: Update, context: CallbackContext) -> None:
    if update.effective_chat.id != ADMIN_CHAT_ID:
        await safe_reply_text(update, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    with get_db_connection() as conn:
        cur = conn.execute("""
            SELECT id, type, text, phone_number 
            FROM applications 
            WHERE status = 'pending' 
            ORDER BY created_at DESC
        """)
        apps = cur.fetchall()

    if not apps:
        await safe_reply_text(update, "üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –≤ –æ—á–µ—Ä–µ–¥–∏.")
        return

    for app in apps:
        app_text = f"#{app['id']} ({app['type']})\n{app['text']}\nüìû {app['phone_number']}"
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{app['id']}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{app['id']}")
        ]])
        try:
            await context.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=app_text,
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É #{app['id']}: {e}")

# ========== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ==========
async def initialize_bot():
    global application
    async with application_lock:
        if application is not None:
            return

        application = Application.builder().token(TOKEN).build()

        conv_handler = ConversationHandler(
            entry_points=[CommandHandler("start", start_command)],
            states={
                TYPE_SELECTION: [CallbackQueryHandler(handle_type_selection)],
                CARPOOL_SUBTYPE: [CallbackQueryHandler(handle_carpool_subtype)],
                CARPOOL_TEXT_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_carpool_text)],
                "back_to_start": [CallbackQueryHandler(start_command, pattern="^back_to_start$")]
            },
            fallbacks=[CommandHandler("cancel", lambda u, c: None)],
            allow_reentry=True
        )

        application.add_handler(conv_handler)
        application.add_handler(CommandHandler("pending", pending_command))

        await application.initialize()
        await application.start()
        await application.bot.set_webhook(
            url=WEBHOOK_URL,
            secret_token=WEBHOOK_SECRET
        )
        logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤–µ–±—Ö—É–∫.")

# ========== FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ==========
app = FastAPI()

@app.on_event("startup")
async def startup_event():
    init_db()
    await initialize_bot()
    scheduler = AsyncIOScheduler(
        jobstores={'default': SQLAlchemyJobStore(url='sqlite:///jobs.sqlite')},
        executors={'default': AsyncIOExecutor()},
        timezone=TIMEZONE
    )
    scheduler.add_job(
        pending_command,
        'interval',
        minutes=5,
        args=[None, None],
        id='check_pending'
    )
    scheduler.start()
    BOT_STATE['running'] = True
    BOT_STATE['start_time'] = datetime.now(TIMEZONE)
    logger.info("FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ.")

@app.post("/webhook")
async def webhook(request: Request):
    global application
    if application is None:
        await initialize_bot()

    try:
        data = await request.json()
        update = Update.de_json(data, application.bot)
        await application.process_update(update)
        return JSONResponse(status_code=200, content={"status": "ok"})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return JSONResponse(status_code=500, content={"status": "error"})

@app.get("/")
async def root():
    return {"status": "running", "bot": BOT_STATE}

# ========== –ó–∞–ø—É—Å–∫ (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è) ==========
if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=PORT)


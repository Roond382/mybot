import os
import sys
import logging
from datetime import datetime, timedelta
import socket
import atexit
import signal
import re
import traceback
from typing import Dict, Any, Optional, Tuple
import asyncio
import sqlite3

# –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import pytz
from dotenv import load_dotenv
import aiofiles
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ python-telegram-bot v21+
from telegram import (
    Bot,
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.error import TelegramError
from telegram.ext import (
    Application,
    CallbackContext,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
BACK_BUTTON = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]]

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
BOT_STATE = {
    'running': False,
    'start_time': None,
    'last_activity': None
}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
DB_FILE = 'db.sqlite'
BAD_WORDS_FILE = 'bad_words.txt'
DEFAULT_BAD_WORDS = ["—Ö—É–π", "–ø–∏–∑–¥–∞", "–±–ª—è—Ç—å", "–±–ª—è–¥—å", "–µ–±–∞—Ç—å", "—Å—É–∫–∞"]
MAX_NAME_LENGTH = 50
MAX_TEXT_LENGTH = 4000
MAX_CONGRAT_TEXT_LENGTH = 500
MAX_ANNOUNCE_NEWS_TEXT_LENGTH = 300
CHANNEL_NAME = "–ù–µ–±–æ–ª—å—à–æ–π –ú–∏—Ä: –ù–∏–∫–æ–ª–∞–µ–≤—Å–∫"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
CHANNEL_ID = int(os.getenv("CHANNEL_ID")) if os.getenv("CHANNEL_ID") else None
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID")) if os.getenv("ADMIN_CHAT_ID") else None
TIMEZONE = pytz.timezone('Europe/Moscow')
WORKING_HOURS = (0, 23)  # 00:00-23:59 (–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ)
WORK_ON_WEEKENDS = True

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not TOKEN:
    raise ValueError("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not CHANNEL_ID:
    logging.warning("CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞")
if not ADMIN_CHAT_ID:
    logging.warning("ADMIN_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è")

# –¢–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤
REQUEST_TYPES = {
    "congrat": {"name": "–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ", "icon": "üéâ"},
    "announcement": {"name": "–û–±—ä—è–≤–ª–µ–Ω–∏–µ", "icon": "üì¢"},
    "news": {"name": "–ù–æ–≤–æ—Å—Ç—å –æ—Ç –∂–∏—Ç–µ–ª—è", "icon": "üóûÔ∏è"}
}

# –ü–æ–¥—Ç–∏–ø—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π
ANNOUNCE_SUBTYPES = {
    "ride": "üöó –ü–æ–ø—É—Ç–∫–∞",
    "offer": "üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
    "lost": "üîç –ü–æ—Ç–µ—Ä—è–ª–∏/–ù–∞—à–ª–∏"
}

# –ü—Ä–∞–∑–¥–Ω–∏–∫–∏
HOLIDAYS = {
    "üéÑ –ù–æ–≤—ã–π –≥–æ–¥": "01-01",
    "ü™ñ 23 –§–µ–≤—Ä–∞–ª—è": "02-23",
    "üíê 8 –ú–∞—Ä—Ç–∞": "03-08",
    "üèÖ 9 –ú–∞—è": "05-09",
    "üá∑üá∫ 12 –ò—é–Ω—è": "06-12",
    "ü§ù 4 –ù–æ—è–±—Ä—è": "11-04"
}

HOLIDAY_TEMPLATES = {
    "üéÑ –ù–æ–≤—ã–π –≥–æ–¥": "–° –ù–æ–≤—ã–º –≥–æ–¥–æ–º!\n–ü—É—Å—Ç—å –∏—Å–ø–æ–ª–Ω—è—é—Ç—Å—è –≤—Å–µ –≤–∞—à–∏ –∂–µ–ª–∞–Ω–∏—è!",
    "ü™ñ 23 –§–µ–≤—Ä–∞–ª—è": "–° –î–Ω—ë–º –∑–∞—â–∏—Ç–Ω–∏–∫–∞ –û—Ç–µ—á–µ—Å—Ç–≤–∞!\n–ú—É–∂–µ—Å—Ç–≤–∞, –æ—Ç–≤–∞–≥–∏ –∏ –º–∏—Ä–Ω–æ–≥–æ –Ω–µ–±–∞ –Ω–∞–¥ –≥–æ–ª–æ–≤–æ–π!",
    "üíê 8 –ú–∞—Ä—Ç–∞": "–° 8 –ú–∞—Ä—Ç–∞!\n–ö—Ä–∞—Å–æ—Ç—ã, —Å—á–∞—Å—Ç—å—è –∏ –≤–µ—Å–µ–Ω–Ω–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!",
    "üèÖ 9 –ú–∞—è": "–° –î–Ω—ë–º –ü–æ–±–µ–¥—ã!\n–í–µ—á–Ω–∞—è –ø–∞–º—è—Ç—å –≥–µ—Ä–æ—è–º!",
    "üá∑üá∫ 12 –ò—é–Ω—è": "–° –î–Ω—ë–º –†–æ—Å—Å–∏–∏!\n–ú–∏—Ä–∞, –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—è –∏ –ø—Ä–æ—Ü–≤–µ—Ç–∞–Ω–∏—è –Ω–∞—à–µ–π —Å—Ç—Ä–∞–Ω–µ!",
    "ü§ù 4 –ù–æ—è–±—Ä—è": "–° –î–Ω—ë–º –Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –µ–¥–∏–Ω—Å—Ç–≤–∞!\n–°–æ–≥–ª–∞—Å–∏—è, –º–∏—Ä–∞ –∏ –¥–æ–±—Ä–∞!"
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
(
    TYPE_SELECTION,
    SENDER_NAME_INPUT,
    RECIPIENT_NAME_INPUT,
    CONGRAT_HOLIDAY_CHOICE,
    CUSTOM_CONGRAT_MESSAGE_INPUT,
    CONGRAT_DATE_INPUT,
    ANNOUNCE_SUBTYPE_SELECTION,
    ANNOUNCE_TEXT_INPUT,
    WAIT_CENSOR_APPROVAL
) = range(9)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG,
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# --- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ ---
_cached_bad_words = []

async def load_bad_words_cached() -> list:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –∏ –∫—ç—à–∏—Ä—É–µ—Ç –µ–≥–æ."""
    global _cached_bad_words
    if not _cached_bad_words:
        try:
            async with aiofiles.open(BAD_WORDS_FILE, 'r', encoding='utf-8') as f:
                content = await f.read()
                _cached_bad_words = [word.strip() for line in content.splitlines() for word in line.split(',') if word.strip()]
        except FileNotFoundError:
            logger.warning("–§–∞–π–ª —Å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
            _cached_bad_words = DEFAULT_BAD_WORDS
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤: {e}", exc_info=True)
            _cached_bad_words = DEFAULT_BAD_WORDS
    return _cached_bad_words

async def cleanup():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""
    if not BOT_STATE.get('running'):
        return

    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
    BOT_STATE['running'] = False

    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        if ADMIN_CHAT_ID:
            bot = Bot(token=TOKEN)
            try:
                await send_bot_status(bot, "–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {e}")
            finally:
                await bot.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")

    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    if 'scheduler' in globals():
        try:
            scheduler.shutdown(wait=False)
            logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–∫–µ—Ç–∞
    if 'lock_socket' in globals():
        try:
            lock_socket.close()
            logger.info("–°–æ–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–∫–µ—Ç–∞: {e}")

def handle_signal(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    BOT_STATE['running'] = False
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π event loop –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    loop = asyncio.get_event_loop()
    loop.create_task(cleanup())
    # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º sys.exit(0) –∑–¥–µ—Å—å, –ø–æ–∑–≤–æ–ª—è–µ–º asyncio –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á–∏

def is_working_hours() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–∞—Ö (00:00-23:59 –ø–æ –ú–æ—Å–∫–≤–µ)"""
    now = datetime.now(TIMEZONE)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    if not (WORKING_HOURS[0] <= now.hour < WORKING_HOURS[1]):
        return False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö, –µ—Å–ª–∏ WORK_ON_WEEKENDS = False
    if not WORK_ON_WEEKENDS and now.weekday() >= 5:  # 5 –∏ 6 - —Å—É–±–±–æ—Ç–∞ –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        return False

    return True

# --- –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î ---
_db_connection = None

def get_db_connection() -> sqlite3.Connection:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö (—Å–∏–Ω–≥–ª—Ç–æ–Ω)."""
    global _db_connection
    if _db_connection is None:
        _db_connection = sqlite3.connect(DB_FILE, check_same_thread=False)
        _db_connection.row_factory = sqlite3.Row
    return _db_connection

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏."""
    try:
        conn = get_db_connection()
        conn.execute("""
        CREATE TABLE IF NOT EXISTS applications (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            username TEXT,
            type TEXT NOT NULL,
            subtype TEXT,
            from_name TEXT,
            to_name TEXT,
            text TEXT NOT NULL,
            status TEXT DEFAULT 'pending',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            publish_date DATE,
            published_at TIMESTAMP,
            congrat_type TEXT
        )
        """)

        conn.execute("""
        CREATE INDEX IF NOT EXISTS idx_approved_unpublished
        ON applications(status, published_at)
        WHERE status = 'approved' AND published_at IS NULL
        """)
        conn.commit()

    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}", exc_info=True)
        raise

def add_application(data: Dict[str, Any]) -> Optional[int]:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("""
        INSERT INTO applications
        (user_id, username, type, subtype, from_name, to_name, text, publish_date, congrat_type)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            data['user_id'],
            data.get('username'),
            data['type'],
            data.get('subtype'),
            data.get('from_name'),
            data.get('to_name'),
            data['text'],
            data.get('publish_date'),
            data.get('congrat_type')
        ))
        app_id = cur.lastrowid
        conn.commit()
        return app_id
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}\n–î–∞–Ω–Ω—ã–µ: {data}", exc_info=True)
        return None

def get_application_details(app_id: int) -> Optional[sqlite3.Row]:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ –ø–æ ID."""
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("SELECT * FROM applications WHERE id = ?", (app_id,))
        return cur.fetchone()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ #{app_id}: {e}", exc_info=True)
        return None

def get_approved_unpublished_applications() -> list:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ, –Ω–æ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏."""
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("""
        SELECT id, user_id, username, type, subtype, from_name, to_name, text, publish_date, congrat_type
        FROM applications
        WHERE status = 'approved' AND published_at IS NULL
        """)
        return cur.fetchall()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {e}", exc_info=True)
        return []

def update_application_status(app_id: int, status: str) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏."""
    try:
        conn = get_db_connection()
        conn.execute("UPDATE applications SET status = ? WHERE id = ?", (status, app_id))
        conn.commit()
        return True
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ #{app_id}: {e}", exc_info=True)
        return False

def mark_application_as_published(app_id: int) -> bool:
    """–ü–æ–º–µ—á–∞–µ—Ç –∑–∞—è–≤–∫—É –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—É—é."""
    try:
        conn = get_db_connection()
        conn.execute("""
        UPDATE applications
        SET published_at = CURRENT_TIMESTAMP, status = 'published'
        WHERE id = ?
        """, (app_id,))
        conn.commit()
        return True
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞—è–≤–∫–∏ #{app_id}: {e}", exc_info=True)
        return False

# --- –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ü–µ–Ω–∑—É—Ä–∞ ---
def validate_name(name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏."""
    if not name or not name.strip():
        return False

    name = name.strip()
    allowed_chars = set("–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø -")
    return (2 <= len(name) <= MAX_NAME_LENGTH and
            all(c in allowed_chars for c in name) and
            not name.startswith('-') and
            not name.endswith('-') and
            '--' not in name)

def is_holiday_active(holiday_date_str: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø—Ä–∞–∑–¥–Ω–∏–∫ (+/-5 –¥–Ω–µ–π –æ—Ç –¥–∞—Ç—ã)."""
    try:
        current_year = datetime.now().year
        holiday_date = datetime.strptime(f"{current_year}-{holiday_date_str}", "%Y-%m-%d").date()
        today = datetime.now().date()
        start = holiday_date - timedelta(days=5)
        end = holiday_date + timedelta(days=5)
        return start <= today <= end
    except ValueError as e: # –ë–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –ø—Ä–∞–∑–¥–Ω–∏–∫–∞: {e}", exc_info=True)
        return False
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞: {e}", exc_info=True)
        return False

async def censor_text(text: str) -> Tuple[str, bool]:
    """–¶–µ–Ω–∑—É—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    bad_words = await load_bad_words_cached() # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
    censored = text
    has_bad = False

    for word in bad_words:
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º re.compile –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ —Å–ª–æ–≤–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ
            # –ù–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞ –æ—Ç–¥–µ–ª—å–Ω–æ, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–ª–∏—à–Ω–∏–º. –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –±—ã–ª–æ.
            if re.search(re.escape(word), censored, re.IGNORECASE):
                has_bad = True
                censored = re.sub(re.escape(word), '***', censored, flags=re.IGNORECASE)
        except re.error as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ü–µ–Ω–∑—É—Ä—ã —Å–ª–æ–≤–∞ '{word}': {e}\n–¢–µ–∫—Å—Ç: {text[:100]}...", exc_info=True)

    # –¶–µ–Ω–∑—É—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    try:
        censored = re.sub(
            r'(–∑–≤–æ–Ω–∏—Ç–µ|–ø–∏—à–∏—Ç–µ|—Ç–µ–ª–µ—Ñ–æ–Ω|–Ω–æ–º–µ—Ä|—Ç–µ–ª\.?|—Ç\.)[:;\s]*([\+\d\(\).\s-]{7,})',
            '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–∫—Ä—ã—Ç–∞ (–ø–∏—à–∏—Ç–µ –≤ –õ–°)',
            censored,
            flags=re.IGNORECASE
        )
    except re.error as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ü–µ–Ω–∑—É—Ä—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {e}", exc_info=True)

    return censored, has_bad

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def safe_send_message(bot: Bot, chat_id: int, text: str, **kwargs) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    try:
        await bot.send_message(chat_id=chat_id, text=text, **kwargs)
        return True
    except TelegramError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {chat_id}: {e}\n–¢–µ–∫—Å—Ç: {text[:100]}...")
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∑–¥–µ—Å—å, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {chat_id}: {e}\n–¢–µ–∫—Å—Ç: {text[:100]}...", exc_info=True)
    return False

async def safe_edit_message_text(query: Update.callback_query, text: str, **kwargs):
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    if not query or not query.message:
        return
    try:
        await query.edit_message_text(text=text, **kwargs)
    except TelegramError as e:
        if "message is not modified" not in str(e).lower():
            logger.warning(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}", exc_info=True)

async def safe_reply_text(update: Update, text: str, **kwargs):
    """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    if update.callback_query:
        await safe_edit_message_text(update.callback_query, text, **kwargs)
    elif update.message:
        try:
            await update.message.reply_text(text=text, **kwargs)
        except TelegramError as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: {e}", exc_info=True)

async def send_bot_status(bot: Bot, status: str) -> bool:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    if not ADMIN_CHAT_ID or not bot:
        return False

    try:
        current_time = datetime.now(TIMEZONE)
        message = (
            f"ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {status}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {current_time.strftime('%H:%M %d.%m.%Y')}\n"
            f"‚Ä¢ –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è: {'–î–∞' if is_working_hours() else '–ù–µ—Ç'}\n"
            f"‚Ä¢ Uptime: {get_uptime()}"
        )

        await bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=message,
            disable_notification=True
        )
        return True
    except TelegramError as e:
        logger.warning(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ Telegram: {e}")
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
        return False

async def publish_to_channel(app_id: int, bot: Bot) -> bool:
    """–ü—É–±–ª–∏–∫—É–µ—Ç –∑–∞—è–≤–∫—É –≤ –∫–∞–Ω–∞–ª —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    if not CHANNEL_ID:
        logger.error("CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
        return False

    app_details = get_application_details(app_id)
    if not app_details:
        logger.error(f"–ó–∞—è–≤–∫–∞ #{app_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return False

    try:
        await bot.send_message(
            chat_id=CHANNEL_ID,
            text=app_details['text']
        )
        mark_application_as_published(app_id)
        logger.info(f"–ó–∞—è–≤–∫–∞ #{app_id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ {CHANNEL_ID}")
        return True
    except TelegramError as e: # –ë–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞—è–≤–∫–∏ #{app_id} –≤ Telegram: {e}")
        return False
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞—è–≤–∫–∏ #{app_id}: {str(e)}")
        return False

async def check_pending_applications(context: CallbackContext) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ, –Ω–æ –µ—â–µ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏,
    –æ—Å–æ–±–µ–Ω–Ω–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é."""
    applications = get_approved_unpublished_applications()
    for app in applications:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ "—Å–≤–æ–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è" —Å –¥–∞—Ç–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Å—Ç—É–ø–∏–ª–∞
        if app['type'] == 'congrat' and app['congrat_type'] == 'custom':
            if app['publish_date']:
                publish_date_obj = datetime.strptime(app['publish_date'], "%Y-%m-%d").date()
                today = datetime.now().date()
                if publish_date_obj <= today: # –ï—Å–ª–∏ –¥–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ —Ä–∞–Ω—å—à–µ
                    logger.info(f"–ü–ª–∞–Ω–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è #{app['id']} (–¥–∞—Ç–∞ –ø–æ–¥–æ—à–ª–∞).")
                    await publish_to_channel(app['id'], context.bot)
                    await asyncio.sleep(1)
                # else: –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º, –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            else:
                # –≠—Ç–æ—Ç —Å–ª—É—á–∞–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏.
                # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –≤—Å–µ –µ—â–µ –∑–¥–µ—Å—å –±–µ–∑ –¥–∞—Ç—ã, —ç—Ç–æ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç.
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ #{app['id']} –±–µ–∑ –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ check_pending_applications. –ü—É–±–ª–∏–∫—É–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ.")
                await publish_to_channel(app['id'], context.bot)
                await asyncio.sleep(1)
        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ (–Ω–æ–≤–æ—Å—Ç–∏, –æ–±—ä—è–≤–ª–µ–Ω–∏—è, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è)
        # –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –±—ã—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏.
        # –ï—Å–ª–∏ –æ–Ω–∏ –≤—Å–µ –µ—â–µ –∑–¥–µ—Å—å –≤ —Å—Ç–∞—Ç—É—Å–µ 'approved' –∏ 'unpublished',
        # —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü—É–±–ª–∏–∫—É–µ–º –∏—Ö —Å–µ–π—á–∞—Å –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç.
        elif app['type'] in ['news', 'announcement'] or (app['type'] == 'congrat' and app['congrat_type'] != 'custom'):
            logger.warning(f"–ó–∞—è–≤–∫–∞ #{app['id']} —Ç–∏–ø–∞ '{app['type']}' –Ω–µ –±—ã–ª–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è. –ü—É–±–ª–∏–∫—É–µ–º —Å–µ–π—á–∞—Å.")
            await publish_to_channel(app['id'], context.bot)
            await asyncio.sleep(1)

async def check_shutdown_time(context: CallbackContext) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –≤—ã—à–ª–æ –ª–∏ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ (23:00) –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –µ–≥–æ"""
    if not is_working_hours():
        logger.info("–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞.")
        await send_bot_status(context.bot, "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ (—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å)")
        
        try:
            # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è python-telegram-bot
            await context.application.shutdown()
            # sys.exit(0) –∏–ª–∏ os._exit(0) –Ω–µ –Ω—É–∂–Ω—ã, —Ç.–∫. shutdown() –ø–æ–∑–∞–±–æ—Ç–∏—Ç—Å—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")
            # –ï—Å–ª–∏ shutdown() –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –º–æ–∂–Ω–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–π—Ç–∏, –Ω–æ —ç—Ç–æ –∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π
            sys.exit(1)

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
    required_files = [DB_FILE, BAD_WORDS_FILE]
    missing_files = [f for f in required_files if not os.path.exists(f)]

    if missing_files:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing_files}")
        if ADMIN_CHAT_ID:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç Bot –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ application –µ—â–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –∑–∞–ø—É—â–µ–Ω
            temp_bot = Bot(token=TOKEN)
            asyncio.run(safe_send_message(
                temp_bot,
                ADMIN_CHAT_ID,
                f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing_files)}"
            ))
            asyncio.run(temp_bot.close()) # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–æ—Ç–∞ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        return False
    return True

def check_bot_health():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º"""
    checks = {
        "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö": os.path.exists(DB_FILE),
        "–§–∞–π–ª –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤": os.path.exists(BAD_WORDS_FILE),
        "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è": all([TOKEN, CHANNEL_ID, ADMIN_CHAT_ID]),
        "–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å": str(datetime.now(TIMEZONE))
    }

    for name, status in checks.items():
        logger.info(f"{name}: {'OK' if status else 'ERROR'}")
        if not status and name != "–§–∞–π–ª –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤":
            raise RuntimeError(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞: {name}")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
async def start_command(update: Update, context: CallbackContext) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –æ—á–∏—Å—Ç–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    –¢–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞—è–≤–∫–∏, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç deep link.
    """
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username if user else 'N/A'} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    context.user_data.clear() # –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∑–∞–≤–∏—Å–∞–Ω–∏–π

    # –≠—Ç–∞ —á–∞—Å—Ç—å –∫–æ–¥–∞ —Ç–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –Ω–∞–ª–∏—á–∏—è deep link
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏:"
    keyboard = []
    for key, info in REQUEST_TYPES.items():
        keyboard.append([InlineKeyboardButton(f"{info['icon']} {info['name']}", callback_data=key)])
    keyboard += BACK_BUTTON  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º safe_reply_text, —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ message, —Ç–∞–∫ –∏ callback_query
    await safe_reply_text(update, text, reply_markup=InlineKeyboardMarkup(keyboard))

    return TYPE_SELECTION

async def handle_type_selection(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    query = update.callback_query
    if not query or not query.data:
        logger.warning("–ü—É—Å—Ç–æ–π callback_query –∏–ª–∏ data –≤ handle_type_selection.")
        return ConversationHandler.END

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{query.from_user.username if query.from_user else 'N/A'} –≤—ã–±—Ä–∞–ª —Ç–∏–ø –∑–∞—è–≤–∫–∏: {query.data}")
    logger.debug(f"–¢–µ–∫—É—â–µ–µ user_data –≤ handle_type_selection: {context.user_data}")

    try:
        await query.answer() # –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
    except TelegramError as e:
        logger.warning(f"Error answering callback query {query.id}: {e}")

    context.user_data["type"] = query.data
    request_type = query.data

    keyboard_nav = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]]

    if request_type == "congrat":
        await safe_edit_message_text(query,
            "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–∫—Ç–æ –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä: –í–Ω—É–∫ –í–∏—Ç–∞–ª–∏–π)",
            reply_markup=InlineKeyboardMarkup(keyboard_nav))
        return SENDER_NAME_INPUT
    elif request_type == "announcement":
        keyboard = []
        for key, name in ANNOUNCE_SUBTYPES.items():
            keyboard.append([InlineKeyboardButton(name, callback_data=key)])
        keyboard += keyboard_nav
        await safe_edit_message_text(query,
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ç–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard))
        return ANNOUNCE_SUBTYPE_SELECTION
    elif request_type == "news":
        await safe_edit_message_text(query,
            "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ (–¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤):",
            reply_markup=InlineKeyboardMarkup(keyboard_nav))
        return ANNOUNCE_TEXT_INPUT
    else:
        await safe_edit_message_text(query, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞—è–≤–∫–∏. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ.")
        return await start_command(update, context)

async def handle_sender_name_input(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –¥–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è."""
    user_message = update.message.text.strip() if update.message else ""
    if not validate_name(user_message):
        await safe_reply_text(update, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è. –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤ (–±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã), –Ω–µ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –∏ –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –¥–µ—Ñ–∏—Å–æ–º, –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–≤–æ–π–Ω—ã—Ö –¥–µ—Ñ–∏—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return SENDER_NAME_INPUT

    context.user_data["from_name"] = user_message
    keyboard_nav = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]]
    await safe_reply_text(update, "–ö–æ–≥–æ –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ë–∞–±—É—à–∫—É –ó–∏–Ω—É)", reply_markup=InlineKeyboardMarkup(keyboard_nav))
    return RECIPIENT_NAME_INPUT

async def handle_recipient_name_input(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è."""
    user_message = update.message.text.strip() if update.message else ""
    if not validate_name(user_message):
        await safe_reply_text(update, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è. –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤ (–±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã), –Ω–µ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –∏ –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –¥–µ—Ñ–∏—Å–æ–º, –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–≤–æ–π–Ω—ã—Ö –¥–µ—Ñ–∏—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return RECIPIENT_NAME_INPUT

    context.user_data["to_name"] = user_message

    keyboard = []
    for holiday_name, holiday_date in HOLIDAYS.items():
        if is_holiday_active(holiday_date):
            keyboard.append([InlineKeyboardButton(holiday_name, callback_data=f"holiday_{holiday_date}")])
    keyboard.append([InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="custom_congrat")])
    keyboard.append([InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")])

    await safe_reply_text(update, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–∑–¥–Ω–∏–∫ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard))
    return CONGRAT_HOLIDAY_CHOICE

async def handle_congrat_holiday_choice(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ –∏–ª–∏ –æ–ø—Ü–∏–∏ '—Å–≤–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ'."""
    query = update.callback_query
    if not query or not query.data:
        return ConversationHandler.END

    try:
        await query.answer()
    except TelegramError as e:
        logger.warning(f"Error answering callback query {query.id}: {e}")

    if query.data.startswith("holiday_"):
        holiday_date = query.data.replace("holiday_", "")
        holiday_name = next((name for name, date in HOLIDAYS.items() if date == holiday_date), "")
        context.user_data["congrat_type"] = "holiday"
        context.user_data["publish_date"] = holiday_date # –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ - –¥–µ–Ω—å –ø—Ä–∞–∑–¥–Ω–∏–∫–∞
        context.user_data["text"] = HOLIDAY_TEMPLATES.get(holiday_name, "")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        return await confirm_application(update, context)

    elif query.data == "custom_congrat":
        context.user_data["congrat_type"] = "custom"
        keyboard_nav = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]]
        await safe_edit_message_text(query, "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è (–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤):", reply_markup=InlineKeyboardMarkup(keyboard_nav))
        return CUSTOM_CONGRAT_MESSAGE_INPUT
    else:
        # –≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –ø—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç–µ, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        keyboard_nav = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]]
        await safe_edit_message_text(query, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=InlineKeyboardMarkup(keyboard_nav))
        return CONGRAT_HOLIDAY_CHOICE

async def handle_custom_congrat_message_input(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è."""
    user_message = update.message.text.strip() if update.message else ""
    if not user_message or len(user_message) > MAX_CONGRAT_TEXT_LENGTH:
        await safe_reply_text(update, f"–¢–µ–∫—Å—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ {MAX_CONGRAT_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return CUSTOM_CONGRAT_MESSAGE_INPUT

    context.user_data["text"] = user_message
    keyboard_nav = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]]
    await safe_reply_text(update, "–ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ? (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, –Ω–∞–ø—Ä–∏–º–µ—Ä 01.01.2025)", reply_markup=InlineKeyboardMarkup(keyboard_nav))
    return CONGRAT_DATE_INPUT

async def handle_congrat_date_input(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è."""
    user_message = update.message.text.strip() if update.message else ""
    try:
        publish_date = datetime.strptime(user_message, "%d.%m.%Y").date()
        if publish_date < datetime.now().date():
            await safe_reply_text(update, "–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É.")
            return CONGRAT_DATE_INPUT
        context.user_data["publish_date"] = publish_date.strftime("%Y-%m-%d")
    except ValueError:
        await safe_reply_text(update, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä 01.01.2025).")
        return CONGRAT_DATE_INPUT

    return await confirm_application(update, context)

async def handle_announce_subtype_selection(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–¥—Ç–∏–ø–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è."""
    query = update.callback_query
    if not query or not query.data:
        return ConversationHandler.END

    try:
        await query.answer()
    except TelegramError as e:
        logger.warning(f"Error answering callback query {query.id}: {e}")

    context.user_data["subtype"] = query.data
    keyboard_nav = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]]
    await safe_edit_message_text(query, "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–¥–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤):", reply_markup=InlineKeyboardMarkup(keyboard_nav))
    return ANNOUNCE_TEXT_INPUT

async def handle_announce_text_input(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–ª–∏ –Ω–æ–≤–æ—Å—Ç–∏."""
    user_message = update.message.text.strip() if update.message else ""
    if not user_message or len(user_message) > MAX_TEXT_LENGTH:
        await safe_reply_text(update, f"–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ {MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return ANNOUNCE_TEXT_INPUT

    context.user_data["text"] = user_message

    return await confirm_application(update, context)

async def confirm_application(update: Update, context: CallbackContext) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–≤–æ–¥–∫—É –∑–∞—è–≤–∫–∏ –∏ –ø—Ä–æ—Å–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    app_data = context.user_data
    app_type_info = REQUEST_TYPES.get(app_data.get("type"), {"name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "icon": ""})
    summary_text = f"{app_type_info['icon']} –¢–∏–ø: {app_type_info['name']}\n"

    if app_data.get("type") == "congrat":
        summary_text += f"–û—Ç –∫–æ–≥–æ: {app_data.get('from_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        summary_text += f"–ö–æ–º—É: {app_data.get('to_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        summary_text += f"–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {app_data.get('publish_date', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        summary_text += f"–¢–µ–∫—Å—Ç: {app_data.get('text', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    elif app_data.get("type") == "announcement":
        subtype_name = ANNOUNCE_SUBTYPES.get(app_data.get("subtype"), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        summary_text += f"–ü–æ–¥—Ç–∏–ø: {subtype_name}\n"
        summary_text += f"–¢–µ–∫—Å—Ç: {app_data.get('text', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    elif app_data.get("type") == "news":
        summary_text += f"–¢–µ–∫—Å—Ç: {app_data.get('text', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"

    censored_text, has_bad_words = await censor_text(app_data.get('text', ''))
    if has_bad_words:
        summary_text += "\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –í –≤–∞—à–µ–º —Ç–µ–∫—Å—Ç–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –û–Ω–∏ –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã –∏–ª–∏ —Å–∫—Ä—ã—Ç—ã –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.\n"
        summary_text += f"–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ü–µ–Ω–∑—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:\n{censored_text}\n"
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω–∑—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        context.user_data["final_text"] = censored_text
    else:
        context.user_data["final_text"] = app_data.get('text', '')

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é", callback_data="submit_application")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_application")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")]
    ]
    keyboard += BACK_BUTTON

    await safe_reply_text(update, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –∑–∞—è–≤–∫—É:\n\n{summary_text}\n\n–í—Å–µ –≤–µ—Ä–Ω–æ?", reply_markup=InlineKeyboardMarkup(keyboard))
    return WAIT_CENSOR_APPROVAL

async def handle_confirmation(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω—É –∑–∞—è–≤–∫–∏."""
    query = update.callback_query
    if not query or not query.data:
        return ConversationHandler.END

    try:
        await query.answer()
    except TelegramError as e:
        logger.warning(f"Error answering callback query {query.id}: {e}")

    if query.data == "submit_application":
        app_data = context.user_data
        user = update.effective_user
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º final_text, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –ø—Ä–æ—à–µ–ª —Ü–µ–Ω–∑—É—Ä—É
        data_to_save = {
            "user_id": user.id,
            "username": user.username,
            "type": app_data["type"],
            "subtype": app_data.get("subtype"),
            "from_name": app_data.get("from_name"),
            "to_name": app_data.get("to_name"),
            "text": app_data["final_text"], # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω–∑—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            "publish_date": app_data.get("publish_date"),
            "congrat_type": app_data.get("congrat_type")
        }
        
        app_id = add_application(data_to_save)

        if app_id:
            await safe_edit_message_text(query, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –°–ø–∞—Å–∏–±–æ!", reply_markup=None)
            logger.info(f"–ó–∞—è–≤–∫–∞ #{app_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} ({user.username}) –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ë–î.")
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
            if ADMIN_CHAT_ID:
                admin_notification_text = (
                    f"üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{app_id} –æ—Ç @{user.username or user.id}:\n"
                    f"–¢–∏–ø: {REQUEST_TYPES.get(app_data['type'], {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                    f"–¢–µ–∫—Å—Ç: {app_data['final_text'][:200]}...\n"
                    f"[–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –æ–¥–æ–±—Ä–∏—Ç—å](https://t.me/{context.bot.get_me().username}?start=moderate_{app_id})" # –ü—Ä–∏–º–µ—Ä —Å—Å—ã–ª–∫–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
                )
                await safe_send_message(context.bot, ADMIN_CHAT_ID, admin_notification_text)

            context.user_data.clear() # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            return ConversationHandler.END
        else:
            await safe_edit_message_text(query, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=None)
            return ConversationHandler.END

    elif query.data == "edit_application":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –Ω–∞—á–∞–ª—É –≤–≤–æ–¥–∞, —Å–æ—Ö—Ä–∞–Ω—è—è —Ç–∏–ø –∑–∞—è–≤–∫–∏
        app_type = context.user_data.get("type")
        context.user_data.clear() # –û—á–∏—â–∞–µ–º –≤—Å–µ, –∫—Ä–æ–º–µ —Ç–∏–ø–∞
        context.user_data["type"] = app_type

        keyboard_nav = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]]

        if app_type == "congrat":
            await safe_edit_message_text(query,
                "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–∫—Ç–æ –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä: –í–Ω—É–∫ –í–∏—Ç–∞–ª–∏–π)",
                reply_markup=InlineKeyboardMarkup(keyboard_nav))
            return SENDER_NAME_INPUT
        elif app_type == "announcement":
            keyboard = []
            for key, name in ANNOUNCE_SUBTYPES.items():
                keyboard.append([InlineKeyboardButton(name, callback_data=key)])
            keyboard += keyboard_nav
            await safe_edit_message_text(query,
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ç–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
                reply_markup=InlineKeyboardMarkup(keyboard))
            return ANNOUNCE_SUBTYPE_SELECTION
        elif app_type == "news":
            await safe_edit_message_text(query,
                "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ (–¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤):",
                reply_markup=InlineKeyboardMarkup(keyboard_nav))
            return ANNOUNCE_TEXT_INPUT
        else:
            # –ï—Å–ª–∏ —Ç–∏–ø –∑–∞—è–≤–∫–∏ –ø–æ—Ç–µ—Ä—è–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –Ω–∞—á–∞–ª–æ
            return await start_command(update, context)

    elif query.data == "cancel_application":
        await safe_edit_message_text(query, "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
        context.user_data.clear()
        return ConversationHandler.END

async def back_to_start(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username if user else 'N/A'} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –≤–æ–∑–≤—Ä–∞—Ç –≤ –Ω–∞—á–∞–ª–æ.")
    logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ user_data –¥–æ –æ—á–∏—Å—Ç–∫–∏: {context.user_data}")
    context.user_data.clear()
    logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ user_data –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {context.user_data}")

    if update.callback_query:
        try:
            await update.callback_query.answer()
            logger.debug(f"–û—Ç–≤–µ—Ç –Ω–∞ callback_query {update.callback_query.id} –≤ back_to_start.")
        except TelegramError as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback –≤ back_to_start: {e}")

    result = await start_command(update, context)
    logger.info(f"back_to_start –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {result}")
    return result

async def moderate_command(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /moderate –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    if update.effective_chat.id != ADMIN_CHAT_ID:
        await safe_reply_text(update, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = context.args
    if not args or len(args) != 1:
        await safe_reply_text(update, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /moderate <app_id>")

    except ValueError:
        await safe_reply_text(update, "ID –∑–∞—è–≤–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    app_details = get_application_details(app_id)

    if not app_details:
        await safe_reply_text(update, f"–ó–∞—è–≤–∫–∞ —Å ID {app_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


    try:
        app_id = int(args[0])
    except ValueError:
        await safe_reply_text(update, "ID –∑–∞—è–≤–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    app_details = get_application_details(app_id)

    if not app_details:
        await safe_reply_text(update, f"–ó–∞—è–≤–∫–∞ —Å ID {app_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    summary_text = f"–ó–∞—è–≤–∫–∞ #{app_id}:\n"
    summary_text += f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{app_details['username'] or app_details['user_id']}\n"
    summary_text += f"–¢–∏–ø: {REQUEST_TYPES.get(app_details['type'], {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    if app_details['subtype']:
        summary_text += f"–ü–æ–¥—Ç–∏–ø: {ANNOUNCE_SUBTYPES.get(app_details['subtype'], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    if app_details['from_name']:
        summary_text += f"–û—Ç –∫–æ–≥–æ: {app_details['from_name']}\n"
    if app_details['to_name']:
        summary_text += f"–ö–æ–º—É: {app_details['to_name']}\n"
    if app_details['publish_date']:
        summary_text += f"–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {app_details['publish_date']}\n"
    summary_text += f"–¢–µ–∫—Å—Ç: {app_details['text']}\n"
    summary_text += f"–°—Ç–∞—Ç—É—Å: {app_details['status']}\n"
    summary_text += f"–°–æ–∑–¥–∞–Ω–∞: {app_details['created_at']}\n"

    keyboard = [
        [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{app_id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{app_id}")]
    ]

    await safe_reply_text(update, summary_text, reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_moderation_callback(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–ª–±—ç–∫–∏ –æ—Ç –∫–Ω–æ–ø–æ–∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏."""
    query = update.callback_query
    if not query or not query.data:
        return

    try:
        await query.answer()
    except TelegramError as e:
        logger.warning(f"Error answering callback query {query.id}: {e}")

    if not query.data.startswith(("approve_", "reject_")):
        return

    action, app_id_str = query.data.split("_")
    app_id = int(app_id_str)

    app_details = get_application_details(app_id)
    if not app_details:
        await safe_edit_message_text(query, f"–ó–∞—è–≤–∫–∞ #{app_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.")
        return

    if app_details['status'] != 'pending':
        await safe_edit_message_text(query, f"–ó–∞—è–≤–∫–∞ #{app_id} —É–∂–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å '{app_details['status']}'.")
        return

    if action == "approve":
        if update_application_status(app_id, 'approved'):
            await safe_edit_message_text(query, f"–ó–∞—è–≤–∫–∞ #{app_id} –æ–¥–æ–±—Ä–µ–Ω–∞.")
            logger.info(f"–ó–∞—è–≤–∫–∞ #{app_id} –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {query.from_user.username or query.from_user.id}")
            
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –¥–∞—Ç–æ–π –≤ –±—É–¥—É—â–µ–º, –ø—É–±–ª–∏–∫—É–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
            if not (app_details['type'] == 'congrat' and app_details['congrat_type'] == 'custom' and app_details['publish_date'] and datetime.strptime(app_details['publish_date'], "%Y-%m-%d").date() > datetime.now().date()):
                await publish_to_channel(app_id, context.bot)
            else:
                await safe_send_message(context.bot, app_details['user_id'], f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{app_id} –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ {app_details['publish_date']}.")

        else:
            await safe_edit_message_text(query, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ #{app_id}.")
    elif action == "reject":
        if update_application_status(app_id, 'rejected'):
            await safe_edit_message_text(query, f"–ó–∞—è–≤–∫–∞ #{app_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
            logger.info(f"–ó–∞—è–≤–∫–∞ #{app_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {query.from_user.username or query.from_user.id}")
            await safe_send_message(context.bot, app_details['user_id'], f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{app_id} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
        else:
            await safe_edit_message_text(query, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ #{app_id}.")

async def error_handler(update: object, context: CallbackContext) -> None:
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏, –≤—ã–∑–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ Update."""
    logger.error("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", exc_info=context.error)
    try:
        if ADMIN_CHAT_ID:
            error_message = (
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ!\n"
                f"Update: {update}\n"
                f"–û—à–∏–±–∫–∞: {context.error}\n"
                f"Traceback: {traceback.format_exc()}"
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –æ–±—Ä–µ–∑–∞—è –¥–ª–∏–Ω–Ω—ã–π traceback
            await safe_send_message(context.bot, ADMIN_CHAT_ID, error_message[:4000])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞ ---
def get_uptime() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
    if BOT_STATE['start_time']:
        uptime = datetime.now() - BOT_STATE['start_time']
        days = uptime.days
        hours, remainder = divmod(uptime.seconds, 3600)
        minutes, seconds = divmod(remainder, 60)
        return f"{days}–¥ {hours}—á {minutes}–º {seconds}—Å"
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

async def update_last_activity(update: Update, context: CallbackContext) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞."""
    BOT_STATE['last_activity'] = datetime.now()

async def send_periodic_status(context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
    await send_bot_status(context.bot, "–†–∞–±–æ—Ç–∞–µ—Ç")

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ---
async def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    if not check_environment():
        logger.critical("–ù–µ –ø—Ä–æ–π–¥–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
        sys.exit(1)

    check_bot_health()
    init_db()
    await load_bad_words_cached() # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –∫—ç—à–∏—Ä—É–µ–º —Å–ª–æ–≤–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Application
    application = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start_command)],
        states={
            TYPE_SELECTION: [
                CallbackQueryHandler(handle_type_selection, pattern='^(congrat|announcement|news)$')
            ],
            SENDER_NAME_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_sender_name_input)
            ],
            RECIPIENT_NAME_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_recipient_name_input)
            ],
            CONGRAT_HOLIDAY_CHOICE: [
                CallbackQueryHandler(handle_congrat_holiday_choice, pattern='^(holiday_.*|custom_congrat)$')
            ],
            CUSTOM_CONGRAT_MESSAGE_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_custom_congrat_message_input)
            ],
            CONGRAT_DATE_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_congrat_date_input)
            ],
            ANNOUNCE_SUBTYPE_SELECTION: [
                CallbackQueryHandler(handle_announce_subtype_selection, pattern='^(ride|offer|lost)$')
            ],
            ANNOUNCE_TEXT_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_announce_text_input)
            ],
            WAIT_CENSOR_APPROVAL: [
                CallbackQueryHandler(handle_confirmation, pattern='^(submit_application|edit_application|cancel_application)$')
            ],
        },
        fallbacks=[
            CallbackQueryHandler(back_to_start, pattern='^back_to_start$'),
            CommandHandler("cancel", cancel_command) # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /cancel
        ]
    )
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("moderate", moderate_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ APScheduler
    global scheduler
    scheduler = AsyncIOScheduler(timezone=TIMEZONE)
    scheduler.add_job(check_pending_applications, 'interval', minutes=1, args=(application.bot,))
    scheduler.add_job(check_shutdown_time, 'interval', minutes=1, args=(application.bot,))
    scheduler.add_job(send_periodic_status, 'interval', hours=1, args=(application.bot,))
    scheduler.start()

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
    BOT_STATE['running'] = True
    BOT_STATE['start_time'] = datetime.now()
    BOT_STATE['last_activity'] = datetime.now()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    signal.signal(signal.SIGINT, handle_signal)
    signal.signal(signal.SIGTERM, handle_signal)
    atexit.register(lambda: asyncio.run(cleanup()))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await send_bot_status(application.bot, "–ó–∞–ø—É—â–µ–Ω")

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)
        sys.exit(1)



            CallbackQueryHandler(back_to_start, pattern=\'^back_to_start$\'
            ),
            CommandHandler("cancel", cancel_command)
        ]
    )
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("moderate", moderate_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ APScheduler
    global scheduler
    scheduler = AsyncIOScheduler(timezone=TIMEZONE)
    scheduler.add_job(check_pending_applications, \'interval\', minutes=1, args=(application.bot,))
    scheduler.add_job(check_shutdown_time, \'interval\', minutes=1, args=(application.bot,))
    scheduler.add_job(send_periodic_status, \'interval\', hours=1, args=(application.bot,))
    scheduler.start()

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
    BOT_STATE[\'running\'] = True
    BOT_STATE[\'start_time\'] = datetime.now()
    BOT_STATE[\'last_activity\'] = datetime.now()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    signal.signal(signal.SIGINT, handle_signal)
    signal.signal(signal.SIGTERM, handle_signal)
    atexit.register(lambda: asyncio.run(cleanup()))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await send_bot_status(application.bot, "–ó–∞–ø—É—â–µ–Ω")

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == \'__main__\':
    try:
        asyncio.run(main())
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)
        sys.exit(1)



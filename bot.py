import os
import sys
import logging
import sqlite3
import re
import asyncio
import secrets
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, Tuple, List
# FastAPI –∏–º–ø–æ—Ä—Ç—ã
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse
import uvicorn
# –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import pytz
from dotenv import load_dotenv
import aiofiles
from apscheduler.schedulers.asyncio import AsyncIOScheduler
# Telegram Bot –∏–º–ø–æ—Ä—Ç—ã
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import TelegramError
from telegram.ext import (
    Application,
    CallbackContext,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)
# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ FastAPI
app = FastAPI()
# ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==========
PORT = int(os.environ.get('PORT', 10000))
WEBHOOK_URL = os.getenv('WEBHOOK_URL', '')
TOKEN = os.getenv('TELEGRAM_TOKEN')
WEBHOOK_SECRET = os.getenv('WEBHOOK_SECRET')
CHANNEL_ID = int(os.getenv('CHANNEL_ID')) if os.getenv('CHANNEL_ID') else None
ADMIN_CHAT_ID = int(os.getenv('ADMIN_CHAT_ID')) if os.getenv('ADMIN_CHAT_ID') else None
TIMEZONE = pytz.timezone('Europe/Moscow')
WORKING_HOURS = (0, 23)
WORK_ON_WEEKENDS = True
# ========== –ö–û–ù–°–¢–ê–ù–¢–´ ==========
BACK_BUTTON = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]]
DB_FILE = 'db.sqlite'
BAD_WORDS_FILE = 'bad_words.txt'
DEFAULT_BAD_WORDS = ["—Ö—É–π", "–ø–∏–∑–¥–∞", "–±–ª—è—Ç—å", "–±–ª—è–¥—å", "–µ–±–∞—Ç—å", "—Å—É–∫–∞"]
MAX_NAME_LENGTH = 50
MAX_TEXT_LENGTH = 4000
MAX_CONGRAT_TEXT_LENGTH = 500
MAX_ANNOUNCE_NEWS_TEXT_LENGTH = 300
CHANNEL_NAME = "–ù–µ–±–æ–ª—å—à–æ–π –ú–∏—Ä: –ù–∏–∫–æ–ª–∞–µ–≤—Å–∫"
# ========== –ü–†–ò–ú–ï–†–´ –¢–ï–ö–°–¢–û–í ==========
EXAMPLE_TEXTS = {
    "sender_name": "–ò–≤–∞–Ω–æ–≤ –í–∏—Ç–∞–ª–∏–π",
    "recipient_name": "–∫–æ–ª–ª–µ–∫—Ç–∏–≤ –¥–µ—Ç—Å–∞–¥–∞ '–°–æ–ª–Ω—ã—à–∫–æ'",
    "congrat": {
        "custom": "–î–æ—Ä–æ–≥–∞—è –º–∞–º–∞! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –î–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è! –ñ–µ–ª–∞—é –∑–¥–æ—Ä–æ–≤—å—è –∏ —Å—á–∞—Å—Ç—å—è!"
    },
    "announcement": {
        "ride": "10.02 –µ–¥—É –≤ –í–æ–ª–≥–æ–≥—Ä–∞–¥. 2 –º–µ—Å—Ç–∞. –í—ã–µ–∑–¥ –≤ 8:00",
        "demand_offer": "–ò—â—É —Ä–∞–±–æ—Ç—É –≤–æ–¥–∏—Ç–µ–ª—è. –û–ø—ã—Ç 5 –ª–µ—Ç.",
        "lost": "–ù–∞–π–¥–µ–Ω –∫–ª—é—á —É –º–∞–≥–∞–∑–∏–Ω–∞ '–ü—Ä–æ–¥—É–∫—Ç—ã'. –û–ø–æ–∑–Ω–∞—Ç—å –ø–æ –±—Ä–µ–ª–∫—É."
    },
    "news": "15.01 –≤ –Ω–∞—à–µ–º –≥–æ—Ä–æ–¥–µ –æ—Ç–∫—Ä—ã–ª–∏ –Ω–æ–≤—É—é –¥–µ—Ç—Å–∫—É—é –ø–ª–æ—â–∞–¥–∫—É!"
}
# ========== –°–û–°–¢–û–Ø–ù–ò–Ø –î–ò–ê–õ–û–ì–ê ==========
(
    TYPE_SELECTION,
    SENDER_NAME_INPUT,
    RECIPIENT_NAME_INPUT,
    CONGRAT_HOLIDAY_CHOICE,
    CUSTOM_CONGRAT_MESSAGE_INPUT,
    CONGRAT_DATE_INPUT,
    ANNOUNCE_SUBTYPE_SELECTION,
    ANNOUNCE_TEXT_INPUT,
    PHONE_INPUT,  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    WAIT_CENSOR_APPROVAL
) = range(10)
# ========== –¢–ò–ü–´ –ó–ê–ü–†–û–°–û–í ==========
REQUEST_TYPES = {
    "congrat": {"name": "–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ", "icon": "üéâ"},
    "announcement": {"name": "–°–ø—Ä–æ—Å –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", "icon": "üì¢"},
    "news": {"name": "–ù–æ–≤–æ—Å—Ç—å –æ—Ç –∂–∏—Ç–µ–ª—è", "icon": "üóûÔ∏è"}
}
# ========== –ü–û–î–¢–ò–ü–´ –û–ë–™–Ø–í–õ–ï–ù–ò–ô ==========
ANNOUNCE_SUBTYPES = {
    "ride": "üöó –ü–æ–ø—É—Ç–∫–∞",
    "demand_offer": "ü§ù –°–ø—Ä–æ—Å –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
    "lost": "üîç –ü–æ—Ç–µ—Ä—è–ª–∏/–ù–∞—à–ª–∏"
}
# ========== –ü–†–ê–ó–î–ù–ò–ö–ò ==========
HOLIDAYS = {
    "üéÑ –ù–æ–≤—ã–π –≥–æ–¥": "01-01",
    "ü™ñ 23 –§–µ–≤—Ä–∞–ª—è": "02-23",
    "üíê 8 –ú–∞—Ä—Ç–∞": "03-08",
    "üèÖ 9 –ú–∞—è": "05-09",
    "üá∑üá∫ 12 –ò—é–Ω—è": "06-12",
    "ü§ù 4 –ù–æ—è–±—Ä—è": "11-04"
}
HOLIDAY_TEMPLATES = {
    "üéÑ –ù–æ–≤—ã–π –≥–æ–¥": "–° –ù–æ–≤—ã–º –≥–æ–¥–æ–º!\n–ü—É—Å—Ç—å –∏—Å–ø–æ–ª–Ω—è—é—Ç—Å—è –≤—Å–µ –≤–∞—à–∏ –∂–µ–ª–∞–Ω–∏—è!",
    "ü™ñ 23 –§–µ–≤—Ä–∞–ª—è": "–° –î–Ω—ë–º –∑–∞—â–∏—Ç–Ω–∏–∫–∞ –û—Ç–µ—á–µ—Å—Ç–≤–∞!\n–ú—É–∂–µ—Å—Ç–≤–∞, –æ—Ç–≤–∞–≥–∏ –∏ –º–∏—Ä–Ω–æ–≥–æ –Ω–µ–±–∞ –Ω–∞–¥ –≥–æ–ª–æ–≤–æ–π!",
    "üíê 8 –ú–∞—Ä—Ç–∞": "–° 8 –ú–∞—Ä—Ç–∞!\n–ö—Ä–∞—Å–æ—Ç—ã, —Å—á–∞—Å—Ç—å—è –∏ –≤–µ—Å–µ–Ω–Ω–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!",
    "üèÖ 9 –ú–∞—è": "–° –î–Ω—ë–º –ü–æ–±–µ–¥—ã!\n–í–µ—á–Ω–∞—è –ø–∞–º—è—Ç—å –≥–µ—Ä–æ—è–º!",
    "üá∑üá∫ 12 –ò—é–Ω—è": "–° –î–Ω—ë–º –†–æ—Å—Å–∏–∏!\n–ú–∏—Ä–∞, –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—è –∏ –ø—Ä–æ—Ü–≤–µ—Ç–∞–Ω–∏—è –Ω–∞—à–µ–π —Å—Ç—Ä–∞–Ω–µ!",
    "ü§ù 4 –ù–æ—è–±—Ä—è": "–° –î–Ω—ë–º –Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –µ–¥–∏–Ω—Å—Ç–≤–∞!\n–°–æ–≥–ª–∞—Å–∏—è, –º–∏—Ä–∞ –∏ –¥–æ–±—Ä–∞!"
}
# ========== –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ==========
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)
# ========== –ì–õ–û–ë–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –ë–û–¢–ê ==========
BOT_STATE = {
    'running': False,
    'start_time': None,
    'last_activity': None
}

# ========== –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ü–ï–†–ï–ú–ï–ù–ù–ê–Ø –î–õ–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ==========
# ‚úÖ 1. –°–¥–µ–ª–∞–π application —è–≤–Ω–æ asyncio-safe:
application_lock = asyncio.Lock()
application: Optional[Application] = None

# ========== –ë–ê–ó–ê –î–ê–ù–ù–´–• ==========
def cleanup_old_applications(days: int = 30) -> None:
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞—è–≤–∫–∏ —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π."""
    try:
        with get_db_connection() as conn:
            conn.execute("""
                DELETE FROM applications 
                WHERE created_at < datetime('now', ?) 
                AND status IN ('published', 'rejected')
            """, (f"-{days} days",))
            conn.commit()
            logger.info(f"–û—á–∏—Å—Ç–∫–∞ –ë–î: —É–¥–∞–ª–µ–Ω—ã –∑–∞—è–≤–∫–∏ —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π")
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ë–î: {e}", exc_info=True)

def get_db_connection() -> sqlite3.Connection:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏."""
    conn = sqlite3.connect(DB_FILE, check_same_thread=False)
    conn.row_factory = sqlite3.Row
    conn.execute("PRAGMA journal_mode=WAL")
    conn.execute("PRAGMA foreign_keys=ON")
    return conn

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        with get_db_connection() as conn:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É applications —Å –ø–æ–ª–µ–º phone_number
            conn.execute("""
                CREATE TABLE IF NOT EXISTS applications (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    username TEXT,
                    type TEXT NOT NULL,
                    subtype TEXT,
                    from_name TEXT,
                    to_name TEXT,
                    text TEXT NOT NULL,
                    photo_id TEXT,
                    phone_number TEXT,
                    status TEXT DEFAULT 'pending',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    publish_date DATE,
                    published_at TIMESTAMP,
                    congrat_type TEXT
                )
            """)
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ phone_number –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            try:
                conn.execute("ALTER TABLE applications ADD COLUMN phone_number TEXT")
                conn.commit()
            except sqlite3.OperationalError:
                pass  # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
            conn.execute("""
                CREATE INDEX IF NOT EXISTS idx_approved_unpublished
                ON applications(status, published_at)
                WHERE status = 'approved' AND published_at IS NULL
            """)
            conn.commit()
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}", exc_info=True)
        raise

def add_application(data: Dict[str, Any]) -> Optional[int]:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    try:
        with get_db_connection() as conn:
            cur = conn.cursor()
            cur.execute("""
                INSERT INTO applications
                (user_id, username, type, subtype, from_name, to_name, text, photo_id, phone_number, publish_date, congrat_type)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (
                    data['user_id'],
                    data.get('username'),
                    data['type'],
                    data.get('subtype'),
                    data.get('from_name'),
                    data.get('to_name'),
                    data['text'],
                    data.get('photo_id'),
                    data.get('phone_number'),  # –ù–æ–≤–æ–µ –ø–æ–ª–µ
                    data.get('publish_date'),
                    data.get('congrat_type')
                ))
            app_id = cur.lastrowid
            conn.commit()
            return app_id
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}\n–î–∞–Ω–Ω—ã–µ: {data}", exc_info=True)
        return None

def get_application_details(app_id: int) -> Optional[sqlite3.Row]:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ –ø–æ ID."""
    try:
        with get_db_connection() as conn:
            cur = conn.cursor()
            cur.execute("SELECT * FROM applications WHERE id = ?", (app_id,))
            return cur.fetchone()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ #{app_id}: {e}", exc_info=True)
        return None

def get_approved_unpublished_applications() -> list:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ, –Ω–æ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏."""
    try:
        with get_db_connection() as conn:
            cur = conn.cursor()
            cur.execute("""
            SELECT * FROM applications
            WHERE status = 'approved' AND published_at IS NULL
            """)
            return cur.fetchall()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {e}", exc_info=True)
        return []

def update_application_status(app_id: int, status: str) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏."""
    try:
        with get_db_connection() as conn:
            conn.execute("UPDATE applications SET status = ? WHERE id = ?", (status, app_id))
            conn.commit()
            return True
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ #{app_id}: {e}", exc_info=True)
        return False

def mark_application_as_published(app_id: int) -> bool:
    """–ü–æ–º–µ—á–∞–µ—Ç –∑–∞—è–≤–∫—É –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—É—é."""
    try:
        with get_db_connection() as conn:
            conn.execute("""
            UPDATE applications
            SET published_at = CURRENT_TIMESTAMP, status = 'published'
            WHERE id = ?
            """, (app_id,))
            conn.commit()
            return True
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞—è–≤–∫–∏ #{app_id}: {e}", exc_info=True)
        return False

def can_submit_request(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É (–ª–∏–º–∏—Ç)."""
    try:
        with get_db_connection() as conn:
            count = conn.execute("""
                SELECT COUNT(*) FROM applications 
                WHERE user_id = ? AND created_at > datetime('now', '-1 hour')
            """, (user_id,)).fetchone()[0]
            return count < 5
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞ –∑–∞—è–≤–æ–∫: {e}")
        return True

def is_working_hours() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–±–æ—á–µ–µ –ª–∏ –≤—Ä–µ–º—è."""
    current_time = datetime.now(TIMEZONE)
    current_hour = current_time.hour
    current_weekday = current_time.weekday()
    if not WORK_ON_WEEKENDS and current_weekday >= 5:
        return False
    return WORKING_HOURS[0] <= current_hour <= WORKING_HOURS[1]

def get_uptime() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
    if not BOT_STATE.get('start_time'):
        return "N/A"
    uptime = datetime.now(TIMEZONE) - BOT_STATE['start_time']
    days, remainder = divmod(uptime.total_seconds(), 86400)
    hours, remainder = divmod(remainder, 3600)
    minutes, _ = divmod(remainder, 60)
    return f"{int(days)}–¥ {int(hours)}—á {int(minutes)}–º"

def validate_name(name: str) -> bool:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏–º—è."""
    if not name or len(name) < 2 or len(name) > MAX_NAME_LENGTH:
        return False
    return bool(re.match(r'^[a-zA-Z–∞-—è–ê-–Ø—ë–Å\s\-]+$', name))

def validate_phone(phone: str) -> bool:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    clean_phone = re.sub(r'[^\d+]', '', phone)
    return bool(re.match(r'^(\+7|8)\d{10}$', clean_phone))

def is_holiday_active(holiday_date_str: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø—Ä–∞–∑–¥–Ω–∏–∫ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 5 –¥–Ω–µ–π)."""
    try:
        holiday_date = datetime.strptime(f"{datetime.now().year}-{holiday_date_str}", "%Y-%m-%d").date()
        today = datetime.now().date()
        return (holiday_date - timedelta(days=5)) <= today <= (holiday_date + timedelta(days=5))
    except ValueError:
        return False

async def load_bad_words() -> List[str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤."""
    try:
        async with aiofiles.open(BAD_WORDS_FILE, 'r', encoding='utf-8') as f:
            content = await f.read()
            return [word.strip() for line in content.splitlines() for word in line.split(',') if word.strip()]
    except FileNotFoundError:
        logger.warning("–§–∞–π–ª —Å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        return DEFAULT_BAD_WORDS
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤: {e}", exc_info=True)
        return DEFAULT_BAD_WORDS

async def censor_text(text: str) -> Tuple[str, bool]:
    """–¶–µ–Ω–∑—É—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    bad_words = await load_bad_words()
    censored = text
    has_bad = False
    for word in bad_words:
        try:
            if re.search(re.escape(word), censored, re.IGNORECASE):
                has_bad = True
                censored = re.sub(re.escape(word), '***', censored, flags=re.IGNORECASE)
        except re.error as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ü–µ–Ω–∑—É—Ä—ã —Å–ª–æ–≤–∞ '{word}': {e}")
    return censored, has_bad

async def safe_send_message(bot: Bot, chat_id: int, text: str, **kwargs) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    try:
        await bot.send_message(chat_id=chat_id, text=text, **kwargs)
        return True
    except TelegramError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {chat_id}: {e}")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {chat_id}: {e}", exc_info=True)
    return False

async def safe_edit_message_text(query, text: str, **kwargs):
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    if not query or not query.message:
        return
    try:
        await query.edit_message_text(text=text, **kwargs)
    except TelegramError as e:
        if "message is not modified" not in str(e).lower():
            logger.warning(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}", exc_info=True)

async def safe_reply_text(update: Update, text: str, **kwargs):
    """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    if update.callback_query:
        await safe_edit_message_text(update.callback_query, text, **kwargs)
    elif update.message:
        try:
            await update.message.reply_text(text=text, **kwargs)
        except TelegramError as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: {e}", exc_info=True)

async def notify_admin_new_application(bot: Bot, app_id: int, app_details: dict):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ."""
    if not ADMIN_CHAT_ID:
        return
    app_type = REQUEST_TYPES.get(app_details['type'], {}).get('name', '–ó–∞—è–≤–∫–∞')
    has_photo = "‚úÖ" if app_details.get('photo_id') else "‚ùå"
    phone = f"\n‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {app_details['phone_number']}" if app_details.get('phone_number') else ""
    text = (
        f"üì® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{app_id}\n"
        f"‚Ä¢ –¢–∏–ø: {app_type}\n‚Ä¢ –§–æ—Ç–æ: {has_photo}{phone}\n"
        f"‚Ä¢ –û—Ç: @{app_details.get('username') or 'N/A'} (ID: {app_details['user_id']})\n"
        f"‚Ä¢ –¢–µ–∫—Å—Ç: {app_details['text'][:200]}...\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    keyboard = [
        [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{app_id}"),
         InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{app_id}")],
        [InlineKeyboardButton("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data=f"view_{app_id}")]
    ]
    await safe_send_message(bot, ADMIN_CHAT_ID, text, reply_markup=InlineKeyboardMarkup(keyboard))

async def notify_user_about_decision(bot: Bot, app_details: dict, approved: bool):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–µ—à–µ–Ω–∏–∏ –ø–æ –∑–∞—è–≤–∫–µ."""
    user_id = app_details['user_id']
    app_type = REQUEST_TYPES.get(app_details['type'], {}).get('name', '–∑–∞—è–≤–∫–∞')
    status = "–æ–¥–æ–±—Ä–µ–Ω–∞" if approved else "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º"
    icon = "üéâ" if approved else "üòï"
    text = f"{icon} –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ ¬´{app_type}¬ª –±—ã–ª–∞ {status}."
    await safe_send_message(bot, user_id, text)

async def publish_to_channel(app_id: int, bot: Bot) -> bool:
    """–ü—É–±–ª–∏–∫—É–µ—Ç –∑–∞—è–≤–∫—É –≤ –∫–∞–Ω–∞–ª —Å —Ñ–æ—Ç–æ –∏–ª–∏ –±–µ–∑"""
    if not CHANNEL_ID:
        logger.error("CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
        return False
    app_details = get_application_details(app_id)
    if not app_details:
        logger.error(f"–ó–∞—è–≤–∫–∞ #{app_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return False
    current_time = datetime.now(TIMEZONE).strftime("%H:%M")
    text = app_details['text']
    photo_id = app_details['photo_id']
    phone = app_details['phone_number']
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if phone:
        text += f"\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
    message_text = (
        f"{text}\n"
        f"#–ù–µ–±–æ–ª—å—à–æ–π–ú–∏—Ä–ù–∏–∫–æ–ª–∞–µ–≤—Å–∫\n"
        f"üïí {current_time}"
    )
    try:
        if photo_id:
            await bot.send_photo(
                chat_id=CHANNEL_ID,
                photo=photo_id,
                caption=message_text,
                disable_notification=True
            )
        else:
            await bot.send_message(
                chat_id=CHANNEL_ID,
                text=message_text,
                disable_web_page_preview=True
            )
        mark_application_as_published(app_id)
        logger.info(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ #{app_id}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}")
        return False

async def check_pending_applications(context: CallbackContext) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏."""
    try:
        applications = get_approved_unpublished_applications()
        for app in applications:
            try:
                publish_now = True
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π
                if app['type'] == 'congrat' and app.get('publish_date'):
                    publish_date_obj = datetime.strptime(app['publish_date'], "%Y-%m-%d").date()
                    today = datetime.now().date()
                    if publish_date_obj > today:
                        publish_now = False
                if publish_now:
                    await publish_to_channel(app['id'], context.bot)
                    await asyncio.sleep(1)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ #{app['id']}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—è–≤–æ–∫: {e}")

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–ò–ê–õ–û–ì–ê ==========
async def start_command(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    context.user_data.clear()
    keyboard = [
        [InlineKeyboardButton(f"{info['icon']} {info['name']}", callback_data=key)]
        for key, info in REQUEST_TYPES.items()
    ]
    await safe_reply_text(update, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏:", reply_markup=InlineKeyboardMarkup(keyboard))
    return TYPE_SELECTION

async def handle_type_selection(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞—è–≤–∫–∏."""
    query = update.callback_query
    await query.answer()
    request_type = query.data
    context.user_data["type"] = request_type
    if request_type == "news":
        await safe_edit_message_text(
            query,
            f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –Ω–æ–≤–æ—Å—Ç—å (–¥–æ {MAX_TEXT_LENGTH} —Å–∏–º–≤.) –∏/–∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ:",
            reply_markup=InlineKeyboardMarkup(BACK_BUTTON)
        )
        return ANNOUNCE_TEXT_INPUT
    elif request_type == "congrat":
        await safe_edit_message_text(
            query,
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: *–ò–≤–∞–Ω–æ–≤ –í–∏—Ç–∞–ª–∏–π*):",
            reply_markup=InlineKeyboardMarkup(BACK_BUTTON),
            parse_mode="Markdown"
        )
        return SENDER_NAME_INPUT
    elif request_type == "announcement":
        keyboard = [
            [InlineKeyboardButton(subtype, callback_data=f"subtype_{key}")]
            for key, subtype in ANNOUNCE_SUBTYPES.items()
        ] + BACK_BUTTON
        await safe_edit_message_text(
            query,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ANNOUNCE_SUBTYPE_SELECTION
    return ConversationHandler.END

async def get_sender_name(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è."""
    sender_name = update.message.text.strip()
    if not validate_name(sender_name):
        await safe_reply_text(
            update,
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–æ—Ç 2 –¥–æ {MAX_NAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤)."
        )
        return SENDER_NAME_INPUT
    context.user_data["from_name"] = sender_name
    await safe_reply_text(
        update,
        f"–ö–æ–≥–æ –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ—Ç–µ? –ù–∞–ø—Ä–∏–º–µ—Ä: *{EXAMPLE_TEXTS['recipient_name']}*",
        parse_mode="Markdown"
    )
    return RECIPIENT_NAME_INPUT

async def get_recipient_name(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è."""
    recipient_name = update.message.text.strip()
    if not validate_name(recipient_name):
        await safe_reply_text(
            update,
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–æ—Ç 2 –¥–æ {MAX_NAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤)."
        )
        return RECIPIENT_NAME_INPUT
    context.user_data["to_name"] = recipient_name
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
    keyboard = [
        [InlineKeyboardButton(holiday, callback_data=f"holiday_{holiday}")]
        for holiday in HOLIDAYS
        if is_holiday_active(HOLIDAYS[holiday])
    ]
    keyboard += [
        [InlineKeyboardButton("üéÇ –°–≤–æ–π –ø—Ä–∞–∑–¥–Ω–∏–∫ (—É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É)", callback_data="custom_congrat")],
        [InlineKeyboardButton("üîô –í –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]
    ]
    await safe_reply_text(
        update,
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–∑–¥–Ω–∏–∫ –∏–ª–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CONGRAT_HOLIDAY_CHOICE

async def handle_congrat_holiday_choice(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞."""
    query = update.callback_query
    await query.answer()
    if query.data == "custom_congrat":
        context.user_data["congrat_type"] = "custom"
        await safe_edit_message_text(
            query,
            f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è (–¥–æ {MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):",
            reply_markup=InlineKeyboardMarkup(BACK_BUTTON)
        )
        return CUSTOM_CONGRAT_MESSAGE_INPUT
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞
    holiday = query.data.replace("holiday_", "")
    template = HOLIDAY_TEMPLATES.get(holiday, "–° –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º!")
    from_name = context.user_data.get("from_name", "")
    to_name = context.user_data.get("to_name", "")
    context.user_data["text"] = f"{from_name} –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ—Ç {to_name} —Å {holiday}!\n{template}"
    context.user_data["publish_date"] = datetime.now().strftime("%Y-%m-%d")
    return await complete_request(update, context)

async def get_custom_congrat_message(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è."""
    text = update.message.text.strip()
    if len(text) > MAX_TEXT_LENGTH:
        await safe_reply_text(
            update,
            f"–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º {MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤)."
        )
        return CUSTOM_CONGRAT_MESSAGE_INPUT
    from_name = context.user_data.get("from_name", "")
    to_name = context.user_data.get("to_name", "")
    context.user_data["text"] = f"{from_name} –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ—Ç {to_name}!\n{text}"
    await safe_reply_text(update, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì:")
    return CONGRAT_DATE_INPUT

async def get_congrat_date(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è."""
    date_str = update.message.text.strip()
    try:
        publish_date = datetime.strptime(date_str, "%d-%m-%Y").date()
        if publish_date < datetime.now().date():
            await safe_reply_text(update, "–ù–µ–ª—å–∑—è —É–∫–∞–∑–∞—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É.")
            return CONGRAT_DATE_INPUT
        context.user_data["publish_date"] = publish_date.strftime("%Y-%m-%d")
        return await complete_request(update, context)
    except ValueError:
        await safe_reply_text(update, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì:")
        return CONGRAT_DATE_INPUT

async def handle_announce_subtype_selection(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ç–∏–ø–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    subtype_key = query.data.replace("subtype_", "")
    context.user_data["subtype"] = subtype_key
    # –î–ª—è "–°–ø—Ä–æ—Å –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è" –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
    if subtype_key == "demand_offer":
        await safe_edit_message_text(
            query,
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω (—Ñ–æ—Ä–º–∞—Ç: +7... –∏–ª–∏ 8...):",
            reply_markup=InlineKeyboardMarkup(BACK_BUTTON)
        )
        return PHONE_INPUT
    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–µ–∫—Å—Ç—É
    example = EXAMPLE_TEXTS["announcement"].get(subtype_key, "")
    await safe_edit_message_text(
        query,
        f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–¥–æ {MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤) –∏/–∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ.\n–ü—Ä–∏–º–µ—Ä: *{example}*",
        reply_markup=InlineKeyboardMarkup(BACK_BUTTON),
        parse_mode="Markdown"
    )
    return ANNOUNCE_TEXT_INPUT

async def get_phone_number(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    phone = update.message.text.strip()
    if not validate_phone(phone):
        await safe_reply_text(
            update,
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ +7... –∏–ª–∏ 8..."
        )
        return PHONE_INPUT
    context.user_data["phone_number"] = phone
    await safe_reply_text(
        update,
        f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–¥–æ {MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤) –∏/–∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ:"
    )
    return ANNOUNCE_TEXT_INPUT

async def process_text_and_photo(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏/–∏–ª–∏ —Ñ–æ—Ç–æ."""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if update.message.photo:
        context.user_data["photo_id"] = update.message.photo[-1].file_id
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ
    text = update.message.text or update.message.caption
    if not text:
        await safe_reply_text(update, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫ –≤–∞—à–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é.")
        return ANNOUNCE_TEXT_INPUT
    text = text.strip()
    if len(text) > MAX_TEXT_LENGTH:
        await safe_reply_text(
            update,
            f"–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º {MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤)."
        )
        return ANNOUNCE_TEXT_INPUT
    context.user_data["text"] = text
    return await complete_request(update, context)

async def handle_censor_choice(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —Ü–µ–Ω–∑—É—Ä–µ."""
    query = update.callback_query
    await query.answer()
    if query.data == "accept_censor":
        context.user_data["text"] = context.user_data["censored_text"]
        return await complete_request(update, context)
    elif query.data == "edit_censor":
        await safe_edit_message_text(query, "–í–≤–µ–¥–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:")
        if context.user_data.get("type") == "congrat":
            return CUSTOM_CONGRAT_MESSAGE_INPUT
        return ANNOUNCE_TEXT_INPUT
    return ConversationHandler.END

async def complete_request(update: Update, context: CallbackContext) -> int:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏."""
    user = update.effective_user
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∑–∞—è–≤–æ–∫
    if not can_submit_request(user.id):
        await safe_reply_text(
            update,
            "–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞—è–≤–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return ConversationHandler.END
    user_data = context.user_data
    final_text = user_data.get("text", "")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
    censored_text, has_bad = await censor_text(final_text)
    if has_bad:
        user_data["censored_text"] = censored_text
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="accept_censor")],
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_censor")]
        ]
        await safe_reply_text(
            update,
            f"‚ö†Ô∏è –í —Ç–µ–∫—Å—Ç–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ (–∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ ***):\n{censored_text}\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ —Ç–µ–∫—Å—Ç:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return WAIT_CENSOR_APPROVAL
    # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
    app_data = {
        'user_id': user.id,
        'username': user.username,
        'type': user_data['type'],
        'text': final_text,
        'photo_id': user_data.get('photo_id'),
        'from_name': user_data.get('from_name'),
        'to_name': user_data.get('to_name'),
        'congrat_type': user_data.get('congrat_type'),
        'publish_date': user_data.get('publish_date'),
        'subtype': user_data.get('subtype'),
        'phone_number': user_data.get('phone_number')  # –ù–æ–≤–æ–µ –ø–æ–ª–µ
    }
    app_id = add_application(app_data)
    if app_id:
        await notify_admin_new_application(context.bot, app_id, app_data)
        request_type_name = REQUEST_TYPES.get(user_data['type'], {}).get('name', '–∑–∞—è–≤–∫–∞')
        await safe_reply_text(
            update,
            f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ ¬´{request_type_name}¬ª (‚Ññ{app_id}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!",
            reply_markup=InlineKeyboardMarkup(BACK_BUTTON)
        )
    else:
        await safe_reply_text(
            update,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(BACK_BUTTON)
        )
    context.user_data.clear()
    return ConversationHandler.END

async def back_to_start(update: Update, context: CallbackContext) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –Ω–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞."""
    if update.callback_query:
        await update.callback_query.answer()
    return await start_command(update, context)

async def cancel_command(update: Update, context: CallbackContext) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥."""
    await safe_reply_text(
        update,
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=InlineKeyboardMarkup(BACK_BUTTON)
    )
    context.user_data.clear()
    return ConversationHandler.END

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ê–î–ú–ò–ù–ê ==========
async def admin_view_application(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
    query = update.callback_query
    await query.answer()
    app_id = int(query.data.split('_')[1])
    app_details = get_application_details(app_id)
    if not app_details:
        await safe_edit_message_text(query, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    app_type = REQUEST_TYPES.get(app_details['type'], {}).get('name', '–ó–∞—è–≤–∫–∞')
    subtype = ANNOUNCE_SUBTYPES.get(app_details['subtype'], '') if app_details['subtype'] else ''
    from_name = f"–û—Ç: {app_details['from_name']}\n" if app_details['from_name'] else ''
    to_name = f"–ö–æ–º—É: {app_details['to_name']}\n" if app_details['to_name'] else ''
    phone = f"–¢–µ–ª–µ—Ñ–æ–Ω: {app_details['phone_number']}\n" if app_details['phone_number'] else ''
    publish_date = f"–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {app_details['publish_date']}\n" if app_details['publish_date'] else ''
    text = (
        f"üìù –î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ #{app_id}\n"
        f"–¢–∏–ø: {app_type} {subtype}\n"
        f"{from_name}{to_name}{phone}{publish_date}"
        f"–¢–µ–∫—Å—Ç: {app_details['text']}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{app_details.get('username', 'N/A')} (ID: {app_details['user_id']})\n"
        f"–°—Ç–∞—Ç—É—Å: {app_details['status']}\n"
        f"–°–æ–∑–¥–∞–Ω–æ: {app_details['created_at']}"
    )
    keyboard = [
        [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{app_id}"),
         InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{app_id}")]
    ]
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
    if app_details['photo_id']:
        try:
            await context.bot.send_photo(
                query.message.chat.id,
                photo=app_details['photo_id'],
                caption=text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            await query.delete_message()
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω—É: {e}")
            await safe_edit_message_text(query, text, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await safe_edit_message_text(query, text, reply_markup=InlineKeyboardMarkup(keyboard))

async def admin_approve_application(update: Update, context: CallbackContext):
    """–û–¥–æ–±—Ä—è–µ—Ç –∑–∞—è–≤–∫—É."""
    query = update.callback_query
    await query.answer()
    app_id = int(query.data.split('_')[1])
    app_details = get_application_details(app_id)
    if not app_details:
        await safe_edit_message_text(query, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    if update_application_status(app_id, 'approved'):
        await safe_edit_message_text(query, f"–ó–∞—è–≤–∫–∞ #{app_id} –æ–¥–æ–±—Ä–µ–Ω–∞.")
        await notify_user_about_decision(context.bot, app_details, True)
    else:
        await safe_edit_message_text(query, f"–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ #{app_id}.")

async def admin_reject_application(update: Update, context: CallbackContext):
    """–û—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞—è–≤–∫—É."""
    query = update.callback_query
    await query.answer()
    app_id = int(query.data.split('_')[1])
    app_details = get_application_details(app_id)
    if not app_details:
        await safe_edit_message_text(query, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    if update_application_status(app_id, 'rejected'):
        await safe_edit_message_text(query, f"–ó–∞—è–≤–∫–∞ #{app_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        await notify_user_about_decision(context.bot, app_details, False)
    else:
        await safe_edit_message_text(query, f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ #{app_id}.")

# ========== –ù–ê–°–¢–†–û–ô–ö–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ==========
async def setup_telegram_application():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."""
    global application
    # ‚úÖ 1. –°–¥–µ–ª–∞–π application —è–≤–Ω–æ asyncio-safe:
    async with application_lock:
        if application is not None:
            logger.info("Telegram Application —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
            return
        logger.info("–ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Application...")
        try:
            application = Application.builder().token(TOKEN).build()
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
            init_db()
            # –î–∏–∞–ª–æ–≥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
            conv_handler = ConversationHandler(
                entry_points=[CommandHandler("start", start_command)],
                states={
                    TYPE_SELECTION: [
                        CallbackQueryHandler(handle_type_selection, pattern="^(congrat|announcement|news)$")
                    ],
                    SENDER_NAME_INPUT: [
                        MessageHandler(filters.TEXT & ~filters.COMMAND, get_sender_name)
                    ],
                    RECIPIENT_NAME_INPUT: [
                        MessageHandler(filters.TEXT & ~filters.COMMAND, get_recipient_name)
                    ],
                    CONGRAT_HOLIDAY_CHOICE: [
                        CallbackQueryHandler(handle_congrat_holiday_choice, pattern="^(holiday_.*|custom_congrat)$")
                    ],
                    CUSTOM_CONGRAT_MESSAGE_INPUT: [
                        MessageHandler(filters.TEXT & ~filters.COMMAND, get_custom_congrat_message)
                    ],
                    CONGRAT_DATE_INPUT: [
                        MessageHandler(filters.TEXT & ~filters.COMMAND, get_congrat_date)
                    ],
                    ANNOUNCE_SUBTYPE_SELECTION: [
                        CallbackQueryHandler(handle_announce_subtype_selection, pattern="^subtype_.*")
                    ],
                    PHONE_INPUT: [
                        MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone_number)
                    ],
                    ANNOUNCE_TEXT_INPUT: [
                        MessageHandler(filters.TEXT | filters.PHOTO & ~filters.COMMAND, process_text_and_photo)
                    ],
                    WAIT_CENSOR_APPROVAL: [
                        CallbackQueryHandler(handle_censor_choice, pattern="^(accept_censor|edit_censor)$"),
                        MessageHandler(filters.TEXT & ~filters.COMMAND, process_text_and_photo)
                    ]
                },
                fallbacks=[
                    CommandHandler("cancel", cancel_command),
                    CallbackQueryHandler(back_to_start, pattern="^back_to_start$")
                ],
                allow_reentry=True
            )
            application.add_handler(conv_handler)
            # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–ª–ª–±—ç–∫–∏
            application.add_handler(CallbackQueryHandler(admin_approve_application, pattern="^approve_\\d+$"))
            application.add_handler(CallbackQueryHandler(admin_reject_application, pattern="^reject_\\d+$"))
            application.add_handler(CallbackQueryHandler(admin_view_application, pattern="^view_\\d+$"))
            await application.initialize()
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
            if WEBHOOK_URL and TOKEN:
                webhook_url = f"{WEBHOOK_URL}/telegram-webhook/{WEBHOOK_SECRET}"
                await application.bot.set_webhook(url=webhook_url)
                logger.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
            else:
                logger.warning("WEBHOOK_URL –∏–ª–∏ TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω—ã. –í–µ–±—Ö—É–∫ –Ω–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            scheduler = AsyncIOScheduler(timezone=TIMEZONE)
            scheduler.add_job(check_pending_applications, 'interval', minutes=1, args=[application])
            scheduler.add_job(cleanup_old_applications, 'cron', hour=3, minute=0)
            scheduler.start()
            logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω.")
            BOT_STATE['start_time'] = datetime.now(TIMEZONE)
            BOT_STATE['running'] = True
            logger.info("Telegram Application setup complete. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ—Ç–∫–ª—é—á–µ–Ω–æ.")
        except Exception as e:
            logger.critical("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Application.", exc_info=True)
            application = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º, –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
            raise # –ü–µ—Ä–µ–¥–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–∞–ª—å—à–µ

# ========== –ú–ê–†–®–†–£–¢–´ FASTAPI ==========
@app.on_event("startup")
async def startup_event():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∑–∞–ø—É—Å–∫–∞ FastAPI."""
    logger.info("–ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞...")
    try:
        await setup_telegram_application()
        logger.info("FastAPI —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ Telegram Application –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    except Exception as e:
        logger.critical("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Application.", exc_info=True)
        # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π, –º–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–¥–µ—Å—å
        # sys.exit(1) # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –ø—Ä–∏ –æ—à–∏–±–∫–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

# ‚úÖ 2. –ó–∞—â–∏—Ç–∏ –≤–µ–±—Ö—É–∫ –æ—Ç None, —Å –ø–æ–ø—ã—Ç–∫–æ–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:
@app.post("/telegram-webhook/{secret}")
async def telegram_webhook(secret: str, request: Request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ Telegram."""
    global application

    if secret != WEBHOOK_SECRET:
        raise HTTPException(status_code=403, detail="Invalid secret")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º application
    if application is None:
        logger.warning("‚ö†Ô∏è Telegram Application –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...")
        try:
            await setup_telegram_application()
            if application is None:
                 logger.critical("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ: application –≤—Å—ë –µ—â—ë None.")
                 raise HTTPException(status_code=500, detail="Initialization failed after retry")
            else:
                 logger.info("Telegram Application —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞.")
        except Exception as e:
            logger.critical("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ.", exc_info=True)
            raise HTTPException(status_code=500, detail="Initialization failed")

    # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ –ø–æ–º–æ–≥–ª–∞
    if application is None:
        logger.error("Telegram Application –≤—Å—ë –µ—â—ë –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏.")
        raise HTTPException(status_code=500, detail="Bot not initialized")

    try:
        update = Update.de_json(await request.json(), application.bot)
        await application.process_update(update)
        return JSONResponse(status_code=200, content={"status": "ok"})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/status")
async def status():
    """–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞."""
    return {
        "status": "running",
        "uptime": get_uptime(),
        "bot_initialized": application is not None
    }

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç."""
    return {"message": "Telegram Bot Webhook Listener"}

# –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=PORT)

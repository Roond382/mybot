import os
import re
import sqlite3
import hashlib
import logging
import asyncio
from pathlib import Path
from typing import Optional, Dict, List
from dotenv import load_dotenv
from telegram import (
    InlineKeyboardButton, InlineKeyboardMarkup, Update, BotCommand
)
from telegram.ext import (
    Application, CallbackQueryHandler, ContextTypes, CommandHandler,
    MessageHandler, filters, ConversationHandler
)
from telegram.error import Conflict, RetryAfter, TimedOut, NetworkError

# --- 1. –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot_final.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# --- 2. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
class Config:
    def __init__(self):
        BASE_DIR = Path(__file__).resolve().parent
        load_dotenv(BASE_DIR / ".env")
        self.BASE_DIR = BASE_DIR
        self.DB_FILE = BASE_DIR / "db.sqlite"
        self.TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
        self.ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", 0))
        self.CHANNEL_ID = os.getenv("CHANNEL_ID")
        self.BAD_WORDS_FILE = BASE_DIR / "bad_words.txt"
        self.DEFAULT_BAD_WORDS = ["—Ö—É–π", "–ø–∏–∑–¥–∞", "–±–ª—è—Ç—å", "–±–ª—è–¥—å", "–µ–±–∞—Ç—å", "—Å—É–∫–∞"]
        self.WORKING_HOURS = (0, 23)
        self.WORK_ON_WEEKENDS = True
        self.MAX_TEXT_LENGTH = 4000

        if not all([self.TOKEN, self.ADMIN_CHAT_ID, self.CHANNEL_ID]):
            raise ValueError("–ö–ª—é—á–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Telegram –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")

try:
    config = Config()
except ValueError as e:
    logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    exit(1)

# --- 3. –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–ó–û–ô –î–ê–ù–ù–´–• ---
def get_db_connection() -> sqlite3.Connection:
    conn = sqlite3.connect(config.DB_FILE, check_same_thread=False)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    with get_db_connection() as conn:
        conn.execute("""
            CREATE TABLE IF NOT EXISTS applications (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                username TEXT,
                type TEXT NOT NULL,
                subtype TEXT,
                from_name TEXT,
                to_name TEXT,
                text TEXT,
                photo_id TEXT,
                phone_number TEXT,
                status TEXT NOT NULL DEFAULT 'pending',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                published_at TIMESTAMP,
                publish_date DATE
            )
        """)
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        conn.execute("""
            CREATE INDEX IF NOT EXISTS idx_pending 
            ON applications (status) WHERE status = 'pending'
        """)
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ phone_number, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        try:
            conn.execute("ALTER TABLE applications ADD COLUMN phone_number TEXT")
            conn.commit()
            logger.info("–î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ phone_number –≤ —Ç–∞–±–ª–∏—Ü—É applications")
        except sqlite3.OperationalError:
            pass  # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

# --- 4. –ö–û–ù–°–¢–ê–ù–¢–´ –ò –¢–ò–ü–´ –ó–ê–Ø–í–û–ö ---
BACK_BUTTON = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]]

REQUEST_TYPES = {
    "congrat": {"name": "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ", "icon": "üéâ"},
    "announcement": {"name": "üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ", "icon": "üì¢"},
    "news": {"name": "üóûÔ∏è –ù–æ–≤–æ—Å—Ç—å –æ—Ç –∂–∏—Ç–µ–ª—è", "icon": "üóûÔ∏è"},
    "carpool": {"name": "üöó –ü–æ–ø—É—Ç–∫–∞", "icon": "üöó"},
}

# –ü–æ–¥—Ç–∏–ø—ã –¥–ª—è "–ü–æ–ø—É—Ç–∫–∞" (–±–µ–∑ —ç–º–æ–¥–∑–∏ –≤–Ω—É—Ç—Ä–∏)
CARPOOL_SUBTYPES = {
    "has_seats": "–ï—Å—Ç—å –º–µ—Å—Ç–∞",
    "needs_seats": "–ù—É–∂–Ω—ã –º–µ—Å—Ç–∞"
}

EXAMPLE_TEXTS = {
    "carpool": {
        "has_seats": "10.08 –µ–¥—É –≤ –•–∞–±–∞—Ä–æ–≤—Å–∫. 2 –º–µ—Å—Ç–∞. –í—ã–µ–∑–¥ –≤ 9:00",
        "needs_seats": "–ò—â—É –ø–æ–ø—É—Ç–∫—É –≤ –ù–∏–∫–æ–ª–∞–µ–≤—Å–∫ –Ω–∞ 12.08"
    }
}

# --- 5. –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
def validate_phone(phone: str) -> bool:
    clean_phone = re.sub(r'[^\d+]', '', phone)
    return bool(re.match(r'^(\+7|8)\d{10}$', clean_phone))

async def load_bad_words() -> List[str]:
    try:
        async with open(config.BAD_WORDS_FILE, 'r', encoding='utf-8') as f:
            content = await f.read()
        return [word.strip() for line in content.splitlines() for word in line.split(',') if word.strip()]
    except FileNotFoundError:
        logger.warning("–§–∞–π–ª bad_words.txt –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        return config.DEFAULT_BAD_WORDS
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ bad_words.txt: {e}")
        return config.DEFAULT_BAD_WORDS

async def censor_text(text: str) -> tuple[str, bool]:
    bad_words = await load_bad_words()
    censored = text
    has_bad = False
    for word in bad_words:
        try:
            if re.search(re.escape(word), censored, re.IGNORECASE):
                has_bad = True
                censored = re.sub(re.escape(word), '***', censored, flags=re.IGNORECASE)
        except re.error:
            continue
    return censored, has_bad

# --- 6. –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [
        [InlineKeyboardButton(f"{info['icon']} {info['name']}", callback_data=key)]
        for key, info in REQUEST_TYPES.items()
    ]
    await update.message.reply_text(
        "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return "TYPE_SELECTION"

async def handle_type_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    request_type = query.data
    context.user_data["type"] = request_type

    if request_type == "carpool":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–∏–ø—ã –ø–æ–ø—É—Ç–∫–∏ (–±–µ–∑ —ç–º–æ–¥–∑–∏)
        keyboard = [
            [InlineKeyboardButton(name, callback_data=f"carpool_{key}")]
            for key, name in CARPOOL_SUBTYPES.items()
        ] + BACK_BUTTON
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–ø—É—Ç–∫–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return "CARPOOL_SUBTYPE"
    elif request_type == "news":
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω (—Ñ–æ—Ä–º–∞—Ç: +7... –∏–ª–∏ 8...):",
            reply_markup=InlineKeyboardMarkup(BACK_BUTTON)
        )
        return "NEWS_PHONE_INPUT"
    else:
        await query.edit_message_text("–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=InlineKeyboardMarkup(BACK_BUTTON))
        return ConversationHandler.END

async def handle_carpool_subtype(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    subtype_key = query.data.replace("carpool_", "")
    context.user_data["subtype"] = subtype_key

    example = EXAMPLE_TEXTS["carpool"].get(subtype_key, "")
    await query.edit_message_text(
        f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ (–¥–æ {config.MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤).\n–ü—Ä–∏–º–µ—Ä: {example}",
        reply_markup=InlineKeyboardMarkup(BACK_BUTTON)
    )
    return "CARPOOL_TEXT_INPUT"

async def handle_carpool_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()
    if len(text) > config.MAX_TEXT_LENGTH:
        await update.message.reply_text(f"–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –ú–∞–∫—Å–∏–º—É–º: {config.MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.")
        return "CARPOOL_TEXT_INPUT"

    censored_text, has_bad = await censor_text(text)
    if has_bad:
        await update.message.reply_text("‚ùå –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞. –ó–∞—è–≤–∫–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
        return ConversationHandler.END

    phone = context.user_data.get("phone")
    if not phone:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω:")
        return "CARPOOL_PHONE_INPUT"

    # –ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è
    try:
        message = f"üöó <b>–ü–æ–ø—É—Ç–∫–∞</b>\n{censored_text}\nüìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n#–ü–æ–ø—É—Ç–∫–∞–ù–∏–∫–æ–ª–∞–µ–≤—Å–∫"
        await context.bot.send_message(
            chat_id=config.CHANNEL_ID,
            text=message,
            parse_mode="HTML"
        )
        await update.message.reply_text("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ–ø—É—Ç–∫–∏: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    context.user_data.clear()
    return ConversationHandler.END

# --- 7. –ö–û–ú–ê–ù–î–ê /pending (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫) ---
async def pending_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != config.ADMIN_CHAT_ID:
        return

    with get_db_connection() as conn:
        cur = conn.execute("""
            SELECT id, type, text, phone_number 
            FROM applications 
            WHERE status = 'pending' 
            ORDER BY created_at DESC
        """)
        apps = cur.fetchall()

    if not apps:
        await update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –≤ –æ—á–µ—Ä–µ–¥–∏.")
        return

    for app in apps:
        app_text = f"#{app['id']} ({app['type']})\n{app['text']}\nüìû {app['phone_number']}"
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{app['id']}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{app['id']}")
        ]])
        try:
            await context.bot.send_message(
                chat_id=config.ADMIN_CHAT_ID,
                text=app_text,
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É #{app['id']}: {e}")

# --- 8. –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
def main():
    init_db()

    app = (
        Application.builder()
        .token(config.TOKEN)
        .connect_timeout(30.0)
        .read_timeout(30.0)
        .write_timeout(30.0)
        .pool_timeout(30.0)
        .build()
    )

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start_command)],
        states={
            "TYPE_SELECTION": [CallbackQueryHandler(handle_type_selection)],
            "CARPOOL_SUBTYPE": [CallbackQueryHandler(handle_carpool_subtype)],
            "CARPOOL_TEXT_INPUT": [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_carpool_text)],
            "CARPOOL_PHONE_INPUT": [MessageHandler(filters.TEXT & ~filters.COMMAND, lambda u, c: handle_carpool_text(u, c))],
            "NEWS_PHONE_INPUT": [MessageHandler(filters.TEXT & ~filters.COMMAND, lambda u, c: None)],
            "back_to_start": [CallbackQueryHandler(start_command, pattern="^back_to_start$")]
        },
        fallbacks=[CommandHandler("cancel", lambda u, c: None)],
        allow_reentry=True
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("pending", pending_command))

    # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–æ–∫ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    job_queue = app.job_queue
    job_queue.run_repeating(lambda c: pending_command(Update(0, None), c), interval=300, first=10)

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /pending –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫.")
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    try:
        main()
    except Conflict:
        logger.error("‚ùå –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")
    except Exception as e:
        logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)

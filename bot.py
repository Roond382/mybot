import os
import sys
import logging
import sqlite3
import re
import asyncio
import secrets
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, Tuple, List

# FastAPI –∏–º–ø–æ—Ä—Ç—ã
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse
import uvicorn

# –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import pytz
from dotenv import load_dotenv
import aiofiles
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# Telegram Bot –∏–º–ø–æ—Ä—Ç—ã
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import TelegramError
from telegram.ext import (
    Application,
    CallbackContext,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ FastAPI
app = FastAPI()

# ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==========
PORT = int(os.environ.get('PORT', 10000))  # Render –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ—Ä—Ç 10000
WEBHOOK_URL = os.getenv('WEBHOOK_URL', '')
TOKEN = os.getenv('TELEGRAM_TOKEN')
WEBHOOK_SECRET = os.getenv('WEBHOOK_SECRET')
CHANNEL_ID = int(os.getenv('CHANNEL_ID')) if os.getenv('CHANNEL_ID') else None
ADMIN_CHAT_ID = int(os.getenv('ADMIN_CHAT_ID')) if os.getenv('ADMIN_CHAT_ID') else None
TIMEZONE = pytz.timezone('Europe/Moscow')
WORKING_HOURS = (0, 23)
WORK_ON_WEEKENDS = True

# ========== –ö–û–ù–°–¢–ê–ù–¢–´ ==========
BACK_BUTTON = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]]
DB_FILE = 'db.sqlite'
BAD_WORDS_FILE = 'bad_words.txt'
DEFAULT_BAD_WORDS = ["—Ö—É–π", "–ø–∏–∑–¥–∞", "–±–ª—è—Ç—å", "–±–ª—è–¥—å", "–µ–±–∞—Ç—å", "—Å—É–∫–∞"]
MAX_NAME_LENGTH = 50
MAX_TEXT_LENGTH = 4000
MAX_CONGRAT_TEXT_LENGTH = 500
MAX_ANNOUNCE_NEWS_TEXT_LENGTH = 300
CHANNEL_NAME = "–ù–µ–±–æ–ª—å—à–æ–π –ú–∏—Ä: –ù–∏–∫–æ–ª–∞–µ–≤—Å–∫"

# ========== –ü–†–ò–ú–ï–†–´ –¢–ï–ö–°–¢–û–í ==========
EXAMPLE_TEXTS = {
    "sender_name": "–ò–≤–∞–Ω–æ–≤ –í–∏—Ç–∞–ª–∏–π",
    "recipient_name": "–∫–æ–ª–ª–µ–∫—Ç–∏–≤ –¥–µ—Ç—Å–∞–¥–∞ '–°–æ–ª–Ω—ã—à–∫–æ'",
    "congrat": {
        "custom": "–î–æ—Ä–æ–≥–∞—è –º–∞–º–∞! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –î–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è! –ñ–µ–ª–∞—é –∑–¥–æ—Ä–æ–≤—å—è –∏ —Å—á–∞—Å—Ç—å—è!"
    },
    "announcement": {
        "ride": "10.02 –µ–¥—É –≤ –í–æ–ª–≥–æ–≥—Ä–∞–¥. 2 –º–µ—Å—Ç–∞. –í—ã–µ–∑–¥ –≤ 8:00",
        "demand_offer": "–ò—â—É —Ä–∞–±–æ—Ç—É –≤–æ–¥–∏—Ç–µ–ª—è. –û–ø—ã—Ç 5 –ª–µ—Ç. –¢–µ–ª: +7-900-123-45-67",
        "lost": "–ù–∞–π–¥–µ–Ω –∫–ª—é—á —É –º–∞–≥–∞–∑–∏–Ω–∞ '–ü—Ä–æ–¥—É–∫—Ç—ã'. –û–ø–æ–∑–Ω–∞—Ç—å –ø–æ –±—Ä–µ–ª–∫—É."
    },
    "news": "15.01 –≤ –Ω–∞—à–µ–º –≥–æ—Ä–æ–¥–µ –æ—Ç–∫—Ä—ã–ª–∏ –Ω–æ–≤—É—é –¥–µ—Ç—Å–∫—É—é –ø–ª–æ—â–∞–¥–∫—É!"
}

# ========== –°–û–°–¢–û–Ø–ù–ò–Ø –î–ò–ê–õ–û–ì–ê ==========
(
    TYPE_SELECTION,
    SENDER_NAME_INPUT,
    RECIPIENT_NAME_INPUT,
    CONGRAT_HOLIDAY_CHOICE,
    CUSTOM_CONGRAT_MESSAGE_INPUT,
    CONGRAT_DATE_INPUT,
    ANNOUNCE_SUBTYPE_SELECTION,
    ANNOUNCE_TEXT_INPUT,
    PHONE_INPUT,
    WAIT_CENSOR_APPROVAL
) = range(10)

# ========== –¢–ò–ü–´ –ó–ê–ü–†–û–°–û–í ==========
REQUEST_TYPES = {
    "congrat": {"name": "–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ", "icon": "üéâ"},
    "announcement": {"name": "–°–ø—Ä–æ—Å –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", "icon": "üì¢"},
    "news": {"name": "–ù–æ–≤–æ—Å—Ç—å –æ—Ç –∂–∏—Ç–µ–ª—è", "icon": "üóûÔ∏è"}
}

# ========== –ü–û–î–¢–ò–ü–´ –û–ë–™–Ø–í–õ–ï–ù–ò–ô ==========
ANNOUNCE_SUBTYPES = {
    "ride": "üöó –ü–æ–ø—É—Ç–∫–∞",
    "demand_offer": "ü§ù –°–ø—Ä–æ—Å –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
    "lost": "üîç –ü–æ—Ç–µ—Ä—è–ª–∏/–ù–∞—à–ª–∏"
}

# ========== –ü–†–ê–ó–î–ù–ò–ö–ò ==========
HOLIDAYS = {
    "üéÑ –ù–æ–≤—ã–π –≥–æ–¥": "01-01",
    "ü™ñ 23 –§–µ–≤—Ä–∞–ª—è": "02-23",
    "üíê 8 –ú–∞—Ä—Ç–∞": "03-08",
    "üèÖ 9 –ú–∞—è": "05-09",
    "üá∑üá∫ 12 –ò—é–Ω—è": "06-12",
    "ü§ù 4 –ù–æ—è–±—Ä—è": "11-04"
}

HOLIDAY_TEMPLATES = {
    "üéÑ –ù–æ–≤—ã–π –≥–æ–¥": "–° –ù–æ–≤—ã–º –≥–æ–¥–æ–º!\n–ü—É—Å—Ç—å –∏—Å–ø–æ–ª–Ω—è—é—Ç—Å—è –≤—Å–µ –≤–∞—à–∏ –∂–µ–ª–∞–Ω–∏—è!",
    "ü™ñ 23 –§–µ–≤—Ä–∞–ª—è": "–° –î–Ω—ë–º –∑–∞—â–∏—Ç–Ω–∏–∫–∞ –û—Ç–µ—á–µ—Å—Ç–≤–∞!\n–ú—É–∂–µ—Å—Ç–≤–∞, –æ—Ç–≤–∞–≥–∏ –∏ –º–∏—Ä–Ω–æ–≥–æ –Ω–µ–±–∞ –Ω–∞–¥ –≥–æ–ª–æ–≤–æ–π!",
    "üíê 8 –ú–∞—Ä—Ç–∞": "–° 8 –ú–∞—Ä—Ç–∞!\n–ö—Ä–∞—Å–æ—Ç—ã, —Å—á–∞—Å—Ç—å—è –∏ –≤–µ—Å–µ–Ω–Ω–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!",
    "üèÖ 9 –ú–∞—è": "–° –î–Ω—ë–º –ü–æ–±–µ–¥—ã!\n–í–µ—á–Ω–∞—è –ø–∞–º—è—Ç—å –≥–µ—Ä–æ—è–º!",
    "üá∑üá∫ 12 –ò—é–Ω—è": "–° –î–Ω—ë–º –†–æ—Å—Å–∏–∏!\n–ú–∏—Ä–∞, –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—è –∏ –ø—Ä–æ—Ü–≤–µ—Ç–∞–Ω–∏—è –Ω–∞—à–µ–π —Å—Ç—Ä–∞–Ω–µ!",
    "ü§ù 4 –ù–æ—è–±—Ä—è": "–° –î–Ω—ë–º –Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –µ–¥–∏–Ω—Å—Ç–≤–∞!\n–°–æ–≥–ª–∞—Å–∏—è, –º–∏—Ä–∞ –∏ –¥–æ–±—Ä–∞!"
}

# ========== –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ==========
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

application = None  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Application

# ========== –ì–õ–û–ë–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –ë–û–¢–ê ==========
BOT_STATE = {
    'running': False,
    'start_time': None,
    'last_activity': None
}

# ========== –ë–ê–ó–ê –î–ê–ù–ù–´–• ==========
def cleanup_old_applications(days: int = 30) -> None:
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞—è–≤–∫–∏ —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π."""
    try:
        with get_db_connection() as conn:
            conn.execute("""
                DELETE FROM applications 
                WHERE created_at < datetime('now', ?) 
                AND status IN ('published', 'rejected')
            """, (f"-{days} days",))
            conn.commit()
            logger.info(f"–û—á–∏—Å—Ç–∫–∞ –ë–î: —É–¥–∞–ª–µ–Ω—ã –∑–∞—è–≤–∫–∏ —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π")
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ë–î: {e}", exc_info=True)

def get_db_connection() -> sqlite3.Connection:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏."""
    conn = sqlite3.connect(DB_FILE, check_same_thread=False)
    conn.row_factory = sqlite3.Row
    conn.execute("PRAGMA journal_mode=WAL")  # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º WAL –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    conn.execute("PRAGMA foreign_keys=ON")   # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
    return conn
    
def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        with get_db_connection() as conn:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É applications
            conn.execute("""
                CREATE TABLE IF NOT EXISTS applications (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    username TEXT,
                    type TEXT NOT NULL,
                    subtype TEXT,
                    from_name TEXT,
                    to_name TEXT,
                    text TEXT NOT NULL,
                    photo_id TEXT,
                    phone_number TEXT,
                    status TEXT DEFAULT 'pending',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    publish_date DATE,
                    published_at TIMESTAMP,
                    congrat_type TEXT
                )
            """)
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
            conn.execute("""
                CREATE INDEX IF NOT EXISTS idx_approved_unpublished
                ON applications(status, published_at)
                WHERE status = 'approved' AND published_at IS NULL
            """)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            conn.execute("""
                CREATE TABLE IF NOT EXISTS user_limits (
                    user_id INTEGER PRIMARY KEY,
                    last_request_time TIMESTAMP,
                    request_count INTEGER DEFAULT 0
                )
            """)
            
            conn.commit()
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}", exc_info=True)
        raise

def add_application(data: Dict[str, Any]) -> Optional[int]:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    try:
        with get_db_connection() as conn:
            cur = conn.cursor()
            cur.execute("""
                INSERT INTO applications
                (user_id, username, type, subtype, from_name, to_name, text, photo_id, phone_number, publish_date, congrat_type)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (
                    data['user_id'],
                    data.get('username'),
                    data['type'],
                    data.get('subtype'),
                    data.get('from_name'),
                    data.get('to_name'),
                    data['text'],
                    data.get('photo_id'),
                    data.get('phone_number'),
                    data.get('publish_date'),
                    data.get('congrat_type')
                ))
            app_id = cur.lastrowid
            conn.commit()
            return app_id
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}\n–î–∞–Ω–Ω—ã–µ: {data}", exc_info=True)
        return None
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}", exc_info=True)
        return None

def get_application_details(app_id: int) -> Optional[sqlite3.Row]:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ –ø–æ ID."""
    try:
        with get_db_connection() as conn:
            cur = conn.cursor()
            cur.execute("SELECT * FROM applications WHERE id = ?", (app_id,))
            return cur.fetchone()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ #{app_id}: {e}", exc_info=True)
        return None

def get_approved_unpublished_applications() -> list:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ, –Ω–æ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏."""
    try:
        with get_db_connection() as conn:
            cur = conn.cursor()
            cur.execute("""
            SELECT id, user_id, username, type, subtype, from_name, to_name, text, publish_date, congrat_type
            FROM applications
            WHERE status = 'approved' AND published_at IS NULL
            """)
            return cur.fetchall()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {e}", exc_info=True)
        return []

def update_application_status(app_id: int, status: str) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏."""
    try:
        with get_db_connection() as conn:
            conn.execute("UPDATE applications SET status = ? WHERE id = ?", (status, app_id))
            conn.commit()
            return True
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ #{app_id}: {e}", exc_info=True)
        return False

def mark_application_as_published(app_id: int) -> bool:
    """–ü–æ–º–µ—á–∞–µ—Ç –∑–∞—è–≤–∫—É –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—É—é."""
    try:
        with get_db_connection() as conn:
            conn.execute("""
            UPDATE applications
            SET published_at = CURRENT_TIMESTAMP, status = 'published'
            WHERE id = ?
            """, (app_id,))
            conn.commit()
            return True
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞—è–≤–∫–∏ #{app_id}: {e}", exc_info=True)
        return False

async def load_bad_words() -> List[str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤."""
    try:
        async with aiofiles.open(BAD_WORDS_FILE, 'r', encoding='utf-8') as f:
            content = await f.read()
            return [word.strip() for line in content.splitlines() for word in line.split(',') if word.strip()]
    except FileNotFoundError:
        logger.warning("–§–∞–π–ª —Å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        return DEFAULT_BAD_WORDS
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤: {e}", exc_info=True)
        return DEFAULT_BAD_WORDS

async def censor_text(text: str) -> Tuple[str, bool]:
    """–¶–µ–Ω–∑—É—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    bad_words = await load_bad_words()
    censored = text
    has_bad = False

    for word in bad_words:
        try:
            if re.search(re.escape(word), censored, re.IGNORECASE):
                has_bad = True
                censored = re.sub(re.escape(word), '***', censored, flags=re.IGNORECASE)
        except re.error as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ü–µ–Ω–∑—É—Ä—ã —Å–ª–æ–≤–∞ '{word}': {e}\n–¢–µ–∫—Å—Ç: {text[:100]}...", exc_info=True)

    try:
        censored = re.sub(
            r'(–∑–≤–æ–Ω–∏—Ç–µ|–ø–∏—à–∏—Ç–µ|—Ç–µ–ª–µ—Ñ–æ–Ω|–Ω–æ–º–µ—Ä|—Ç–µ–ª\.?|—Ç\.)[:;\s]*([\+\d\(\).\s-]{7,})',
            '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–∫—Ä—ã—Ç–∞ (–ø–∏—à–∏—Ç–µ –≤ –õ–°)',
            censored,
            flags=re.IGNORECASE
        )
    except re.error as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ü–µ–Ω–∑—É—Ä—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {e}", exc_info=True)

    return censored, has_bad

async def safe_send_message(bot: Bot, chat_id: int, text: str, **kwargs) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    try:
        await bot.send_message(chat_id=chat_id, text=text, **kwargs)
        return True
    except TelegramError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {chat_id}: {e}\n–¢–µ–∫—Å—Ç: {text[:100]}...")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {chat_id}: {e}\n–¢–µ–∫—Å—Ç: {text[:100]}...", exc_info=True)
    return False

async def safe_edit_message_text(query: Update.callback_query, text: str, **kwargs):
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    if not query or not query.message:
        return
    try:
        await query.edit_message_text(text=text, **kwargs)
    except TelegramError as e:
        if "message is not modified" not in str(e).lower():
            logger.warning(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}", exc_info=True)

async def safe_reply_text(update: Update, text: str, **kwargs):
    """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    if update.callback_query:
        await safe_edit_message_text(update.callback_query, text, **kwargs)
    elif update.message:
        try:
            await update.message.reply_text(text=text, **kwargs)
        except TelegramError as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: {e}", exc_info=True)

async def send_bot_status(bot: Bot, status: str, force_send: bool = False) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
    if not ADMIN_CHAT_ID or not bot:
        return False

    try:
        current_time = datetime.now(TIMEZONE)
        message = (
            f"ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {status}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {current_time.strftime('%H:%M %d.%m.%Y')}\n"
            f"‚Ä¢ –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è: {'–î–∞' if is_working_hours() else '–ù–µ—Ç'}\n"
            f"‚Ä¢ Uptime: {get_uptime()}"
        )
        sent = await bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=message,
            disable_notification=True
        )
        return sent is not None
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω—É: {e}")
        return False

async def publish_to_channel(app_id: int, bot: Bot) -> bool:
    """–ü—É–±–ª–∏–∫—É–µ—Ç –∑–∞—è–≤–∫—É –≤ –∫–∞–Ω–∞–ª —Å —Ñ–æ—Ç–æ –∏–ª–∏ –±–µ–∑"""
    if not CHANNEL_ID:
        logger.error("CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
        return False

    app_details = get_application_details(app_id)
    if not app_details:
        logger.error(f"–ó–∞—è–≤–∫–∞ #{app_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return False

    current_time = datetime.now(TIMEZONE).strftime("%H:%M")
    
    # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª—è–º —á–µ—Ä–µ–∑ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é
    text = app_details['text']
    photo_id = app_details['photo_id'] if 'photo_id' in app_details else None
    
    message_text = (
        f"{text}\n\n"
        f"#–ù–µ–±–æ–ª—å—à–æ–π–ú–∏—Ä–ù–∏–∫–æ–ª–∞–µ–≤—Å–∫\n"
        f"üïí {current_time}"
    )

    try:
        if photo_id:
            await bot.send_photo(
                chat_id=CHANNEL_ID,
                photo=photo_id,
                caption=message_text,
                disable_notification=True
            )
        else:
            await bot.send_message(
                chat_id=CHANNEL_ID,
                text=message_text,
                disable_web_page_preview=True
            )
            
        mark_application_as_published(app_id)
        logger.info(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ #{app_id}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}")
        return False

async def check_pending_applications(context: CallbackContext) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏."""
    try:
        applications = get_approved_unpublished_applications()
        for app in applications:
            try:
                if app['type'] == 'congrat' and app.get('congrat_type') == 'custom':
                    if app.get('publish_date'):
                        publish_date_obj = datetime.strptime(app['publish_date'], "%Y-%m-%d").date()
                        today = datetime.now().date()
                        if publish_date_obj <= today:
                            logger.info(f"–ü–ª–∞–Ω–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è #{app['id']} (–¥–∞—Ç–∞ –ø–æ–¥–æ—à–ª–∞).")
                            await publish_to_channel(app['id'], context.bot)
                            await asyncio.sleep(1)
                else:
                    logger.info(f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞—è–≤–∫–∏ #{app['id']} —Ç–∏–ø–∞ '{app['type']}'")
                    await publish_to_channel(app['id'], context.bot)
                    await asyncio.sleep(1)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞—è–≤–∫–∏ #{app.get('id', 'N/A')}: {str(e)}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—è–≤–æ–∫: {str(e)}")

def is_working_hours() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–∞—Ö."""
    now = datetime.now(TIMEZONE)

    if not (WORKING_HOURS[0] <= now.hour < WORKING_HOURS[1]):
        return False

    if not WORK_ON_WEEKENDS and now.weekday() >= 5:
        return False

    return True

def check_environment() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö."""
    checks = {
        "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö": os.path.exists(DB_FILE),
        "–§–∞–π–ª –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤": os.path.exists(BAD_WORDS_FILE),
        "–¢–æ–∫–µ–Ω –±–æ—Ç–∞": bool(TOKEN),
        "ID –∫–∞–Ω–∞–ª–∞": bool(CHANNEL_ID),
        "–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å": str(datetime.now(TIMEZONE))
    }

    for name, status in checks.items():
        logger.info(f"{name}: {'OK' if status else 'ERROR'}")
        if not status and name != "–§–∞–π–ª –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤":
            return False
    return True

def get_uptime() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
    if not BOT_STATE.get('start_time'):
        return "N/A"
    
    uptime = datetime.now(TIMEZONE) - BOT_STATE['start_time']
    hours, remainder = divmod(uptime.seconds, 3600)
    minutes, seconds = divmod(remainder, 60)
    return f"{uptime.days}d {hours}h {minutes}m {seconds}s"

def validate_name(name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏."""
    if len(name) < 2 or len(name) > MAX_NAME_LENGTH:
        return False
    return bool(re.match(r'^[a-zA-Z–∞-—è–ê-–Ø—ë–Å\s\-]+$', name))

def validate_phone(phone: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ –ø–ª—é—Å–∞
    clean_phone = re.sub(r'[^\d+]', '', phone)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç: +7 –∏–ª–∏ 8 –≤ –Ω–∞—á–∞–ª–µ, –∑–∞—Ç–µ–º 10 —Ü–∏—Ñ—Ä
    return bool(re.match(r'^(\+7|8)\d{10}$', clean_phone))

def is_holiday_active(holiday_date_str: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç—É–∞–ª–µ–Ω –ª–∏ –ø—Ä–∞–∑–¥–Ω–∏–∫ –≤ —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥."""
    current_year = datetime.now().year
    holiday_date = datetime.strptime(f"{current_year}-{holiday_date_str}", "%Y-%m-%d").date()
    today = datetime.now().date()
    return (holiday_date - timedelta(days=5)) <= today <= (holiday_date + timedelta(days=5))

async def notify_admin_new_application(bot: Bot, app_id: int, app_details: dict) -> None:
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ."""
    if not ADMIN_CHAT_ID:
        return

    app_type = REQUEST_TYPES.get(app_details['type'], {}).get('name', app_details['type'])
    has_photo = "‚úÖ" if 'photo_id' in app_details and app_details['photo_id'] else "‚ùå"
    
    text = (
        f"üì® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{app_id}\n"
        f"‚Ä¢ –¢–∏–ø: {app_type}\n"
        f"‚Ä¢ –§–æ—Ç–æ: {has_photo}\n"
        f"‚Ä¢ –û—Ç: @{app_details['username'] or 'N/A'} (ID: {app_details['user_id']})\n"
        f"‚Ä¢ –¢–µ–∫—Å—Ç: {app_details['text'][:200]}...\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{app_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{app_id}")
        ],
        [InlineKeyboardButton("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é", callback_data=f"view_{app_id}")]
    ]

    await safe_send_message(
        bot,
        ADMIN_CHAT_ID,
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
async def notify_user_about_decision(bot: Bot, app_details: dict, approved: bool) -> None:
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–µ—à–µ–Ω–∏–∏ –ø–æ –µ–≥–æ –∑–∞—è–≤–∫–µ."""
    user_id = app_details['user_id']
    app_type = REQUEST_TYPES.get(app_details['type'], {}).get('name', app_details['type'])
    
    if approved:
        text = (
            f"üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ {app_type} –æ–¥–æ–±—Ä–µ–Ω–∞!\n"
            f"–û–Ω–∞ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ {CHANNEL_NAME}."
        )
    else:
        text = (
            f"üòï –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ {app_type} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –∫–∞–Ω–∞–ª–∞."
        )

    await safe_send_message(bot, user_id, text)

def can_submit_request(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É."""
    try:
        with get_db_connection() as conn:
            cur = conn.cursor()
            cur.execute("""
                SELECT COUNT(*) FROM applications
                WHERE user_id = ? AND created_at > datetime('now', '-1 hour')
            """, (user_id,))
            count = cur.fetchone()[0]
            return count < 5
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞ –∑–∞—è–≤–æ–∫: {e}")
        return True

async def start_command(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username if user else 'N/A'} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    context.user_data.clear()

    text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏:"
    keyboard = []
    for key, info in REQUEST_TYPES.items():
        keyboard.append([InlineKeyboardButton(f"{info['icon']} {info['name']}", callback_data=key)])
    keyboard += BACK_BUTTON

    await safe_reply_text(update, text, reply_markup=InlineKeyboardMarkup(keyboard))
    return TYPE_SELECTION

async def handle_type_selection(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞—è–≤–∫–∏."""
    query = update.callback_query
    if not query or not query.data:
        return ConversationHandler.END
        
    try:
        await query.answer()
    except TelegramError as e:
        logger.warning(f"Error answering callback query {query.id}: {e}")

    context.user_data["type"] = query.data
    request_type = query.data

    keyboard = [
        [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]
    ]

    if request_type == "news":
        await safe_edit_message_text(query,
            f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –Ω–æ–≤–æ—Å—Ç—å (–¥–æ {MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):\n"
            f"–ü—Ä–∏–º–µ—Ä: *{EXAMPLE_TEXTS['news']}*",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        return ANNOUNCE_TEXT_INPUT
        
    elif request_type == "congrat":
        await safe_edit_message_text(query,
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: *–ò–≤–∞–Ω–æ–≤ –í–∏—Ç–∞–ª–∏–π*):",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        return SENDER_NAME_INPUT
        
    elif request_type == "announcement":
        keyboard = [
            [InlineKeyboardButton(subtype, callback_data=f"subtype_{subtype_key}")]
            for subtype_key, subtype in ANNOUNCE_SUBTYPES.items()
        ] + [
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]
        ]
        
        await safe_edit_message_text(query,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ANNOUNCE_SUBTYPE_SELECTION
        
    else:
        await safe_edit_message_text(query, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞—è–≤–∫–∏.")
        return ConversationHandler.END

async def get_sender_name(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å –ø—Ä–∏–º–µ—Ä–æ–º"""
    keyboard = BACK_BUTTON  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    
    if not update.message or not update.message.text or not update.message.text.strip():
        await safe_reply_text(update,
            "–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.\n"
            f"–ü—Ä–∏–º–µ—Ä: *{EXAMPLE_TEXTS['sender_name']}*",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        return SENDER_NAME_INPUT

    sender_name = update.message.text.strip()
    if not validate_name(sender_name):
        await safe_reply_text(update,
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã, –æ—Ç 2 –¥–æ {MAX_NAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤).\n"
            f"–ü—Ä–∏–º–µ—Ä: *{EXAMPLE_TEXTS['sender_name']}*",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        return SENDER_NAME_INPUT

    context.user_data["from_name"] = sender_name
    await safe_reply_text(update,
        f"–ö–æ–≥–æ –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ—Ç–µ? –ù–∞–ø—Ä–∏–º–µ—Ä: *{EXAMPLE_TEXTS['recipient_name']}*",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )
    return RECIPIENT_NAME_INPUT

async def get_recipient_name(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è."""
    if not update.message or not update.message.text or not update.message.text.strip():
        await safe_reply_text(update,
            "–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.\n"
            f"–ü—Ä–∏–º–µ—Ä: *{EXAMPLE_TEXTS['recipient_name']}*",
            reply_markup=InlineKeyboardMarkup(BACK_BUTTON),
            parse_mode="Markdown"
        )
        return RECIPIENT_NAME_INPUT

    recipient_name = update.message.text.strip()
    if not validate_name(recipient_name):
        await safe_reply_text(update,
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã, –æ—Ç 2 –¥–æ {MAX_NAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤).\n"
            f"–ü—Ä–∏–º–µ—Ä: *—Å–µ—Å—Ç—Ä—É –í–∏–∫—Ç–æ—Ä–∏—é* –∏–ª–∏ *–∫–æ–ª–ª–µ–∫—Ç–∏–≤ –¥–µ—Ç—Å–∞–¥–∞ '–°–æ–ª–Ω—ã—à–∫–æ'*",
            reply_markup=InlineKeyboardMarkup(BACK_BUTTON),
            parse_mode="Markdown"
        )
        return RECIPIENT_NAME_INPUT

    context.user_data["to_name"] = recipient_name

    keyboard = [
        [InlineKeyboardButton(holiday, callback_data=f"holiday_{holiday}")]
        for holiday in HOLIDAYS
    ] + [
        [InlineKeyboardButton("üéÇ –°–≤–æ–π –ø—Ä–∞–∑–¥–Ω–∏–∫", callback_data="custom_congrat")],
        [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]
    ]

    await safe_reply_text(update,
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–∑–¥–Ω–∏–∫ –¥–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard))
    return CONGRAT_HOLIDAY_CHOICE

async def back_to_start(update: Update, context: CallbackContext) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    context.user_data.clear()
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username if user else 'N/A'} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –Ω–∞—á–∞–ª–æ")
    if update.callback_query:
        try:
            await update.callback_query.answer()
        except TelegramError as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback –≤ back_to_start: {e}")
    return await start_command(update, context)

async def cancel_command(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel."""
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username if user else 'N/A'} –æ—Ç–º–µ–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ")
    
    await safe_reply_text(
        update,
        "‚ùå –¢–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]
        ])
    )
    
    context.user_data.clear()
    return await back_to_start(update, context)

async def handle_congrat_holiday_choice(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–∞–∑–¥–Ω–∏–∫–∞."""
    query = update.callback_query
    if not query or not query.data:
        logger.warning("–ü—É—Å—Ç–æ–π callback_query –≤ handle_congrat_holiday_choice")
        return ConversationHandler.END

    try:
        await query.answer()
    except TelegramError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: {e}")

    if query.data == "publish_today":
        context.user_data["publish_date"] = datetime.now().strftime("%Y-%m-%d")
        return await submit_application(update, context)

    elif query.data == "custom_congrat":
        context.user_data["congrat_type"] = "custom"
        await safe_edit_message_text(query,
            f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ (–¥–æ {MAX_CONGRAT_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):\n"
            f"–ü—Ä–∏–º–µ—Ä: *{EXAMPLE_TEXTS['congrat']['custom']}*",
            reply_markup=InlineKeyboardMarkup(BACK_BUTTON),
            parse_mode="Markdown"
        )
        return CUSTOM_CONGRAT_MESSAGE_INPUT

    elif query.data.startswith("holiday_"):
        holiday_name = query.data[8:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "holiday_"
        if holiday_name in HOLIDAYS:
            context.user_data["congrat_type"] = "holiday"
            context.user_data["holiday_name"] = holiday_name
            
            template = HOLIDAY_TEMPLATES.get(holiday_name, "")
            from_name = context.user_data.get("from_name", "")
            to_name = context.user_data.get("to_name", "")
            
            context.user_data["text"] = f"{template}\n\n–û—Ç: {from_name}\n–î–ª—è: {to_name}"
            
            keyboard = [
                [InlineKeyboardButton("üìÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è", callback_data="publish_today")],
                [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]
            ]
            
            await safe_edit_message_text(query,
                f"–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ:\n\n{context.user_data['text']}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return CONGRAT_HOLIDAY_CHOICE
        else:
            await safe_edit_message_text(query, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–∞–∑–¥–Ω–∏–∫.")
            return ConversationHandler.END
    else:
        await safe_edit_message_text(query, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
        return ConversationHandler.END

async def get_custom_congrat_message(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ."""
    if not update.message or not update.message.text or not update.message.text.strip():
        await safe_reply_text(update,
            "–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è.\n"
            f"–ü—Ä–∏–º–µ—Ä: *{EXAMPLE_TEXTS['congrat']['custom']}*",
            reply_markup=InlineKeyboardMarkup(BACK_BUTTON),
            parse_mode="Markdown"
        )
        return CUSTOM_CONGRAT_MESSAGE_INPUT

    congrat_text = update.message.text.strip()
    if len(congrat_text) > MAX_CONGRAT_TEXT_LENGTH:
        await safe_reply_text(update,
            f"–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º {MAX_CONGRAT_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.\n"
            f"–¢–µ–∫—É—â–∞—è –¥–ª–∏–Ω–∞: {len(congrat_text)} —Å–∏–º–≤–æ–ª–æ–≤.",
            reply_markup=InlineKeyboardMarkup(BACK_BUTTON)
        )
        return CUSTOM_CONGRAT_MESSAGE_INPUT

    from_name = context.user_data.get("from_name", "")
    to_name = context.user_data.get("to_name", "")
    
    context.user_data["text"] = f"{congrat_text}\n\n–û—Ç: {from_name}\n–î–ª—è: {to_name}"
    
    await safe_reply_text(update,
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.2024",
        reply_markup=InlineKeyboardMarkup(BACK_BUTTON)
    )
    return CONGRAT_DATE_INPUT

async def get_congrat_date(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è."""
    if not update.message or not update.message.text or not update.message.text.strip():
        await safe_reply_text(update,
            "–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É.\n"
            "–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.03.2024)",
            reply_markup=InlineKeyboardMarkup(BACK_BUTTON)
        )
        return CONGRAT_DATE_INPUT

    date_text = update.message.text.strip()
    try:
        publish_date = datetime.strptime(date_text, "%d.%m.%Y").date()
        today = datetime.now().date()
        
        if publish_date < today:
            await safe_reply_text(update,
                "–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:",
                reply_markup=InlineKeyboardMarkup(BACK_BUTTON)
            )
            return CONGRAT_DATE_INPUT
            
        context.user_data["publish_date"] = publish_date.strftime("%Y-%m-%d")
        return await submit_application(update, context)
        
    except ValueError:
        await safe_reply_text(update,
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.2024",
            reply_markup=InlineKeyboardMarkup(BACK_BUTTON)
        )
        return CONGRAT_DATE_INPUT

async def handle_announce_subtype_selection(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–¥—Ç–∏–ø–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è."""
    query = update.callback_query
    if not query or not query.data:
        return ConversationHandler.END
        
    try:
        await query.answer()
    except TelegramError as e:
        logger.warning(f"Error answering callback query: {e}")

    if query.data.startswith("subtype_"):
        subtype = query.data[8:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "subtype_"
        context.user_data["subtype"] = subtype
        
        # –î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–°–ø—Ä–æ—Å –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è" –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
        if subtype == "demand_offer":
            await safe_edit_message_text(query,
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:\n"
                "–§–æ—Ä–º–∞—Ç: +7-XXX-XXX-XX-XX –∏–ª–∏ 8-XXX-XXX-XX-XX",
                reply_markup=InlineKeyboardMarkup(BACK_BUTTON)
            )
            return PHONE_INPUT
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ç–µ–∫—Å—Ç–∞
            example_key = subtype if subtype in EXAMPLE_TEXTS["announcement"] else "ride"
            await safe_edit_message_text(query,
                f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–¥–æ {MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):\n"
                f"–ü—Ä–∏–º–µ—Ä: *{EXAMPLE_TEXTS['announcement'][example_key]}*",
                reply_markup=InlineKeyboardMarkup(BACK_BUTTON),
                parse_mode="Markdown"
            )
            return ANNOUNCE_TEXT_INPUT
    else:
        await safe_edit_message_text(query, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–¥—Ç–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è.")
        return ConversationHandler.END

async def get_phone_number(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–°–ø—Ä–æ—Å –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'."""
    if not update.message or not update.message.text or not update.message.text.strip():
        await safe_reply_text(update,
            "–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
            "–§–æ—Ä–º–∞—Ç: +7-XXX-XXX-XX-XX –∏–ª–∏ 8-XXX-XXX-XX-XX",
            reply_markup=InlineKeyboardMarkup(BACK_BUTTON)
        )
        return PHONE_INPUT

    phone = update.message.text.strip()
    if not validate_phone(phone):
        await safe_reply_text(update,
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: +7-XXX-XXX-XX-XX –∏–ª–∏ 8-XXX-XXX-XX-XX\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: +7-900-123-45-67",
            reply_markup=InlineKeyboardMarkup(BACK_BUTTON)
        )
        return PHONE_INPUT

    context.user_data["phone_number"] = phone
    
    await safe_reply_text(update,
        f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–¥–æ {MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):\n"
        f"–ü—Ä–∏–º–µ—Ä: *{EXAMPLE_TEXTS['announcement']['demand_offer']}*",
        reply_markup=InlineKeyboardMarkup(BACK_BUTTON),
        parse_mode="Markdown"
    )
    return ANNOUNCE_TEXT_INPUT

async def get_announce_text(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–ª–∏ –Ω–æ–≤–æ—Å—Ç–∏."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ
    photo_id = None
    if update.message and update.message.photo:
        photo_id = update.message.photo[-1].file_id
        await safe_reply_text(update, "‚è≥ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...")
        context.user_data["photo_id"] = photo_id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞
    text_content = None
    if update.message and update.message.text:
        text_content = update.message.text.strip()
    elif update.message and update.message.caption:
        text_content = update.message.caption.strip()

    if not text_content:
        await safe_reply_text(update,
            "–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.",
            reply_markup=InlineKeyboardMarkup(BACK_BUTTON)
        )
        return ANNOUNCE_TEXT_INPUT

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
    max_length = MAX_ANNOUNCE_NEWS_TEXT_LENGTH if context.user_data.get("type") == "news" else MAX_TEXT_LENGTH
    if len(text_content) > max_length:
        await safe_reply_text(update,
            f"–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º {max_length} —Å–∏–º–≤–æ–ª–æ–≤.\n"
            f"–¢–µ–∫—É—â–∞—è –¥–ª–∏–Ω–∞: {len(text_content)} —Å–∏–º–≤–æ–ª–æ–≤.",
            reply_markup=InlineKeyboardMarkup(BACK_BUTTON)
        )
        return ANNOUNCE_TEXT_INPUT

    context.user_data["text"] = text_content
    return await submit_application(update, context)

async def submit_application(update: Update, context: CallbackContext) -> int:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é."""
    user = update.effective_user
    
    if not can_submit_request(user.id):
        await safe_reply_text(update,
            "‚ùå –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞—è–≤–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(BACK_BUTTON)
        )
        return ConversationHandler.END

    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    application_data = {
        "user_id": user.id,
        "username": user.username,
        "type": context.user_data.get("type"),
        "subtype": context.user_data.get("subtype"),
        "from_name": context.user_data.get("from_name"),
        "to_name": context.user_data.get("to_name"),
        "text": context.user_data.get("text"),
        "photo_id": context.user_data.get("photo_id"),
        "phone_number": context.user_data.get("phone_number"),
        "publish_date": context.user_data.get("publish_date"),
        "congrat_type": context.user_data.get("congrat_type")
    }

    # –¶–µ–Ω–∑—É—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    censored_text, has_bad_words = await censor_text(application_data["text"])
    application_data["text"] = censored_text

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    app_id = add_application(application_data)
    
    if app_id:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await notify_admin_new_application(context.bot, app_id, application_data)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        request_type_name = REQUEST_TYPES.get(application_data["type"], {}).get("name", "–∑–∞—è–≤–∫–∞")
        await safe_reply_text(update,
            f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ {request_type_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!\n"
            f"–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: #{app_id}\n\n"
            f"–ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ—ë –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=InlineKeyboardMarkup(BACK_BUTTON)
        )
        
        logger.info(f"–ó–∞—è–≤–∫–∞ #{app_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user.username} ({user.id}) –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    else:
        await safe_reply_text(update,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(BACK_BUTTON)
        )
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user.username} ({user.id})")

    context.user_data.clear()
    return ConversationHandler.END

async def handle_admin_callback(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å—ã –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    query = update.callback_query
    if not query or not query.data:
        return

    try:
        await query.answer()
    except TelegramError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ admin callback: {e}")

    if query.from_user.id != ADMIN_CHAT_ID:
        return

    data = query.data
    
    if data.startswith("approve_"):
        app_id = int(data[8:])
        if update_application_status(app_id, "approved"):
            app_details = get_application_details(app_id)
            if app_details:
                await notify_user_about_decision(context.bot, app_details, True)
                await safe_edit_message_text(query, f"‚úÖ –ó–∞—è–≤–∫–∞ #{app_id} –æ–¥–æ–±—Ä–µ–Ω–∞.")
            else:
                await safe_edit_message_text(query, f"‚ùå –ó–∞—è–≤–∫–∞ #{app_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        else:
            await safe_edit_message_text(query, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ #{app_id}.")
            
    elif data.startswith("reject_"):
        app_id = int(data[7:])
        if update_application_status(app_id, "rejected"):
            app_details = get_application_details(app_id)
            if app_details:
                await notify_user_about_decision(context.bot, app_details, False)
                await safe_edit_message_text(query, f"‚ùå –ó–∞—è–≤–∫–∞ #{app_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
            else:
                await safe_edit_message_text(query, f"‚ùå –ó–∞—è–≤–∫–∞ #{app_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        else:
            await safe_edit_message_text(query, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ #{app_id}.")
            
    elif data.startswith("view_"):
        app_id = int(data[5:])
        app_details = get_application_details(app_id)
        if app_details:
            app_type = REQUEST_TYPES.get(app_details['type'], {}).get('name', app_details['type'])
            text = (
                f"üìã –ó–∞—è–≤–∫–∞ #{app_id}\n"
                f"‚Ä¢ –¢–∏–ø: {app_type}\n"
                f"‚Ä¢ –û—Ç: @{app_details['username'] or 'N/A'} (ID: {app_details['user_id']})\n"
                f"‚Ä¢ –î–∞—Ç–∞: {app_details['created_at']}\n\n"
                f"–¢–µ–∫—Å—Ç:\n{app_details['text']}"
            )
            
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{app_id}"),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{app_id}")
                ]
            ]
            
            if app_details['photo_id']:
                await context.bot.send_photo(
                    chat_id=query.message.chat_id,
                    photo=app_details['photo_id'],
                    caption=text,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            else:
                await safe_edit_message_text(query, text, reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            await safe_edit_message_text(query, f"‚ùå –ó–∞—è–≤–∫–∞ #{app_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

async def handle_message(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–Ω–µ –¥–∏–∞–ª–æ–≥–∞."""
    user = update.effective_user
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{user.username if user else 'N/A'}: {update.message.text[:50] if update.message and update.message.text else '–ú–µ–¥–∏–∞'}")
    
    await safe_reply_text(update,
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å", callback_data="back_to_start")]
        ])
    )

def create_conversation_handler() -> ConversationHandler:
    """–°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞."""
    return ConversationHandler(
        entry_points=[
            CommandHandler("start", start_command),
            CallbackQueryHandler(back_to_start, pattern="^back_to_start$")
        ],
        states={
            TYPE_SELECTION: [
                CallbackQueryHandler(handle_type_selection, pattern="^(congrat|announcement|news)$"),
                CallbackQueryHandler(back_to_start, pattern="^back_to_start$")
            ],
            SENDER_NAME_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_sender_name),
                CallbackQueryHandler(back_to_start, pattern="^back_to_start$")
            ],
            RECIPIENT_NAME_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_recipient_name),
                CallbackQueryHandler(back_to_start, pattern="^back_to_start$")
            ],
            CONGRAT_HOLIDAY_CHOICE: [
                CallbackQueryHandler(handle_congrat_holiday_choice),
                CallbackQueryHandler(back_to_start, pattern="^back_to_start$")
            ],
            CUSTOM_CONGRAT_MESSAGE_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_custom_congrat_message),
                CallbackQueryHandler(back_to_start, pattern="^back_to_start$")
            ],
            CONGRAT_DATE_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_congrat_date),
                CallbackQueryHandler(back_to_start, pattern="^back_to_start$")
            ],
            ANNOUNCE_SUBTYPE_SELECTION: [
                CallbackQueryHandler(handle_announce_subtype_selection, pattern="^subtype_"),
                CallbackQueryHandler(back_to_start, pattern="^back_to_start$")
            ],
            PHONE_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone_number),
                CallbackQueryHandler(back_to_start, pattern="^back_to_start$")
            ],
            ANNOUNCE_TEXT_INPUT: [
                MessageHandler((filters.TEXT | filters.PHOTO) & ~filters.COMMAND, get_announce_text),
                CallbackQueryHandler(back_to_start, pattern="^back_to_start$")
            ]
        },
        fallbacks=[
            CommandHandler("cancel", cancel_command),
            CallbackQueryHandler(back_to_start, pattern="^back_to_start$")
        ],
        allow_reentry=True
    )

async def setup_bot() -> Application:
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞."""
    global application
    
    if not TOKEN:
        raise ValueError("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(create_conversation_handler())
    application.add_handler(CallbackQueryHandler(handle_admin_callback, pattern="^(approve_|reject_|view_)"))
    application.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, handle_message))
    
    return application

async def setup_scheduler(bot_app: Application) -> AsyncIOScheduler:
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á."""
    scheduler = AsyncIOScheduler(timezone=TIMEZONE)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—è–≤–æ–∫ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    scheduler.add_job(
        check_pending_applications,
        'interval',
        minutes=5,
        args=[bot_app.create_context()],
        id='check_applications'
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞—è–≤–æ–∫ —Ä–∞–∑ –≤ –¥–µ–Ω—å
    scheduler.add_job(
        cleanup_old_applications,
        'cron',
        hour=2,
        minute=0,
        id='cleanup_old_applications'
    )
    
    return scheduler

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ."""
    global application
    
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    BOT_STATE['start_time'] = datetime.now(TIMEZONE)
    BOT_STATE['running'] = True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if not check_environment():
        logger.error("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
        sys.exit(1)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞
    application = await setup_bot()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = await setup_scheduler(application)
    scheduler.start()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
    if WEBHOOK_URL:
        await application.bot.set_webhook(
            url=f"{WEBHOOK_URL}/webhook",
            secret_token=WEBHOOK_SECRET
        )
        logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}/webhook")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω—É
    await send_bot_status(application.bot, "–ó–∞–ø—É—â–µ–Ω")
    
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

@app.on_event("shutdown")
async def shutdown_event():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ."""
    global application
    
    logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    BOT_STATE['running'] = False
    
    if application:
        await send_bot_status(application.bot, "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        await application.shutdown()
    
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

@app.post("/webhook")
async def webhook_handler(request: Request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω
        if WEBHOOK_SECRET:
            token = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
            if token != WEBHOOK_SECRET:
                raise HTTPException(status_code=403, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = await request.json()
        update = Update.de_json(data, application.bot)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        await application.process_update(update)
        
        return JSONResponse({"status": "ok"})
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞."""
    return {
        "status": "ok",
        "uptime": get_uptime(),
        "running": BOT_STATE['running'],
        "timestamp": datetime.now(TIMEZONE).isoformat()
    }

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=PORT)


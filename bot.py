import os
import sys
import logging
import sqlite3
import re
import asyncio
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, Tuple, List

# FastAPI –∏–º–ø–æ—Ä—Ç—ã
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse
import uvicorn

# –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import pytz
from dotenv import load_dotenv
import aiofiles
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# Telegram Bot –∏–º–ø–æ—Ä—Ç—ã
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import TelegramError
from telegram.ext import (
    Application,
    CallbackContext,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ FastAPI
app = FastAPI()

# ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==========
PORT = int(os.environ.get('PORT', 10000))
WEBHOOK_URL = os.getenv('WEBHOOK_URL', '')
TOKEN = os.getenv('TELEGRAM_TOKEN')
WEBHOOK_SECRET = os.getenv('WEBHOOK_SECRET')
CHANNEL_ID = int(os.getenv('CHANNEL_ID')) if os.getenv('CHANNEL_ID') else None
ADMIN_CHAT_ID = int(os.getenv('ADMIN_CHAT_ID')) if os.getenv('ADMIN_CHAT_ID') else None
TIMEZONE = pytz.timezone('Europe/Moscow')
WORKING_HOURS = (0, 23)
WORK_ON_WEEKENDS = True

# ========== –ö–û–ù–°–¢–ê–ù–¢–´ ==========
BACK_BUTTON = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]]
DB_FILE = 'db.sqlite'
BAD_WORDS_FILE = 'bad_words.txt'
DEFAULT_BAD_WORDS = ["—Ö—É–π", "–ø–∏–∑–¥–∞", "–±–ª—è—Ç—å", "–±–ª—è–¥—å", "–µ–±–∞—Ç—å", "—Å—É–∫–∞"]
MAX_NAME_LENGTH = 50
MAX_TEXT_LENGTH = 4000
MAX_CONGRAT_TEXT_LENGTH = 500
MAX_ANNOUNCE_NEWS_TEXT_LENGTH = 300
CHANNEL_NAME = "–ù–µ–±–æ–ª—å—à–æ–π –ú–∏—Ä: –ù–∏–∫–æ–ª–∞–µ–≤—Å–∫"

# ========== –ü–†–ò–ú–ï–†–´ –¢–ï–ö–°–¢–û–í ==========
EXAMPLE_TEXTS = {
    "sender_name": "–ò–≤–∞–Ω–æ–≤ –í–∏—Ç–∞–ª–∏–π",
    "recipient_name": "–∫–æ–ª–ª–µ–∫—Ç–∏–≤ –¥–µ—Ç—Å–∞–¥–∞ '–°–æ–ª–Ω—ã—à–∫–æ'",
    "congrat": {
        "custom": "–î–æ—Ä–æ–≥–∞—è –º–∞–º–∞! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –î–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è! –ñ–µ–ª–∞—é –∑–¥–æ—Ä–æ–≤—å—è –∏ —Å—á–∞—Å—Ç—å—è!"
    },
    "announcement": {
        "ride": "10.02 –µ–¥—É –≤ –í–æ–ª–≥–æ–≥—Ä–∞–¥. 2 –º–µ—Å—Ç–∞. –í—ã–µ–∑–¥ –≤ 8:00",
        "demand_offer": "–ò—â—É —Ä–∞–±–æ—Ç—É –≤–æ–¥–∏—Ç–µ–ª—è. –û–ø—ã—Ç 5 –ª–µ—Ç.",
        "lost": "–ù–∞–π–¥–µ–Ω –∫–ª—é—á —É –º–∞–≥–∞–∑–∏–Ω–∞ '–ü—Ä–æ–¥—É–∫—Ç—ã'. –û–ø–æ–∑–Ω–∞—Ç—å –ø–æ –±—Ä–µ–ª–∫—É."
    },
    "news": "15.01 –≤ –Ω–∞—à–µ–º –≥–æ—Ä–æ–¥–µ –æ—Ç–∫—Ä—ã–ª–∏ –Ω–æ–≤—É—é –¥–µ—Ç—Å–∫—É—é –ø–ª–æ—â–∞–¥–∫—É!"
}

# ========== –°–û–°–¢–û–Ø–ù–ò–Ø –î–ò–ê–õ–û–ì–ê ==========
(
    TYPE_SELECTION,
    SENDER_NAME_INPUT,
    RECIPIENT_NAME_INPUT,
    CONGRAT_HOLIDAY_CHOICE,
    CUSTOM_CONGRAT_MESSAGE_INPUT,
    CONGRAT_DATE_CHOICE,
    CONGRAT_DATE_INPUT,
    ANNOUNCE_SUBTYPE_SELECTION,
    ANNOUNCE_TEXT_INPUT,
    PHONE_INPUT,
    WAIT_CENSOR_APPROVAL,
    NEWS_PHONE_INPUT,
    NEWS_TEXT_INPUT,
    RIDE_TYPE_SELECTION,
    RIDE_FROM_INPUT,
    RIDE_TO_INPUT,
    RIDE_DATE_INPUT,
    RIDE_SEATS_INPUT,
    RIDE_PHONE_INPUT
) = range(19)

# ========== –¢–ò–ü–´ –ó–ê–ü–†–û–°–û–í ==========
REQUEST_TYPES = {
    "congrat": {"name": "–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ", "icon": "üéâ"},
    "announcement": {"name": "–û–±—ä—è–≤–ª–µ–Ω–∏–µ", "icon": "üì¢"},
    "news": {"name": "–ù–æ–≤–æ—Å—Ç—å –æ—Ç –∂–∏—Ç–µ–ª—è", "icon": "üóûÔ∏è"}
}

# ========== –ü–û–î–¢–ò–ü–´ –û–ë–™–Ø–í–õ–ï–ù–ò–ô ==========
ANNOUNCE_SUBTYPES = {
    "ride": "üöó –ü–æ–ø—É—Ç–∫–∞",
    "demand_offer": "ü§ù –°–ø—Ä–æ—Å –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
    "lost": "üîç –ü–æ—Ç–µ—Ä—è–ª–∏/–ù–∞—à–ª–∏"
}

# ========== –ü–†–ê–ó–î–ù–ò–ö–ò ==========
HOLIDAYS = {
    "üéÑ –ù–æ–≤—ã–π –≥–æ–¥": "01-01",
    "ü™ñ 23 –§–µ–≤—Ä–∞–ª—è": "02-23",
    "üíê 8 –ú–∞—Ä—Ç–∞": "03-08",
    "üèÖ 9 –ú–∞—è": "05-09",
    "üá∑üá∫ 12 –ò—é–Ω—è": "06-12",
    "ü§ù 4 –ù–æ—è–±—Ä—è": "11-04"
}

# ========== –®–ê–ë–õ–û–ù–´ –ü–û–ó–î–†–ê–í–õ–ï–ù–ò–ô ==========
HOLIDAY_TEMPLATES = {
    "üéÑ –ù–æ–≤—ã–π –≥–æ–¥": "–° –ù–æ–≤—ã–º –≥–æ–¥–æ–º! ‚ú® –ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–æ–≤–æ–≥–æ –≥–æ–¥–∞ –±—É–¥–µ—Ç –Ω–∞–ø–æ–ª–Ω–µ–Ω —Ä–∞–¥–æ—Å—Ç—å—é, —Ç–µ–ø–ª–æ–º –∏ –≤–µ—Ä–æ–π –≤ –ª—É—á—à–µ–µ!",
    "ü™ñ 23 –§–µ–≤—Ä–∞–ª—è": "–° –î–Ω—ë–º –∑–∞—â–∏—Ç–Ω–∏–∫–∞ –û—Ç–µ—á–µ—Å—Ç–≤–∞! üí™ –ö—Ä–µ–ø–∫–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è, —Å–∏–ª—ã –¥—É—Ö–∞ –∏ –º–∏—Ä–Ω–æ–≥–æ –Ω–µ–±–∞ –Ω–∞–¥ –≥–æ–ª–æ–≤–æ–π!",
    "üíê 8 –ú–∞—Ä—Ç–∞": "–° 8 –ú–∞—Ä—Ç–∞! üå∏ –ü—É—Å—Ç—å –≤ –≤–∞—à–µ–π –∂–∏–∑–Ω–∏ –±—É–¥–µ—Ç –º–Ω–æ–≥–æ —Ç–µ–ø–ª–∞, –∫—Ä–∞—Å–æ—Ç—ã –∏ —Å—á–∞—Å—Ç–ª–∏–≤—ã—Ö –º–≥–Ω–æ–≤–µ–Ω–∏–π!",
    "üèÖ 9 –ú–∞—è": "–° –î–Ω—ë–º –ü–æ–±–µ–¥—ã! üá∑üá∫ –ú—ã –ø–æ–º–Ω–∏–º –ø–æ–¥–≤–∏–≥ –∏ —Ä–∞–¥—É–µ–º—Å—è –≤–µ–ª–∏–∫–æ–π –ü–æ–±–µ–¥–µ! –ü—É—Å—Ç—å –≤ –≤–∞—à–µ–º –¥–æ–º–µ –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –º–∏—Ä, —Ä–∞–¥–æ—Å—Ç—å –∏ —Å–≤–µ—Ç!",
    "üá∑üá∫ 12 –ò—é–Ω—è": "–° –î–Ω—ë–º –†–æ—Å—Å–∏–∏! ‚ù§Ô∏è –ñ–µ–ª–∞–µ–º –≥–æ—Ä–¥–æ—Å—Ç–∏ –∑–∞ –Ω–∞—à—É —Å—Ç—Ä–∞–Ω—É, –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—è –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –±—É–¥—É—â–µ–º!",
    "ü§ù 4 –ù–æ—è–±—Ä—è": "–° –î–Ω—ë–º –Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –µ–¥–∏–Ω—Å—Ç–≤–∞! ü§ù –ü—É—Å—Ç—å –≤ –≤–∞—à–µ–π –∂–∏–∑–Ω–∏ –±—É–¥–µ—Ç —Å–æ–≥–ª–∞—Å–∏–µ, –¥–æ–±—Ä–æ—Ç–∞ –∏ –≤–∑–∞–∏–º–æ–ø–æ–Ω–∏–º–∞–Ω–∏–µ!"
}

# ========== –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ==========
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ========== –ì–õ–û–ë–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –ë–û–¢–ê ==========
BOT_STATE = {
    'running': False,
    'start_time': None,
    'last_activity': None
}

# ========== –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ü–ï–†–ï–ú–ï–ù–ù–ê–Ø –î–õ–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ==========
application_lock = asyncio.Lock()
application: Optional[Application] = None

# ========== –ë–ê–ó–ê –î–ê–ù–ù–´–• ==========
def cleanup_old_applications(days: int = 30) -> None:
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞—è–≤–∫–∏ —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π."""
    try:
        with get_db_connection() as conn:
            conn.execute("""
                DELETE FROM applications 
                WHERE created_at < datetime('now', ?) 
                AND status IN ('published', 'rejected')
            """, (f"-{days} days",))
            conn.commit()
            logger.info(f"–û—á–∏—Å—Ç–∫–∞ –ë–î: —É–¥–∞–ª–µ–Ω—ã –∑–∞—è–≤–∫–∏ —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π")
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ë–î: {e}", exc_info=True)

def get_db_connection() -> sqlite3.Connection:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏."""
    conn = sqlite3.connect(DB_FILE, check_same_thread=False)
    conn.row_factory = sqlite3.Row
    conn.execute("PRAGMA journal_mode=WAL")
    conn.execute("PRAGMA foreign_keys=ON")
    return conn

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        with get_db_connection() as conn:
            conn.execute("""
                CREATE TABLE IF NOT EXISTS applications (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    username TEXT,
                    type TEXT NOT NULL,
                    subtype TEXT,
                    from_name TEXT,
                    to_name TEXT,
                    text TEXT NOT NULL,
                    photo_id TEXT,
                    phone_number TEXT,
                    status TEXT DEFAULT 'pending',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    publish_date DATE,
                    published_at TIMESTAMP,
                    congrat_type TEXT
                )
            """)
            try:
                conn.execute("ALTER TABLE applications ADD COLUMN phone_number TEXT")
                conn.commit()
            except sqlite3.OperationalError:
                pass
            conn.execute("""
                CREATE INDEX IF NOT EXISTS idx_approved_unpublished
                ON applications(status, published_at)
                WHERE status = 'approved' AND published_at IS NULL
            """)
            conn.commit()
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}", exc_info=True)
        raise

def add_application(data: Dict[str, Any]) -> Optional[int]:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    try:
        with get_db_connection() as conn:
            cur = conn.cursor()
            cur.execute("""
                INSERT INTO applications
                (user_id, username, type, subtype, from_name, to_name, text, photo_id, phone_number, publish_date, congrat_type)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (
                    data['user_id'],
                    data.get('username'),
                    data['type'],
                    data.get('subtype'),
                    data.get('from_name'),
                    data.get('to_name'),
                    data['text'],
                    data.get('photo_id'),
                    data.get('phone_number'),
                    data.get('publish_date'),
                    data.get('congrat_type')
                ))
            app_id = cur.lastrowid
            conn.commit()
            return app_id
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}\n–î–∞–Ω–Ω—ã–µ: {data}", exc_info=True)
        return None

def get_application_details(app_id: int) -> Optional[sqlite3.Row]:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ –ø–æ ID."""
    try:
        with get_db_connection() as conn:
            cur = conn.cursor()
            cur.execute("SELECT * FROM applications WHERE id = ?", (app_id,))
            return cur.fetchone()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ #{app_id}: {e}", exc_info=True)
        return None

def get_approved_unpublished_applications() -> list:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ, –Ω–æ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏."""
    try:
        with get_db_connection() as conn:
            cur = conn.cursor()
            cur.execute("""
            SELECT * FROM applications
            WHERE status = 'approved' AND published_at IS NULL
            """)
            return cur.fetchall()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {e}", exc_info=True)
        return []

def update_application_status(app_id: int, status: str) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏."""
    try:
        with get_db_connection() as conn:
            conn.execute("UPDATE applications SET status = ? WHERE id = ?", (status, app_id))
            conn.commit()
            return True
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ #{app_id}: {e}", exc_info=True)
        return False

def mark_application_as_published(app_id: int) -> bool:
    """–ü–æ–º–µ—á–∞–µ—Ç –∑–∞—è–≤–∫—É –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—É—é."""
    try:
        with get_db_connection() as conn:
            conn.execute("""
            UPDATE applications
            SET published_at = CURRENT_TIMESTAMP, status = 'published'
            WHERE id = ?
            """, (app_id,))
            conn.commit()
            return True
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞—è–≤–∫–∏ #{app_id}: {e}", exc_info=True)
        return False

def can_submit_request(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É (–ª–∏–º–∏—Ç)."""
    try:
        with get_db_connection() as conn:
            count = conn.execute("""
                SELECT COUNT(*) FROM applications 
                WHERE user_id = ? AND created_at > datetime('now', '-1 hour')
            """, (user_id,)).fetchone()[0]
            return count < 5
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞ –∑–∞—è–≤–æ–∫: {e}")
        return True

def is_working_hours() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–±–æ—á–µ–µ –ª–∏ –≤—Ä–µ–º—è."""
    current_time = datetime.now(TIMEZONE)
    current_hour = current_time.hour
    current_weekday = current_time.weekday()
    if not WORK_ON_WEEKENDS and current_weekday >= 5:
        return False
    return WORKING_HOURS[0] <= current_hour <= WORKING_HOURS[1]

def get_uptime() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
    if not BOT_STATE.get('start_time'):
        return "N/A"
    uptime = datetime.now(TIMEZONE) - BOT_STATE['start_time']
    days, remainder = divmod(uptime.total_seconds(), 86400)
    hours, remainder = divmod(remainder, 3600)
    minutes, _ = divmod(remainder, 60)
    return f"{int(days)}–¥ {int(hours)}—á {int(minutes)}–º"

def validate_name(name: str) -> bool:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏–º—è."""
    if not name or len(name) < 2 or len(name) > MAX_NAME_LENGTH:
        return False
    return bool(re.match(r'^[a-zA-Z–∞-—è–ê-–Ø—ë–Å\s\-]+$', name))

def validate_phone(phone: str) -> bool:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    clean_phone = re.sub(r'[^\d+]', '', phone)
    return bool(re.match(r'^(\+7|8)\d{10}$', clean_phone))

async def load_bad_words() -> List[str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤."""
    try:
        async with aiofiles.open(BAD_WORDS_FILE, 'r', encoding='utf-8') as f:
            content = await f.read()
            return [word.strip() for line in content.splitlines() for word in line.split(',') if word.strip()]
    except FileNotFoundError:
        logger.warning("–§–∞–π–ª —Å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        return DEFAULT_BAD_WORDS
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤: {e}", exc_info=True)
        return DEFAULT_BAD_WORDS

async def censor_text(text: str) -> Tuple[str, bool]:
    """–¶–µ–Ω–∑—É—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    bad_words = await load_bad_words()
    censored = text
    has_bad = False
    for word in bad_words:
        try:
            if re.search(re.escape(word), censored, re.IGNORECASE):
                has_bad = True
                censored = re.sub(re.escape(word), '***', censored, flags=re.IGNORECASE)
        except re.error as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ü–µ–Ω–∑—É—Ä—ã —Å–ª–æ–≤–∞ '{word}': {e}")
    return censored, has_bad

async def safe_send_message(bot: Bot, chat_id: int, text: str, **kwargs) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    try:
        await bot.send_message(chat_id=chat_id, text=text, **kwargs)
        return True
    except TelegramError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {chat_id}: {e}")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {chat_id}: {e}", exc_info=True)
    return False

async def safe_edit_message_text(query, text: str, **kwargs):
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    if not query or not query.message:
        return
    try:
        await query.edit_message_text(text=text, **kwargs)
    except TelegramError as e:
        if "message is not modified" not in str(e).lower():
            logger.warning(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}", exc_info=True)

async def safe_reply_text(update: Update, text: str, **kwargs):
    """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    if update.callback_query:
        await safe_edit_message_text(update.callback_query, text, **kwargs)
    elif update.message:
        try:
            await update.message.reply_text(text=text, **kwargs)
        except TelegramError as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: {e}", exc_info=True)

async def notify_admin_new_application(bot: Bot, app_id: int, app_details: dict):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ."""
    if not ADMIN_CHAT_ID:
        return

    app_type = REQUEST_TYPES.get(app_details['type'], {}).get('name', '–ó–∞—è–≤–∫–∞')
    subtype = ANNOUNCE_SUBTYPES.get(app_details['subtype'], '') if app_details.get('subtype') else ''
    full_type = f"{app_type}" + (f" ({subtype})" if subtype else '')
    
    if app_details['type'] == 'news':
        has_photo = "‚úÖ" if app_details.get('photo_id') else "‚ùå"
        phone = f"\n‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {app_details['phone_number']}" if app_details.get('phone_number') else ""
        caption = (
            f"üì® –ù–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å #{app_id} (–±–µ–∑ –º–æ–¥–µ—Ä–∞—Ü–∏–∏)\n"
            f"‚Ä¢ –¢–∏–ø: {full_type}\n‚Ä¢ –§–æ—Ç–æ: {has_photo}{phone}\n"
            f"‚Ä¢ –û—Ç: @{app_details.get('username') or 'N/A'} (ID: {app_details['user_id']})\n"
            f"‚Ä¢ –¢–µ–∫—Å—Ç: {app_details['text']}\n"
        )
        try:
            if app_details.get('photo_id'):
                await bot.send_photo(
                    chat_id=ADMIN_CHAT_ID,
                    photo=app_details['photo_id'],
                    caption=caption
                )
            else:
                await bot.send_message(
                    chat_id=ADMIN_CHAT_ID,
                    text=caption
                )
            logger.info(f"–ù–æ–≤–æ—Å—Ç—å #{app_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É –±–µ–∑ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.")
        except TelegramError as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏ #{app_id} –∞–¥–º–∏–Ω—É: {e}")
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ—Å—Ç–∏ #{app_id} –∞–¥–º–∏–Ω—É: {e}", exc_info=True)
        return

    has_photo = "‚úÖ" if app_details.get('photo_id') else "‚ùå"
    phone = f"\n‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {app_details['phone_number']}" if app_details.get('phone_number') else ""

    caption = (
        f"üì® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{app_id}\n"
        f"‚Ä¢ –¢–∏–ø: {full_type}\n‚Ä¢ –§–æ—Ç–æ: {has_photo}{phone}\n"
        f"‚Ä¢ –û—Ç: @{app_details.get('username') or 'N/A'} (ID: {app_details['user_id']})\n"
        f"‚Ä¢ –¢–µ–∫—Å—Ç: {app_details['text'][:200]}...\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    keyboard = [
        [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{app_id}"),
         InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{app_id}")],
        [InlineKeyboardButton("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data=f"view_{app_id}")]
    ]

    try:
        if app_details.get('photo_id'):
            await bot.send_photo(
                chat_id=ADMIN_CHAT_ID,
                photo=app_details['photo_id'],
                caption=caption,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=caption,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    except TelegramError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ #{app_id} –∞–¥–º–∏–Ω—É: {e}")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞ –æ –∑–∞—è–≤–∫–µ #{app_id}: {e}", exc_info=True)

async def notify_user_about_decision(bot: Bot, app_details: dict, approved: bool):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–µ—à–µ–Ω–∏–∏ –ø–æ –∑–∞—è–≤–∫–µ."""
    user_id = app_details['user_id']
    app_type = REQUEST_TYPES.get(app_details['type'], {}).get('name', '–∑–∞—è–≤–∫–∞')
    status = "–æ–¥–æ–±—Ä–µ–Ω–∞" if approved else "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º"
    icon = "üéâ" if approved else "üòï"
    text = f"{icon} –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ ¬´{app_type}¬ª –±—ã–ª–∞ {status}."
    await safe_send_message(bot, user_id, text)

async def publish_to_channel(app_id: int, bot: Bot) -> bool:
    """–ü—É–±–ª–∏–∫—É–µ—Ç –∑–∞—è–≤–∫—É –≤ –∫–∞–Ω–∞–ª."""
    if not CHANNEL_ID:
        logger.error("CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
        return False
    app_details = get_application_details(app_id)
    if not app_details:
        logger.error(f"–ó–∞—è–≤–∫–∞ #{app_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return False
    current_time = datetime.now(TIMEZONE).strftime("%H:%M")
    text = app_details['text']
    photo_id = app_details['photo_id']
    phone = app_details['phone_number']
    if phone:
        text += f"\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
    message_text = (
        f"{text}\n"
        f"#–ù–µ–±–æ–ª—å—à–æ–π–ú–∏—Ä–ù–∏–∫–æ–ª–∞–µ–≤—Å–∫\n"
        f"üïí {current_time}"
    )
    try:
        if photo_id:
            await bot.send_photo(
                chat_id=CHANNEL_ID,
                photo=photo_id,
                caption=message_text,
                disable_notification=True,
                disable_web_page_preview=True
            )
        else:
            await bot.send_message(
                chat_id=CHANNEL_ID,
                text=message_text,
                disable_web_page_preview=True,
                disable_notification=True
            )
        mark_application_as_published(app_id)
        logger.info(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ #{app_id}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}")
        return False

async def check_pending_applications(context: CallbackContext) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏."""
    try:
        applications = get_approved_unpublished_applications()
        for app in applications:
            try:
                publish_now = True
                if app['type'] == 'congrat' and app.get('publish_date'):
                    publish_date_obj = datetime.strptime(app['publish_date'], "%Y-%m-%d").date()
                    today = datetime.now().date()
                    if publish_date_obj > today:
                        publish_now = False
                if publish_now:
                    await publish_to_channel(app['id'], context.bot)
                    await asyncio.sleep(1)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ #{app['id']}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—è–≤–æ–∫: {e}")

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–ò–ê–õ–û–ì–ê ==========
async def start_command(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    context.user_data.clear()
    keyboard = [
        [InlineKeyboardButton(f"{info['icon']} {info['name']}", callback_data=key)]
        for key, info in REQUEST_TYPES.items()
    ]
    await safe_reply_text(update, "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª:", reply_markup=InlineKeyboardMarkup(keyboard))
    return TYPE_SELECTION

async def handle_ride_type_selection(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–µ–∑–¥–∫–∏."""
    query = update.callback_query
    await query.answer()
    ride_type = query.data
    context.user_data["ride_type"] = "–ò—â—É –ø–æ–ø—É—Ç—á–∏–∫–æ–≤" if ride_type == "ride_need" else "–ü—Ä–µ–¥–ª–∞–≥–∞—é –ø–æ–µ–∑–¥–∫—É"
    
    await safe_edit_message_text(
        query,
        "–û—Ç–∫—É–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ–µ–∑–¥–∫—É? (–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, —Ü–µ–Ω—Ç—Ä):",
        reply_markup=InlineKeyboardMarkup(BACK_BUTTON))
    return RIDE_FROM_INPUT

async def handle_type_selection(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞—è–≤–∫–∏."""
    query = update.callback_query
    await query.answer()
    request_type = query.data
    context.user_data["type"] = request_type
    if request_type == "news":
        await safe_edit_message_text(
            query,
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω (—Ñ–æ—Ä–º–∞—Ç: +7... –∏–ª–∏ 8...):",
            reply_markup=InlineKeyboardMarkup(BACK_BUTTON)
        )
        return NEWS_PHONE_INPUT
    elif request_type == "congrat":
        await safe_edit_message_text(
            query,
            f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: *{EXAMPLE_TEXTS['sender_name']}*):",
            reply_markup=InlineKeyboardMarkup(BACK_BUTTON),
            parse_mode="Markdown"
        )
        return SENDER_NAME_INPUT
    elif request_type == "announcement":
        keyboard = [
            [InlineKeyboardButton(subtype, callback_data=f"subtype_{key}")]
            for key, subtype in ANNOUNCE_SUBTYPES.items()
        ] + BACK_BUTTON
        await safe_edit_message_text(
            query,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ANNOUNCE_SUBTYPE_SELECTION
    return ConversationHandler.END

async def get_ride_from(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–µ–∑–¥–∫–∏."""
    context.user_data["ride_from"] = update.message.text.strip()
    await safe_reply_text(
        update,
        "–ö—É–¥–∞ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å? (–ù–∞–ø—Ä–∏–º–µ—Ä: –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –∞—ç—Ä–æ–ø–æ—Ä—Ç):")
    return RIDE_TO_INPUT

async def get_ride_to(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–µ–∑–¥–∫–∏."""
    context.user_data["ride_to"] = update.message.text.strip()
    await safe_reply_text(
        update,
        "–ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –≤—ã–µ–∑–¥? (–ù–∞–ø—Ä–∏–º–µ—Ä: 15.08 –≤ 8:00):")
    return RIDE_DATE_INPUT

async def get_ride_date(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É –ø–æ–µ–∑–¥–∫–∏."""
    context.user_data["ride_date"] = update.message.text.strip()
    await safe_reply_text(
        update,
        "–°–∫–æ–ª—å–∫–æ –º–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ? (–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ):")
    return RIDE_SEATS_INPUT

async def get_ride_seats(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –≤ –ø–æ–µ–∑–¥–∫–µ."""
    seats = update.message.text.strip()
    if not seats.isdigit():
        await safe_reply_text(update, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ:")
        return RIDE_SEATS_INPUT
    context.user_data["ride_seats"] = seats
    await safe_reply_text(
        update,
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω (—Ñ–æ—Ä–º–∞—Ç: +7... –∏–ª–∏ 8...):")
    return RIDE_PHONE_INPUT

async def get_sender_name(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è."""
    sender_name = update.message.text.strip()
    if not validate_name(sender_name):
        await safe_reply_text(
            update,
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–æ—Ç 2 –¥–æ {MAX_NAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤)."
        )
        return SENDER_NAME_INPUT
    context.user_data["from_name"] = sender_name
    await safe_reply_text(
        update,
        f"–ö–æ–≥–æ –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ—Ç–µ? –ù–∞–ø—Ä–∏–º–µ—Ä: *{EXAMPLE_TEXTS['recipient_name']}*",
        parse_mode="Markdown"
    )
    return RECIPIENT_NAME_INPUT

async def get_recipient_name(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è."""
    recipient_name = update.message.text.strip()
    if not validate_name(recipient_name):
        await safe_reply_text(
            update,
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–æ—Ç 2 –¥–æ {MAX_NAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤)."
        )
        return RECIPIENT_NAME_INPUT
    context.user_data["to_name"] = recipient_name
    keyboard = [
        [InlineKeyboardButton(holiday, callback_data=f"holiday_{holiday}")]
        for holiday in HOLIDAYS
    ] + [
        [InlineKeyboardButton("üéâ –î—Ä—É–≥–æ–π –ø—Ä–∞–∑–¥–Ω–∏–∫", callback_data="custom_congrat")],
        [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]
    ]
    await safe_reply_text(
        update,
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–∑–¥–Ω–∏–∫ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CONGRAT_HOLIDAY_CHOICE

async def handle_congrat_holiday_choice(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞."""
    query = update.callback_query
    await query.answer()
    if query.data == "custom_congrat":
        context.user_data["congrat_type"] = "custom"
        await safe_edit_message_text(
            query,
            f"–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ (–¥–æ {MAX_CONGRAT_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):",
            reply_markup=InlineKeyboardMarkup(BACK_BUTTON)
        )
        return CUSTOM_CONGRAT_MESSAGE_INPUT

    holiday = query.data.replace("holiday_", "")
    if holiday not in HOLIDAYS:
         await safe_edit_message_text(query, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–∞–∑–¥–Ω–∏–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
         return ConversationHandler.END
    template = HOLIDAY_TEMPLATES.get(holiday, "–° –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º!")
    from_name = context.user_data.get("from_name", "")
    to_name = context.user_data.get("to_name", "")
    context.user_data["text"] = f"{from_name} –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ—Ç {to_name} —Å {holiday}!\n{template}"
    context.user_data["congrat_type"] = "standard"
    
    keyboard = [
        [InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="publish_today")],
        [InlineKeyboardButton("üìÜ –£–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É", callback_data="publish_custom_date")],
        [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]
    ]
    await safe_edit_message_text(
        query,
        "–ö–æ–≥–¥–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CONGRAT_DATE_CHOICE

async def handle_congrat_date_choice(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    if query.data == "publish_today":
        context.user_data["publish_date"] = datetime.now().strftime("%Y-%m-%d")
        return await complete_request(update, context)
    elif query.data == "publish_custom_date":
        await safe_edit_message_text(
            query,
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì:",
            reply_markup=InlineKeyboardMarkup(BACK_BUTTON)
        )
        return CONGRAT_DATE_INPUT
    return ConversationHandler.END

async def get_custom_congrat_message(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è."""
    text = update.message.text.strip()
    if len(text) > MAX_CONGRAT_TEXT_LENGTH:
        await safe_reply_text(
            update,
            f"–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º {MAX_CONGRAT_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤)."
        )
        return CUSTOM_CONGRAT_MESSAGE_INPUT
    from_name = context.user_data.get("from_name", "")
    to_name = context.user_data.get("to_name", "")
    context.user_data["text"] = f"{from_name} –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ—Ç {to_name}!\n{text}"
    context.user_data["congrat_type"] = "custom"
    
    keyboard = [
        [InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="publish_today")],
        [InlineKeyboardButton("üìÜ –£–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É", callback_data="publish_custom_date")],
        [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]
    ]
    await safe_reply_text(
        update,
        "–ö–æ–≥–¥–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CONGRAT_DATE_CHOICE
async def get_ride_phone_and_finish(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –ø–æ–µ–∑–¥–∫–∏ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å."""
    phone = update.message.text.strip()
    if not validate_phone(phone):
        await safe_reply_text(update, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ +7... –∏–ª–∏ 8...")
        return RIDE_PHONE_INPUT
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    ride_data = context.user_data
    text = (
        f"{ride_data['ride_type']}\n"
        f"üìç –û—Ç–∫—É–¥–∞: {ride_data['ride_from']}\n"
        f"üìç –ö—É–¥–∞: {ride_data['ride_to']}\n"
        f"‚è∞ –í—Ä–µ–º—è: {ride_data['ride_date']}\n"
        f"ü™ë –ú–µ—Å—Ç: {ride_data['ride_seats']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
    )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º
    if not can_submit_request(update.effective_user.id):
        await safe_reply_text(update, "‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
    censored_text, has_bad = await censor_text(text)
    if has_bad:
        context.user_data["censored_text"] = censored_text
        keyboard = [
            [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="accept_censor")],
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_censor")]
        ]
        await safe_reply_text(
            update,
            f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞:\n{censored_text}\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:",
            reply_markup=InlineKeyboardMarkup(keyboard))
        return WAIT_CENSOR_APPROVAL
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
    app_data = {
        'user_id': update.effective_user.id,
        'username': update.effective_user.username,
        'type': 'announcement',
        'subtype': 'ride',
        'text': text,
        'phone_number': phone,
        'status': 'approved'  # –ü—É–±–ª–∏–∫—É–µ–º –±–µ–∑ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    }
    
    app_id = add_application(app_data)
    if app_id:
        if await publish_to_channel(app_id, context.bot):
            await safe_reply_text(
                update,
                "‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ!",
                reply_markup=InlineKeyboardMarkup(BACK_BUTTON))
        else:
            await safe_reply_text(
                update,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.",
                reply_markup=InlineKeyboardMarkup(BACK_BUTTON))
    else:
        await safe_reply_text(
            update,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏.",
            reply_markup=InlineKeyboardMarkup(BACK_BUTTON))
    
    context.user_data.clear()
    return ConversationHandler.END
async def handle_announce_subtype_selection(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ç–∏–ø–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    subtype_key = query.data.replace("subtype_", "")
    context.user_data["subtype"] = subtype_key
    
    if subtype_key == "ride":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ –ø–æ–µ–∑–¥–∫–∞—Ö
        keyboard = [
            [InlineKeyboardButton("üöó –ò—â—É –ø–æ–ø—É—Ç—á–∏–∫–æ–≤", callback_data="ride_need")],
            [InlineKeyboardButton("üöô –ü—Ä–µ–¥–ª–∞–≥–∞—é –ø–æ–µ–∑–¥–∫—É", callback_data="ride_offer")],
            *BACK_BUTTON
        ]
        await safe_edit_message_text(
            query,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–µ–∑–¥–∫–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return RIDE_TYPE_SELECTION
    elif subtype_key == "demand_offer":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø—Ä–æ—Å–∞/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        await safe_edit_message_text(
            query,
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω (—Ñ–æ—Ä–º–∞—Ç: +7... –∏–ª–∏ 8...):",
            reply_markup=InlineKeyboardMarkup(BACK_BUTTON)
        )
        return PHONE_INPUT
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–ø–æ—Ç–µ—Ä—è–ª–∏/–Ω–∞—à–ª–∏)
        example = EXAMPLE_TEXTS["announcement"].get(subtype_key, "")
        await safe_edit_message_text(
            query,
            f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–¥–æ {MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤). –ü—Ä–∏–º–µ—Ä:\n\n{example}",
            reply_markup=InlineKeyboardMarkup(BACK_BUTTON)
        )
        return ANNOUNCE_TEXT_INPUT

async def handle_censor_choice(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —Ü–µ–Ω–∑—É—Ä–µ."""
    query = update.callback_query
    await query.answer()
    
    if query.data == "accept_censor":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ—Ç–ø—Ä–∞–≤–∫—É —Å —Ü–µ–Ω–∑—É—Ä–æ–π
        context.user_data["text"] = context.user_data["censored_text"]
        return await complete_request(update, context)
    elif query.data == "edit_censor":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç
        await safe_edit_message_text(
            query,
            "–í–≤–µ–¥–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:",
            reply_markup=InlineKeyboardMarkup(BACK_BUTTON)
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
        if context.user_data.get("type") == "congrat":
            return CUSTOM_CONGRAT_MESSAGE_INPUT
        elif context.user_data.get("type") == "announcement":
            if context.user_data.get("subtype") == "ride":
                return RIDE_PHONE_INPUT  # –î–ª—è –ø–æ–µ–∑–¥–æ–∫ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤–≤–æ–¥—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            return ANNOUNCE_TEXT_INPUT
        elif context.user_data.get("type") == "news":
            return NEWS_TEXT_INPUT
    
    return ConversationHandler.END

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ ConversationHandler
def setup_conv_handler() -> ConversationHandler:
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞."""
    return ConversationHandler(
        entry_points=[CommandHandler('start', start_command)],
        states={
            TYPE_SELECTION: [
                CallbackQueryHandler(handle_type_selection, pattern="^(congrat|announcement|news)$")
            ],
            RIDE_TYPE_SELECTION: [
                CallbackQueryHandler(handle_ride_type_selection, pattern="^(ride_need|ride_offer)$")
            ],
            RIDE_FROM_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_ride_from)
            ],
            RIDE_TO_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_ride_to)
            ],
            RIDE_DATE_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_ride_date)
            ],
            RIDE_SEATS_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_ride_seats)
            ],
            RIDE_PHONE_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_ride_phone_and_finish)
            ],
            WAIT_CENSOR_APPROVAL: [
                CallbackQueryHandler(handle_censor_choice, pattern="^(accept_censor|edit_censor)$")
            ],
            # ... –¥—Ä—É–≥–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è ...
        },
        fallbacks=[
            CommandHandler('cancel', cancel_command),
            CallbackQueryHandler(back_to_start, pattern="^back_to_start$")
        ],
        allow_reentry=True
    )

async def setup_telegram_application():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."""
    global application
    async with application_lock:
        if application is not None:
            return

        application = Application.builder().token(TOKEN).build()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        init_db()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞
        application.add_handler(setup_conv_handler())
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CallbackQueryHandler(admin_approve_application, pattern="^approve_\\d+$"))
        application.add_handler(CallbackQueryHandler(admin_reject_application, pattern="^reject_\\d+$"))
        application.add_handler(CallbackQueryHandler(admin_view_application, pattern="^view_\\d+$"))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("pending", pending_command))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        if WEBHOOK_URL:
            await application.bot.set_webhook(f"{WEBHOOK_URL}/telegram-webhook/{WEBHOOK_SECRET}")
        
        scheduler = AsyncIOScheduler(timezone=TIMEZONE)
        scheduler.add_job(check_pending_applications, 'interval', minutes=1, args=[application])
        scheduler.add_job(cleanup_old_applications, 'cron', hour=3, minute=0)
        scheduler.start()
        
        BOT_STATE['start_time'] = datetime.now(TIMEZONE)
        BOT_STATE['running'] = True
async def cancel_command(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞."""
    await safe_reply_text(
        update,
        "–¢–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.",
        reply_markup=InlineKeyboardMarkup(BACK_BUTTON)
    )
    context.user_data.clear()
    return ConversationHandler.END

async def back_to_start(update: Update, context: CallbackContext) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    query = update.callback_query
    if query:
        await query.answer()
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    keyboard = [
        [InlineKeyboardButton(f"{info['icon']} {info['name']}", callback_data=key)]
        for key, info in REQUEST_TYPES.items()
    ]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
    await safe_reply_text(
        update,
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return TYPE_SELECTION

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('bot.log'),
                logging.StreamHandler()
            ]
        )
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if not TOKEN:
            logger.error("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
            sys.exit(1)

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application = Application.builder().token(TOKEN).build()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        init_db()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', start_command)],
            states={
                TYPE_SELECTION: [CallbackQueryHandler(handle_type_selection)],
                RIDE_TYPE_SELECTION: [CallbackQueryHandler(handle_ride_type_selection)],
                RIDE_FROM_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_ride_from)],
                RIDE_TO_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_ride_to)],
                RIDE_DATE_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_ride_date)],
                RIDE_SEATS_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_ride_seats)],
                RIDE_PHONE_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_ride_phone_and_finish)],
                # –î—Ä—É–≥–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è...
            },
            fallbacks=[
                CommandHandler('cancel', cancel_command),
                CallbackQueryHandler(back_to_start, pattern="^back_to_start$")
            ],
            allow_reentry=True
        )

        application.add_handler(conv_handler)
        application.add_handler(CommandHandler('help', help_command))
        application.add_handler(CommandHandler('pending', pending_command))

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        if WEBHOOK_URL and WEBHOOK_SECRET:
            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –≤–µ–±—Ö—É–∫–∞")
            application.run_webhook(
                listen="0.0.0.0",
                port=PORT,
                webhook_url=f"{WEBHOOK_URL}/telegram-webhook/{WEBHOOK_SECRET}"
            )
        else:
            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –ø–æ–ª–ª–∏–Ω–≥–∞")
            application.run_polling()

    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        sys.exit(1)

if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã (FastAPI –∏–ª–∏ –ø–æ–ª–ª–∏–Ω–≥)
    if os.getenv('WEBHOOK_MODE', '0') == '1':
        uvicorn.run(app, host="0.0.0.0", port=PORT)
    else:
        main()



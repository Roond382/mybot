import os
import re
import sqlite3
import logging
import asyncio
from datetime import datetime, timedelta
import pytz
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse
import uvicorn
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore
from apscheduler.executors.asyncio import AsyncIOExecutor
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.ext import (
    Application, CallbackContext, CallbackQueryHandler,
    CommandHandler, MessageHandler, filters, ConversationHandler
)
from dotenv import load_dotenv
from typing import Optional, List
import aiofiles

# ========== –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ==========
load_dotenv()

# ========== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ==========
PORT = int(os.environ.get('PORT', 10000))
WEBHOOK_URL = os.getenv('WEBHOOK_URL', '')
TOKEN = os.getenv('TELEGRAM_TOKEN')
WEBHOOK_SECRET = os.getenv('WEBHOOK_SECRET')
CHANNEL_ID = int(os.getenv('CHANNEL_ID')) if os.getenv('CHANNEL_ID') else None
ADMIN_CHAT_ID = int(os.getenv('ADMIN_CHAT_ID')) if os.getenv('ADMIN_CHAT_ID') else None
TIMEZONE = pytz.timezone('Europe/Moscow')
MAX_TEXT_LENGTH = 4000
MAX_CONGRAT_TEXT_LENGTH = 500
MAX_ANNOUNCE_NEWS_TEXT_LENGTH = 300
BAD_WORDS_FILE = 'bad_words.txt'
DEFAULT_BAD_WORDS = ["—Ö—É–π", "–ø–∏–∑–¥–∞", "–±–ª—è—Ç—å", "–±–ª—è–¥—å", "–µ–±–∞—Ç—å", "—Å—É–∫–∞"]
MAX_NAME_LENGTH = 50

# ========== –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ==========
missing_vars = []
if not TOKEN:
    missing_vars.append("TELEGRAM_TOKEN")
if not CHANNEL_ID:
    missing_vars.append("CHANNEL_ID")
if not ADMIN_CHAT_ID:
    missing_vars.append("ADMIN_CHAT_ID")

if missing_vars:
    raise ValueError(f"–ö–ª—é—á–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {', '.join(missing_vars)}")

# ========== –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ==========
BACK_BUTTON = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]]
DB_FILE = 'db.sqlite'

# ========== –ü–†–ò–ú–ï–†–´ –¢–ï–ö–°–¢–û–í ==========
EXAMPLE_TEXTS = {
    "sender_name": "–ò–≤–∞–Ω–æ–≤ –í–∏—Ç–∞–ª–∏–π",
    "recipient_name": "–∫–æ–ª–ª–µ–∫—Ç–∏–≤ –¥–µ—Ç—Å–∞–¥–∞ '–°–æ–ª–Ω—ã—à–∫–æ'",
    "congrat": {
        "birthday": "–° –î–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è, –¥–æ—Ä–æ–≥–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏!",
        "wedding": "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∑–æ–ª–æ—Ç–æ–π —Å–≤–∞–¥—å–±–æ–π!"
    },
    "announcement": {
        "ride": "10.02 –µ–¥—É –≤ –í–æ–ª–≥–æ–≥—Ä–∞–¥. 2 –º–µ—Å—Ç–∞. –í—ã–µ–∑–¥ –≤ 8:00",
        "demand_offer": "–ò—â—É —Ä–∞–±–æ—Ç—É –≤–æ–¥–∏—Ç–µ–ª—è. –û–ø—ã—Ç 5 –ª–µ—Ç.",
        "lost": "–ù–∞–π–¥–µ–Ω –∫–ª—é—á —É –º–∞–≥–∞–∑–∏–Ω–∞ '–ü—Ä–æ–¥—É–∫—Ç—ã'. –û–ø–æ–∑–Ω–∞—Ç—å –ø–æ –±—Ä–µ–ª–∫—É."
    },
    "news": "15.01 –≤ –Ω–∞—à–µ–º –≥–æ—Ä–æ–¥–µ –æ—Ç–∫—Ä—ã–ª–∏ –Ω–æ–≤—É—é –¥–µ—Ç—Å–∫—É—é –ø–ª–æ—â–∞–¥–∫—É!"
}

# ========== –ü–†–ê–ó–î–ù–ò–ö–ò ==========
HOLIDAYS = {
    "üéÑ –ù–æ–≤—ã–π –≥–æ–¥": "01-01",
    "ü™ñ 23 –§–µ–≤—Ä–∞–ª—è": "02-23",
    "üíê 8 –ú–∞—Ä—Ç–∞": "03-08",
    "üèÖ 9 –ú–∞—è": "05-09",
    "üá∑üá∫ 12 –ò—é–Ω—è": "06-12",
    "ü§ù 4 –ù–æ—è–±—Ä—è": "11-04"
}

# ========== –®–ê–ë–õ–û–ù–´ –ü–û–ó–î–†–ê–í–õ–ï–ù–ò–ô ==========
HOLIDAY_TEMPLATES = {
    "üéÑ –ù–æ–≤—ã–π –≥–æ–¥": "–° –ù–æ–≤—ã–º –≥–æ–¥–æ–º! ‚ú® –ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–æ–≤–æ–≥–æ –≥–æ–¥–∞ –±—É–¥–µ—Ç –Ω–∞–ø–æ–ª–Ω–µ–Ω —Ä–∞–¥–æ—Å—Ç—å—é, —Ç–µ–ø–ª–æ–º –∏ –≤–µ—Ä–æ–π –≤ –ª—É—á—à–µ–µ!",
    "ü™ñ 23 –§–µ–≤—Ä–∞–ª—è": "–° –î–Ω—ë–º –∑–∞—â–∏—Ç–Ω–∏–∫–∞ –û—Ç–µ—á–µ—Å—Ç–≤–∞! üí™ –ö—Ä–µ–ø–∫–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è, —Å–∏–ª—ã –¥—É—Ö–∞ –∏ –º–∏—Ä–Ω–æ–≥–æ –Ω–µ–±–∞ –Ω–∞–¥ –≥–æ–ª–æ–≤–æ–π!",
    "üíê 8 –ú–∞—Ä—Ç–∞": "–° 8 –ú–∞—Ä—Ç–∞! üå∏ –ü—É—Å—Ç—å –≤ –≤–∞—à–µ–π –∂–∏–∑–Ω–∏ –±—É–¥–µ—Ç –º–Ω–æ–≥–æ —Ç–µ–ø–ª–∞, –∫—Ä–∞—Å–æ—Ç—ã –∏ —Å—á–∞—Å—Ç–ª–∏–≤—ã—Ö –º–≥–Ω–æ–≤–µ–Ω–∏–π!",
    "üèÖ 9 –ú–∞—è": "–° –î–Ω—ë–º –ü–æ–±–µ–¥—ã! üá∑üá∫ –ú—ã –ø–æ–º–Ω–∏–º –ø–æ–¥–≤–∏–≥ –∏ —Ä–∞–¥—É–µ–º—Å—è –≤–µ–ª–∏–∫–æ–π –ü–æ–±–µ–¥–µ! –ü—É—Å—Ç—å –≤ –≤–∞—à–µ–º –¥–æ–º–µ –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –º–∏—Ä, —Ä–∞–¥–æ—Å—Ç—å –∏ —Å–≤–µ—Ç!",
    "üá∑üá∫ 12 –ò—é–Ω—è": "–° –î–Ω—ë–º –†–æ—Å—Å–∏–∏! ‚ù§Ô∏è –ñ–µ–ª–∞–µ–º –≥–æ—Ä–¥–æ—Å—Ç–∏ –∑–∞ –Ω–∞—à—É —Å—Ç—Ä–∞–Ω—É, –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—è –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –±—É–¥—É—â–µ–º!",
    "ü§ù 4 –ù–æ—è–±—Ä—è": "–° –î–Ω—ë–º –Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –µ–¥–∏–Ω—Å—Ç–≤–∞! ü§ù –ü—É—Å—Ç—å –≤ –≤–∞—à–µ–π –∂–∏–∑–Ω–∏ –±—É–¥–µ—Ç —Å–æ–≥–ª–∞—Å–∏–µ, –¥–æ–±—Ä–æ—Ç–∞ –∏ –≤–∑–∞–∏–º–æ–ø–æ–Ω–∏–º–∞–Ω–∏–µ!"
}

# ========== –¢–ò–ü–´ –ó–ê–ü–†–û–°–û–í ==========
REQUEST_TYPES = {
    "congrat": {"name": "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ", "icon": "üéâ"},
    "announcement": {"name": "üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ", "icon": "üì¢"},
    "news": {"name": "üóûÔ∏è –ù–æ–≤–æ—Å—Ç—å –æ—Ç –∂–∏—Ç–µ–ª—è", "icon": "üóûÔ∏è"}
}

# ========== –ü–û–î–¢–ò–ü–´ –û–ë–™–Ø–í–õ–ï–ù–ò–ô ==========
ANNOUNCE_SUBTYPES = {
    "demand_offer": "ü§ù –°–ø—Ä–æ—Å –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
    "lost": "üîç –ü–æ—Ç–µ—Ä—è–ª–∏/–ù–∞—à–ª–∏"
}

# ========== –°–û–°–¢–û–Ø–ù–ò–Ø –î–ò–ê–õ–û–ì–ê ==========
(TYPE_SELECTION,
 SENDER_NAME_INPUT,
 RECIPIENT_NAME_INPUT,
 CONGRAT_HOLIDAY_CHOICE,
 CUSTOM_CONGRAT_MESSAGE_INPUT,
 CONGRAT_DATE_CHOICE,
 CONGRAT_DATE_INPUT,
 ANNOUNCE_SUBTYPE_SELECTION,
 ANNOUNCE_TEXT_INPUT,
 PHONE_INPUT,
 NEWS_PHONE_INPUT,
 NEWS_TEXT_INPUT,
 WAIT_CENSOR_APPROVAL,
 RIDE_FROM_INPUT,
 RIDE_TO_INPUT,
 RIDE_DATE_INPUT,
 RIDE_SEATS_INPUT,
 RIDE_PHONE_INPUT,
 CARPOOL_SUBTYPE_SELECTION) = range(19)

# ========== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ==========
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[logging.FileHandler('bot.log'), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# ========== –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ==========
BOT_STATE = {'running': False, 'start_time': None, 'last_activity': None}
application_lock = asyncio.Lock()
application: Optional[Application] = None

# ========== –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ==========
def get_db_connection() -> sqlite3.Connection:
    conn = sqlite3.connect(DB_FILE, check_same_thread=False)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    with get_db_connection() as conn:
        conn.execute("""
            CREATE TABLE IF NOT EXISTS applications (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                username TEXT,
                type TEXT NOT NULL,
                subtype TEXT,
                from_name TEXT,
                to_name TEXT,
                text TEXT,
                photo_id TEXT,
                phone_number TEXT,
                status TEXT NOT NULL DEFAULT 'pending',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                published_at TIMESTAMP,
                publish_date DATE,
                congrat_type TEXT
            )
        """)
        try:
            conn.execute("ALTER TABLE applications ADD COLUMN photo_id TEXT")
            conn.commit()
        except sqlite3.OperationalError:
            pass
        conn.execute("""
            CREATE INDEX IF NOT EXISTS idx_approved_unpublished 
            ON applications(status, published_at) 
            WHERE status = 'approved' AND published_at IS NULL
        """)
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

# ========== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ==========
def validate_name(name: str) -> bool:
    return bool(re.match(r'^[a-zA-Z–∞-—è–ê-–Ø—ë–Å\s\-]+$', name)) and 2 <= len(name.strip()) <= MAX_NAME_LENGTH

def validate_phone(phone: str) -> bool:
    clean_phone = re.sub(r'[^\d+]', '', phone)
    return bool(re.match(r'^(\+7|8)\d{10}$', clean_phone))

async def load_bad_words() -> List[str]:
    try:
        async with aiofiles.open(BAD_WORDS_FILE, 'r', encoding='utf-8') as f:
            content = await f.read()
        return [word.strip() for line in content.splitlines() for word in line.split(',') if word.strip()]
    except FileNotFoundError:
        logger.warning("–§–∞–π–ª —Å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        return DEFAULT_BAD_WORDS
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ bad_words.txt: {e}")
        return DEFAULT_BAD_WORDS

async def censor_text(text: str) -> tuple[str, bool]:
    bad_words = await load_bad_words()
    censored = text
    has_bad = False
    for word in bad_words:
        if re.search(re.escape(word), censored, re.IGNORECASE):
            has_bad = True
            censored = re.sub(re.escape(word), '***', censored, flags=re.IGNORECASE)
    return censored, has_bad

def can_submit_request(user_id: int) -> bool:
    with get_db_connection() as conn:
        cur = conn.execute("""
            SELECT COUNT(*) FROM applications 
            WHERE user_id = ? AND created_at > datetime('now', '-1 hour')
        """, (user_id,))
        count = cur.fetchone()[0]
        return count < 5

# ========== –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ==========
def add_application( dict) -> Optional[int]:  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:  dict
    try:
        with get_db_connection() as conn:
            cur = conn.cursor()
            cur.execute("""
                INSERT INTO applications (user_id, username, type, subtype, from_name, to_name, text, photo_id, phone_number, publish_date, congrat_type)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                data['user_id'],
                data.get('username'),
                data['type'],
                data.get('subtype'),
                data.get('from_name'),
                data.get('to_name'),
                data['text'],
                data.get('photo_id'),
                data.get('phone_number'),
                data.get('publish_date'),
                data.get('congrat_type')
            ))
            app_id = cur.lastrowid
            conn.commit()
            return app_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}", exc_info=True)
        return None

def get_application_details(app_id: int) -> Optional[sqlite3.Row]:
    try:
        with get_db_connection() as conn:
            conn.row_factory = sqlite3.Row
            cur = conn.cursor()
            cur.execute("SELECT * FROM applications WHERE id = ?", (app_id,))
            return cur.fetchone()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ #{app_id}: {e}", exc_info=True)
        return None

def get_approved_unpublished_applications() -> List[sqlite3.Row]:
    try:
        with get_db_connection() as conn:
            conn.row_factory = sqlite3.Row
            cur = conn.cursor()
            cur.execute("""
                SELECT * FROM applications 
                WHERE status = 'approved' AND published_at IS NULL
            """)
            return cur.fetchall()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}", exc_info=True)
        return []

def update_application_status(app_id: int, status: str) -> bool:
    try:
        with get_db_connection() as conn:
            conn.execute("UPDATE applications SET status = ? WHERE id = ?", (status, app_id))
            conn.commit()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ #{app_id}: {e}", exc_info=True)
        return False

def mark_application_as_published(app_id: int) -> bool:
    try:
        with get_db_connection() as conn:
            conn.execute("""
                UPDATE applications
                SET published_at = CURRENT_TIMESTAMP, status = 'published'
                WHERE id = ?
            """, (app_id,))
            conn.commit()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ #{app_id}: {e}", exc_info=True)
        return False

# ========== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ==========
async def safe_reply_text(update: Update, text: str, **kwargs):
    try:
        if update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.edit_message_text(text=text, **kwargs)
        elif update.message:
            await update.message.reply_text(text=text, **kwargs)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def safe_edit_message_text(query, text: str, **kwargs):
    try:
        await query.edit_message_text(text=text, **kwargs)
    except Exception as e:
        if "message is not modified" not in str(e).lower():
            logger.warning(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def start_command(update: Update, context: CallbackContext) -> int:
    context.user_data.clear()
    keyboard = [
        [InlineKeyboardButton("üöó –ü–æ–ø—É—Ç–∫–∞", callback_data="carpool")],
    ]
    for key, info in REQUEST_TYPES.items():
        button = InlineKeyboardButton(f"{info['icon']} {info['name']}", callback_data=key)
        keyboard.append([button])
    
    await safe_reply_text(
        update,
        "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return TYPE_SELECTION

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–û–ü–£–¢–ö–ò ==========
async def handle_carpool_start(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data["type"] = "announcement"
    context.user_data["subtype"] = "ride"
    context.user_data["current_state"] = CARPOOL_SUBTYPE_SELECTION

    keyboard = [
        [InlineKeyboardButton("–ò—â—É –ø–æ–ø—É—Ç—á–∏–∫–æ–≤", callback_data="carpool_need")],
        [InlineKeyboardButton("–ü—Ä–µ–¥–ª–∞–≥–∞—é –ø–æ–µ–∑–¥–∫—É", callback_data="carpool_offer")],
        [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]
    ]
    await safe_edit_message_text(
        query,
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–µ–∑–¥–∫–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CARPOOL_SUBTYPE_SELECTION

async def handle_carpool_type(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data["ride_type"] = "–ò—â—É –ø–æ–ø—É—Ç—á–∏–∫–æ–≤" if query.data == "carpool_need" else "–ü—Ä–µ–¥–ª–∞–≥–∞—é –ø–æ–µ–∑–¥–∫—É"
    context.user_data["current_state"] = RIDE_FROM_INPUT
    await safe_edit_message_text(
        query,
        "–û—Ç–∫—É–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ–µ–∑–¥–∫—É? (–ù–∞–ø—Ä–∏–º–µ—Ä: –ù–∏–∫–æ–ª–∞–µ–≤—Å–∫):",
        reply_markup=InlineKeyboardMarkup(BACK_BUTTON)
    )
    return RIDE_FROM_INPUT

async def handle_carpool_from(update: Update, context: CallbackContext) -> int:
    context.user_data["ride_from"] = update.message.text.strip()
    context.user_data["current_state"] = RIDE_TO_INPUT
    await safe_reply_text(
        update,
        "–ö—É–¥–∞ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å? (–ù–∞–ø—Ä–∏–º–µ—Ä: –•–∞–±–∞—Ä–æ–≤—Å–∫):",
        reply_markup=InlineKeyboardMarkup(BACK_BUTTON)
    )
    return RIDE_TO_INPUT

async def handle_carpool_to(update: Update, context: CallbackContext) -> int:
    context.user_data["ride_to"] = update.message.text.strip()
    context.user_data["current_state"] = RIDE_DATE_INPUT
    await safe_reply_text(
        update,
        "–ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –≤—ã–µ–∑–¥? (–ù–∞–ø—Ä–∏–º–µ—Ä: 15.08 –≤ 10:00):",
        reply_markup=InlineKeyboardMarkup(BACK_BUTTON)
    )
    return RIDE_DATE_INPUT

async def handle_carpool_date(update: Update, context: CallbackContext) -> int:
    context.user_data["ride_date"] = update.message.text.strip()
    context.user_data["current_state"] = RIDE_SEATS_INPUT
    await safe_reply_text(
        update,
        "–°–∫–æ–ª—å–∫–æ –º–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ? (–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ):",
        reply_markup=InlineKeyboardMarkup(BACK_BUTTON)
    )
    return RIDE_SEATS_INPUT

async def handle_carpool_seats(update: Update, context: CallbackContext) -> int:
    context.user_data["ride_seats"] = update.message.text.strip()
    context.user_data["current_state"] = RIDE_PHONE_INPUT
    await safe_reply_text(
        update,
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω (—Ñ–æ—Ä–º–∞—Ç: +7... –∏–ª–∏ 8...):",
        reply_markup=InlineKeyboardMarkup(BACK_BUTTON)
    )
    return RIDE_PHONE_INPUT

async def handle_carpool_phone(update: Update, context: CallbackContext) -> int:
    phone = update.message.text.strip()
    if not validate_phone(phone):
        await safe_reply_text(update, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +79610904569).")
        return RIDE_PHONE_INPUT

    context.user_data["phone_number"] = phone
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º photo_id, –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ
    if update.message.photo:
        context.user_data["photo_id"] = update.message.photo[-1].file_id  # –õ—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ

    ride_data = context.user_data
    text = (
        f"üöó <b>{ride_data['ride_type']}</b>\n"
        f"üìç <b>–û—Ç–∫—É–¥–∞:</b> {ride_data['ride_from']}\n"
        f"üìç <b>–ö—É–¥–∞:</b> {ride_data['ride_to']}\n"
        f"‚è∞ <b>–í—Ä–µ–º—è:</b> {ride_data['ride_date']}\n"
        f"ü™ë <b>–ú–µ—Å—Ç:</b> {ride_data['ride_seats']}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
        f"#–ü–æ–ø—É—Ç–∫–∞–ù–∏–∫–æ–ª–∞–µ–≤—Å–∫"
    )

    if not can_submit_request(update.effective_user.id):
        await safe_reply_text(update, "‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

    censored_text, has_bad = await censor_text(text)
    if has_bad:
        context.user_data["censored_text"] = censored_text
        keyboard = [
            [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="accept_censor")],
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_censor")]
        ]
        await safe_reply_text(
            update,
            f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞:\n{censored_text}\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return WAIT_CENSOR_APPROVAL

    try:
        if context.user_data.get("photo_id"):
            await context.bot.send_photo(
                chat_id=CHANNEL_ID,
                photo=context.user_data["photo_id"],
                caption=censored_text,
                parse_mode="HTML"
            )
        else:
            await context.bot.send_message(
                chat_id=CHANNEL_ID,
                text=censored_text,
                parse_mode="HTML"
            )
        await safe_reply_text(update, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ–ø—É—Ç–∫–∏: {e}")
        await safe_reply_text(update, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    context.user_data.clear()
    return ConversationHandler.END

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–û–ó–î–†–ê–í–õ–ï–ù–ò–ô ==========
async def handle_type_selection(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    request_type = query.data
    context.user_data["type"] = request_type

    if request_type == "news":
        context.user_data["current_state"] = NEWS_PHONE_INPUT
        await safe_edit_message_text(
            query,
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω (—Ñ–æ—Ä–º–∞—Ç: +7... –∏–ª–∏ 8...):",
            reply_markup=InlineKeyboardMarkup(BACK_BUTTON)
        )
        return NEWS_PHONE_INPUT
    elif request_type == "congrat":
        context.user_data["current_state"] = SENDER_NAME_INPUT
        await safe_edit_message_text(
            query,
            f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: *{EXAMPLE_TEXTS['sender_name']}*):",
            reply_markup=InlineKeyboardMarkup(BACK_BUTTON),
            parse_mode="Markdown"
        )
        return SENDER_NAME_INPUT
    elif request_type == "announcement":
        context.user_data["current_state"] = ANNOUNCE_SUBTYPE_SELECTION
        keyboard = [
            [InlineKeyboardButton(subtype, callback_data=f"subtype_{key}")]
            for key, subtype in ANNOUNCE_SUBTYPES.items()
        ] + BACK_BUTTON
        await safe_edit_message_text(
            query,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ANNOUNCE_SUBTYPE_SELECTION
    return ConversationHandler.END

async def get_sender_name(update: Update, context: CallbackContext) -> int:
    sender_name = update.message.text.strip()
    if not validate_name(sender_name):
        await safe_reply_text(update, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–æ—Ç 2 –¥–æ {MAX_NAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤).")
        return SENDER_NAME_INPUT
    context.user_data["from_name"] = sender_name
    context.user_data["current_state"] = RECIPIENT_NAME_INPUT
    await safe_reply_text(update, f"–ö–æ–≥–æ –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ—Ç–µ? –ù–∞–ø—Ä–∏–º–µ—Ä: *{EXAMPLE_TEXTS['recipient_name']}*", parse_mode="Markdown")
    return RECIPIENT_NAME_INPUT

async def get_recipient_name(update: Update, context: CallbackContext) -> int:
    recipient_name = update.message.text.strip()
    if not validate_name(recipient_name):
        await safe_reply_text(update, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–æ—Ç 2 –¥–æ {MAX_NAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤).")
        return RECIPIENT_NAME_INPUT
    context.user_data["to_name"] = recipient_name
    context.user_data["current_state"] = CONGRAT_HOLIDAY_CHOICE

    keyboard = [
        [InlineKeyboardButton(holiday, callback_data=f"holiday_{holiday}")]
        for holiday in HOLIDAYS
    ] + [
        [InlineKeyboardButton("üéâ –î—Ä—É–≥–æ–π –ø—Ä–∞–∑–¥–Ω–∏–∫", callback_data="custom_congrat")],
        [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]
    ]
    await safe_reply_text(update, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–∑–¥–Ω–∏–∫ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π:", reply_markup=InlineKeyboardMarkup(keyboard))
    return CONGRAT_HOLIDAY_CHOICE

async def handle_congrat_holiday_choice(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    if query.data == "custom_congrat":
        context.user_data["congrat_type"] = "custom"
        context.user_data["current_state"] = CUSTOM_CONGRAT_MESSAGE_INPUT
        await safe_edit_message_text(query, f"–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ (–¥–æ {MAX_CONGRAT_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):", reply_markup=InlineKeyboardMarkup(BACK_BUTTON))
        return CUSTOM_CONGRAT_MESSAGE_INPUT

    holiday = query.data.replace("holiday_", "")
    if holiday not in HOLIDAYS:
        await safe_edit_message_text(query, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–∞–∑–¥–Ω–∏–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return ConversationHandler.END

    template = HOLIDAY_TEMPLATES.get(holiday, "–° –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º!")
    from_name = context.user_data.get("from_name", "")
    to_name = context.user_data.get("to_name", "")
    context.user_data["text"] = f"{from_name} –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ—Ç {to_name} —Å {holiday}!{template}"
    context.user_data["congrat_type"] = "standard"
    context.user_data["current_state"] = CONGRAT_DATE_CHOICE

    keyboard = [
        [InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="publish_today")],
        [InlineKeyboardButton("üìÜ –£–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É", callback_data="publish_custom_date")],
        [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]
    ]
    await safe_edit_message_text(query, "–ö–æ–≥–¥–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ?", reply_markup=InlineKeyboardMarkup(keyboard))
    return CONGRAT_DATE_CHOICE

async def handle_congrat_date_choice(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    if query.data == "publish_today":
        context.user_data["publish_date"] = datetime.now().strftime("%Y-%m-%d")
        return await complete_request(update, context)
    elif query.data == "publish_custom_date":
        context.user_data["current_state"] = CONGRAT_DATE_INPUT
        await safe_edit_message_text(query, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì:", reply_markup=InlineKeyboardMarkup(BACK_BUTTON))
        return CONGRAT_DATE_INPUT
    return ConversationHandler.END

async def get_congrat_date(update: Update, context: CallbackContext) -> int:
    date_str = update.message.text.strip()
    try:
        publish_date = datetime.strptime(date_str, "%d-%m-%Y").date()
        if publish_date < datetime.now().date():
            await safe_reply_text(update, "–ù–µ–ª—å–∑—è —É–∫–∞–∑–∞—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É.")
            return CONGRAT_DATE_INPUT
        context.user_data["publish_date"] = publish_date.strftime("%Y-%m-%d")
        return await complete_request(update, context)
    except ValueError:
        await safe_reply_text(update, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì.")
        return CONGRAT_DATE_INPUT

async def get_custom_congrat_message(update: Update, context: CallbackContext) -> int:
    text = update.message.text.strip()
    if not text:
        await safe_reply_text(update, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è.")
        return CUSTOM_CONGRAT_MESSAGE_INPUT
    if len(text) > MAX_CONGRAT_TEXT_LENGTH:
        await safe_reply_text(update, f"–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º {MAX_CONGRAT_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤).")
        return CUSTOM_CONGRAT_MESSAGE_INPUT
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if update.message.photo:
        context.user_data["photo_id"] = update.message.photo[-1].file_id

    from_name = context.user_data.get("from_name", "")
    to_name = context.user_data.get("to_name", "")
    context.user_data["text"] = f"{from_name} –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ—Ç {to_name}!{text}"
    context.user_data["congrat_type"] = "custom"
    context.user_data["current_state"] = CONGRAT_DATE_CHOICE

    keyboard = [
        [InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="publish_today")],
        [InlineKeyboardButton("üìÜ –£–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É", callback_data="publish_custom_date")],
        [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]
    ]
    await safe_reply_text(update, "–ö–æ–≥–¥–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ?", reply_markup=InlineKeyboardMarkup(keyboard))
    return CONGRAT_DATE_CHOICE

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–ë–™–Ø–í–õ–ï–ù–ò–ô ==========
async def handle_announce_subtype_selection(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    subtype_key = query.data.replace("subtype_", "")
    context.user_data["subtype"] = subtype_key
    context.user_data["current_state"] = ANNOUNCE_TEXT_INPUT

    example = EXAMPLE_TEXTS["announcement"].get(subtype_key, "")
    await safe_edit_message_text(
        query,
        f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–¥–æ {MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤).\n–ü—Ä–∏–º–µ—Ä: {example}",
        reply_markup=InlineKeyboardMarkup(BACK_BUTTON)
    )
    return ANNOUNCE_TEXT_INPUT

async def handle_announce_text_input(update: Update, context: CallbackContext) -> int:
    text = update.message.text or update.message.caption
    if not text:
        await safe_reply_text(update, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫ –≤–∞—à–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é.")
        return ANNOUNCE_TEXT_INPUT
    text = text.strip()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if update.message.photo:
        context.user_data["photo_id"] = update.message.photo[-1].file_id

    if len(text) > MAX_TEXT_LENGTH:
        await safe_reply_text(update, f"–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º {MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤).")
        return ANNOUNCE_TEXT_INPUT

    censored_text, has_bad = await censor_text(text)
    if has_bad:
        context.user_data["censored_text"] = censored_text
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="accept_censor")],
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_censor")]
        ]
        await safe_reply_text(
            update,
            f"‚ö†Ô∏è –í —Ç–µ–∫—Å—Ç–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ (–∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ ***):\n{censored_text}\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ —Ç–µ–∫—Å—Ç:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return WAIT_CENSOR_APPROVAL

    context.user_data["text"] = censored_text
    await safe_reply_text(update, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏:")
    context.user_data["current_state"] = PHONE_INPUT
    return PHONE_INPUT

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ù–û–í–û–°–¢–ï–ô ==========
async def get_news_phone_number(update: Update, context: CallbackContext) -> int:
    phone = update.message.text.strip()
    if not validate_phone(phone):
        await safe_reply_text(update, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ +7... –∏–ª–∏ 8...")
        return NEWS_PHONE_INPUT
    context.user_data["phone_number"] = phone
    context.user_data["current_state"] = NEWS_TEXT_INPUT
    await safe_reply_text(update, f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ (–¥–æ {MAX_ANNOUNCE_NEWS_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):")
    return NEWS_TEXT_INPUT

async def get_news_text(update: Update, context: CallbackContext) -> int:
    text = update.message.text.strip()
    if not text:
        await safe_reply_text(update, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏.")
        return NEWS_TEXT_INPUT
    if len(text) > MAX_ANNOUNCE_NEWS_TEXT_LENGTH:
        await safe_reply_text(update, f"–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º {MAX_ANNOUNCE_NEWS_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤).")
        return NEWS_TEXT_INPUT

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if update.message.photo:
        context.user_data["photo_id"] = update.message.photo[-1].file_id

    censored_text, has_bad = await censor_text(text)
    if has_bad:
        context.user_data["censored_text"] = censored_text
        keyboard = [
            [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="accept_censor")],
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_censor")]
        ]
        await safe_reply_text(
            update,
            f"‚ö†Ô∏è –í —Ç–µ–∫—Å—Ç–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞:\n{censored_text}\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return WAIT_CENSOR_APPROVAL

    context.user_data["text"] = censored_text
    return await complete_request(update, context)

# ========== –û–ë–©–ò–ï –§–£–ù–ö–¶–ò–ò ==========
async def complete_request(update: Update, context: CallbackContext) -> int:
    user = update.effective_user
    if not can_submit_request(user.id):
        await safe_reply_text(update, "–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞—è–≤–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

    user_data = context.user_data
    app_data = {
        'user_id': user.id,
        'username': user.username,
        'type': user_data['type'],
        'subtype': user_data.get('subtype'),
        'from_name': user_data.get('from_name'),
        'to_name': user_data.get('to_name'),
        'text': user_data['text'],
        'photo_id': user_data.get('photo_id'),
        'phone_number': user_data.get('phone_number'),
        'publish_date': user_data.get('publish_date'),
        'congrat_type': user_data.get('congrat_type')
    }

    app_id = add_application(app_data)
    if app_id:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        if ADMIN_CHAT_ID:
            await notify_admin_new_application(context.bot, app_id, app_data)
        else:
            logger.warning("ADMIN_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

        if user_data['type'] == "news":
            await publish_to_channel(app_id, context.bot)
            await safe_reply_text(update, "‚úÖ –í–∞—à–∞ –Ω–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")
        else:
            await safe_reply_text(update, f"‚úÖ –ó–∞—è–≤–∫–∞ #{app_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
    else:
        await safe_reply_text(update, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏.")

    context.user_data.clear()
    return ConversationHandler.END

async def publish_to_channel(app_id: int, bot: Bot):
    """–ü—É–±–ª–∏–∫—É–µ—Ç –∑–∞—è–≤–∫—É –≤ –∫–∞–Ω–∞–ª."""
    try:
        app = get_application_details(app_id)
        if app:
            if app['photo_id']:
                await bot.send_photo(
                    chat_id=CHANNEL_ID,
                    photo=app['photo_id'],
                    caption=app['text'],
                    parse_mode="HTML"
                )
            else:
                await bot.send_message(
                    chat_id=CHANNEL_ID,
                    text=app['text'],
                    parse_mode="HTML"
                )
            mark_application_as_published(app_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–∫–∏ #{app_id}: {e}")

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö ==========
async def back_to_start(update: Update, context: CallbackContext) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –Ω–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞."""
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    context.user_data.clear()
    keyboard = [
        [InlineKeyboardButton("üöó –ü–æ–ø—É—Ç–∫–∞", callback_data="carpool")],
    ]
    for key, info in REQUEST_TYPES.items():
        button = InlineKeyboardButton(f"{info['icon']} {info['name']}", callback_data=key)
        keyboard.append([button])
    
    await safe_reply_text(
        update,
        "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return TYPE_SELECTION

async def cancel_command(update: Update, context: CallbackContext) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥."""
    await safe_reply_text(update, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
    context.user_data.clear()
    return ConversationHandler.END

async def admin_approve_application(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    if query.from_user.id != ADMIN_CHAT_ID:
        return
    try:
        app_id = int(query.data.split('_')[1])
        app_details = get_application_details(app_id)
        if not app_details:
            await safe_edit_message_text(query, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        if update_application_status(app_id, 'approved'):
            await safe_edit_message_text(query, f"–ó–∞—è–≤–∫–∞ #{app_id} –æ–¥–æ–±—Ä–µ–Ω–∞.")
        else:
            await safe_edit_message_text(query, f"–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ #{app_id}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
        await safe_edit_message_text(query, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

async def admin_reject_application(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    if query.from_user.id != ADMIN_CHAT_ID:
        return
    try:
        app_id = int(query.data.split('_')[1])
        if update_application_status(app_id, 'rejected'):
            await safe_edit_message_text(query, f"–ó–∞—è–≤–∫–∞ #{app_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        else:
            await safe_edit_message_text(query, f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ #{app_id}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
        await safe_edit_message_text(query, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

# ========== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ö–û–ú–ê–ù–î–´ ==========
async def help_command(update: Update, context: CallbackContext) -> None:
    help_text = (
        "‚ÑπÔ∏è *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É*\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–æ–∫ –≤ –≥—Ä—É–ø–ø—É *–ù–µ–±–æ–ª—å—à–æ–π –ú–∏—Ä: –ù–∏–∫–æ–ª–∞–µ–≤—Å–∫*.\n\n"
        "üìå *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n"
        "1. –ù–∞–∂–º–∏—Ç–µ /start.\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏: –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ, –û–±—ä—è–≤–ª–µ–Ω–∏—è –∏–ª–∏ –ù–æ–≤–æ—Å—Ç—å –æ—Ç –∂–∏—Ç–µ–ª—è.\n"
        "3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞.\n"
        "4. –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é (–∫—Ä–æ–º–µ –ø–æ–ø—É—Ç–æ–∫).\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≥—Ä—É–ø–ø—ã."
    )
    await safe_reply_text(update, help_text, parse_mode="Markdown")

async def pending_command(update: Update, context: CallbackContext) -> None:
    if update.effective_chat.id != ADMIN_CHAT_ID:
        await safe_reply_text(update, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    try:
        with get_db_connection() as conn:
            conn.row_factory = sqlite3.Row
            cur = conn.cursor()
            cur.execute("""
                SELECT id, type, subtype, from_name, to_name, text, photo_id, phone_number
                FROM applications
                WHERE status = 'pending'
                ORDER BY created_at DESC
                LIMIT 10
            """)
            apps = cur.fetchall()
        if not apps:
            await safe_reply_text(update, "üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫, –æ–∂–∏–¥–∞—é—â–∏—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏.")
            return
        for app in apps:
            app_type = REQUEST_TYPES.get(app['type'], {}).get('name', '–ó–∞—è–≤–∫–∞')
            message = f"#{app['id']} ({app_type})\n{app['text']}"
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{app['id']}"),
                 InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{app['id']}")]
            ])
            await context.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=message,
                reply_markup=keyboard
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /pending: {e}")
        await safe_reply_text(update, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫.")

# ========== –§–£–ù–ö–¶–ò–Ø –ü–†–û–í–ï–†–ö–ò –ò –ü–£–ë–õ–ò–ö–ê–¶–ò–ò –ó–ê–Ø–í–û–ö ==========
async def check_pending_applications():
    global application
    if application is None:
        logger.warning("Application –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–ø—É—Å–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
        return

    try:
        applications = get_approved_unpublished_applications()
        bot = application.bot

        for app in applications:
            try:
                if app['photo_id']:
                    await bot.send_photo(
                        chat_id=CHANNEL_ID,
                        photo=app['photo_id'],
                        caption=app['text'],
                        parse_mode="HTML"
                    )
                else:
                    await bot.send_message(
                        chat_id=CHANNEL_ID,
                        text=app['text'],
                        parse_mode="HTML"
                    )
                mark_application_as_published(app['id'])
                logger.info(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ #{app['id']}")
                await asyncio.sleep(1)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ #{app['id']}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—è–≤–æ–∫: {e}")

# ========== –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ ==========
async def notify_admin_new_application(bot: Bot, app_id: int, app_data: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏."""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏
        app_type = REQUEST_TYPES.get(app_data['type'], {}).get('name', '–ó–∞—è–≤–∫–∞')
        subtype = ANNOUNCE_SUBTYPES.get(app_data['subtype'], '') if app_data.get('subtype') else ''
        full_type = f"{app_type}" + (f" ({subtype})" if subtype else '')
        
        phone = f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {app_data['phone_number']}" if app_data.get('phone_number') else ""
        has_photo = "‚úÖ" if app_data.get('photo_id') else "‚ùå"
        
        caption = (
            f"üì® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{app_id}\n"
            f"‚Ä¢ –¢–∏–ø: {full_type}\n"
            f"‚Ä¢ –§–æ—Ç–æ: {has_photo}\n"
            f"{phone}\n"
            f"‚Ä¢ –û—Ç: @{app_data.get('username') or 'N/A'} (ID: {app_data['user_id']})\n"
            f"‚Ä¢ –¢–µ–∫—Å—Ç: {app_data['text']}"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞—è–≤–æ–∫, —Ç—Ä–µ–±—É—é—â–∏—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        if app_data['type'] != "news":
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{app_id}"),
                 InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{app_id}")]
            ])
        else:
            keyboard = None

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç
        if app_data.get('photo_id'):
            await bot.send_photo(
                chat_id=ADMIN_CHAT_ID,
                photo=app_data['photo_id'],
                caption=caption,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        else:
            await bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=caption,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        
        logger.info(f"–ó–∞—è–≤–∫–∞ #{app_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ #{app_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}", exc_info=True)

# ========== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ==========
async def initialize_bot():
    global application
    async with application_lock:
        if application is not None:
            return
        application = Application.builder().token(TOKEN).build()

        # –°–æ–∑–¥–∞–µ–º ConversationHandler
        conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler('start', start_command),
                CallbackQueryHandler(handle_carpool_start, pattern="^carpool$")
            ],
            states={
                TYPE_SELECTION: [CallbackQueryHandler(handle_type_selection)],
                CARPOOL_SUBTYPE_SELECTION: [CallbackQueryHandler(handle_carpool_type)],
                RIDE_FROM_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_carpool_from)],
                RIDE_TO_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_carpool_to)],
                RIDE_DATE_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_carpool_date)],
                RIDE_SEATS_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_carpool_seats)],
                RIDE_PHONE_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_carpool_phone)],
                SENDER_NAME_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_sender_name)],
                RECIPIENT_NAME_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_recipient_name)],
                CONGRAT_HOLIDAY_CHOICE: [CallbackQueryHandler(handle_congrat_holiday_choice)],
                CUSTOM_CONGRAT_MESSAGE_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_custom_congrat_message)],
                CONGRAT_DATE_CHOICE: [CallbackQueryHandler(handle_congrat_date_choice)],
                CONGRAT_DATE_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_congrat_date)],
                ANNOUNCE_SUBTYPE_SELECTION: [CallbackQueryHandler(handle_announce_subtype_selection)],
                ANNOUNCE_TEXT_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_announce_text_input)],
                PHONE_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone_number)],
                NEWS_PHONE_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_news_phone_number)],
                NEWS_TEXT_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_news_text)],
                WAIT_CENSOR_APPROVAL: [CallbackQueryHandler(handle_censor_choice)]
            },
            fallbacks=[
                CommandHandler('cancel', cancel_command),
                CallbackQueryHandler(back_to_start, pattern="^back_to_start$")
            ],
            allow_reentry=True
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(conv_handler)
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("pending", pending_command))
        application.add_handler(CallbackQueryHandler(admin_approve_application, pattern="^approve_\\d+$"))
        application.add_handler(CallbackQueryHandler(admin_reject_application, pattern="^reject_\\d+$"))

        await application.initialize()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ URL –∑–∞–¥–∞–Ω
        if WEBHOOK_URL and WEBHOOK_SECRET:
            webhook_url = f"{WEBHOOK_URL}/telegram-webhook/{WEBHOOK_SECRET}"
            await application.bot.set_webhook(url=webhook_url, secret_token=WEBHOOK_SECRET)
            logger.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        else:
            logger.warning("WEBHOOK_URL –∏–ª–∏ WEBHOOK_SECRET –Ω–µ –∑–∞–¥–∞–Ω—ã. –í–µ–±—Ö—É–∫ –Ω–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

        logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

# ========== –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏ —Ü–µ–Ω–∑—É—Ä–µ ==========
async def handle_censor_choice(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    if query.data == "accept_censor":
        context.user_data["text"] = context.user_data["censored_text"]
        return await complete_request(update, context)
    elif query.data == "edit_censor":
        await safe_edit_message_text(query, "–í–≤–µ–¥–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:", reply_markup=InlineKeyboardMarkup(BACK_BUTTON))
        if context.user_data.get("type") == "congrat":
            return CUSTOM_CONGRAT_MESSAGE_INPUT
        elif context.user_data.get("type") == "announcement":
            return ANNOUNCE_TEXT_INPUT
        elif context.user_data.get("type") == "news":
            return NEWS_TEXT_INPUT
    return ConversationHandler.END

# ========== FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ==========
app = FastAPI()

@app.on_event("startup")
async def startup_event():
    init_db()
    await initialize_bot()
    scheduler = AsyncIOScheduler(
        jobstores={'default': SQLAlchemyJobStore(url='sqlite:///jobs.sqlite')},
        executors={'default': AsyncIOExecutor()},
        timezone=TIMEZONE
    )
    scheduler.add_job(check_pending_applications, 'interval', minutes=1)
    scheduler.start()
    BOT_STATE['running'] = True
    BOT_STATE['start_time'] = datetime.now(TIMEZONE)
    logger.info("FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ.")

@app.post("/telegram-webhook/{secret}")
async def telegram_webhook(secret: str, request: Request):
    global application
    if secret != WEBHOOK_SECRET:
        raise HTTPException(status_code=403, detail="Invalid secret")
    if application is None:
        await initialize_bot()
    try:
        data = await request.json()
        update = Update.de_json(data, application.bot)
        await application.process_update(update)
        return JSONResponse(status_code=200, content={"status": "ok"})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/")
async def root():
    return {"message": "Telegram Bot Webhook Listener"}

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=PORT)

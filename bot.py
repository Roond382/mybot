import os
import sys
import logging
import sqlite3
import re
import asyncio
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, Tuple, List

# –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import pytz
from dotenv import load_dotenv
import aiofiles
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# Telegram Bot
from telegram import (
    Bot,
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.error import TelegramError
from telegram.ext import (
    Application,
    CallbackContext,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)

# FastAPI –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
from fastapi import FastAPI
import uvicorn

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==========
PORT = int(os.environ.get('PORT', 10000))  # Render –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ—Ä—Ç 10000
WEBHOOK_URL = os.getenv('WEBHOOK_URL', '')
TOKEN = os.getenv('TELEGRAM_TOKEN')
CHANNEL_ID = int(os.getenv('CHANNEL_ID')) if os.getenv('CHANNEL_ID') else None
ADMIN_CHAT_ID = int(os.getenv('ADMIN_CHAT_ID')) if os.getenv('ADMIN_CHAT_ID') else None
TIMEZONE = pytz.timezone('Europe/Moscow')
WORKING_HOURS = (0, 23)
WORK_ON_WEEKENDS = True

# ========== –ö–û–ù–°–¢–ê–ù–¢–´ ==========
BACK_BUTTON = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]]
DB_FILE = 'db.sqlite'
BAD_WORDS_FILE = 'bad_words.txt'
DEFAULT_BAD_WORDS = ["—Ö—É–π", "–ø–∏–∑–¥–∞", "–±–ª—è—Ç—å", "–±–ª—è–¥—å", "–µ–±–∞—Ç—å", "—Å—É–∫–∞"]
MAX_NAME_LENGTH = 50
MAX_TEXT_LENGTH = 4000
MAX_CONGRAT_TEXT_LENGTH = 500
MAX_ANNOUNCE_NEWS_TEXT_LENGTH = 300
CHANNEL_NAME = "–ù–µ–±–æ–ª—å—à–æ–π –ú–∏—Ä: –ù–∏–∫–æ–ª–∞–µ–≤—Å–∫"

# ========== –°–û–°–¢–û–Ø–ù–ò–Ø –î–ò–ê–õ–û–ì–ê ==========
(
    TYPE_SELECTION,
    SENDER_NAME_INPUT,
    RECIPIENT_NAME_INPUT,
    CONGRAT_HOLIDAY_CHOICE,
    CUSTOM_CONGRAT_MESSAGE_INPUT,
    CONGRAT_DATE_INPUT,
    ANNOUNCE_SUBTYPE_SELECTION,
    ANNOUNCE_TEXT_INPUT,
    WAIT_CENSOR_APPROVAL
) = range(9)

# ========== –¢–ò–ü–´ –ó–ê–ü–†–û–°–û–í ==========
REQUEST_TYPES = {
    "congrat": {"name": "–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ", "icon": "üéâ"},
    "announcement": {"name": "–û–±—ä—è–≤–ª–µ–Ω–∏–µ", "icon": "üì¢"},
    "news": {"name": "–ù–æ–≤–æ—Å—Ç—å –æ—Ç –∂–∏—Ç–µ–ª—è", "icon": "üóûÔ∏è"}
}

# ========== –ü–û–î–¢–ò–ü–´ –û–ë–™–Ø–í–õ–ï–ù–ò–ô ==========
ANNOUNCE_SUBTYPES = {
    "ride": "üöó –ü–æ–ø—É—Ç–∫–∞",
    "offer": "üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
    "lost": "üîç –ü–æ—Ç–µ—Ä—è–ª–∏/–ù–∞—à–ª–∏"
}

# ========== –ü–†–ê–ó–î–ù–ò–ö–ò ==========
HOLIDAYS = {
    "üéÑ –ù–æ–≤—ã–π –≥–æ–¥": "01-01",
    "ü™ñ 23 –§–µ–≤—Ä–∞–ª—è": "02-23",
    "üíê 8 –ú–∞—Ä—Ç–∞": "03-08",
    "üèÖ 9 –ú–∞—è": "05-09",
    "üá∑üá∫ 12 –ò—é–Ω—è": "06-12",
    "ü§ù 4 –ù–æ—è–±—Ä—è": "11-04"
}

HOLIDAY_TEMPLATES = {
    "üéÑ –ù–æ–≤—ã–π –≥–æ–¥": "–° –ù–æ–≤—ã–º –≥–æ–¥–æ–º!\n–ü—É—Å—Ç—å –∏—Å–ø–æ–ª–Ω—è—é—Ç—Å—è –≤—Å–µ –≤–∞—à–∏ –∂–µ–ª–∞–Ω–∏—è!",
    "ü™ñ 23 –§–µ–≤—Ä–∞–ª—è": "–° –î–Ω—ë–º –∑–∞—â–∏—Ç–Ω–∏–∫–∞ –û—Ç–µ—á–µ—Å—Ç–≤–∞!\n–ú—É–∂–µ—Å—Ç–≤–∞, –æ—Ç–≤–∞–≥–∏ –∏ –º–∏—Ä–Ω–æ–≥–æ –Ω–µ–±–∞ –Ω–∞–¥ –≥–æ–ª–æ–≤–æ–π!",
    "üíê 8 –ú–∞—Ä—Ç–∞": "–° 8 –ú–∞—Ä—Ç–∞!\n–ö—Ä–∞—Å–æ—Ç—ã, —Å—á–∞—Å—Ç—å—è –∏ –≤–µ—Å–µ–Ω–Ω–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!",
    "üèÖ 9 –ú–∞—è": "–° –î–Ω—ë–º –ü–æ–±–µ–¥—ã!\n–í–µ—á–Ω–∞—è –ø–∞–º—è—Ç—å –≥–µ—Ä–æ—è–º!",
    "üá∑üá∫ 12 –ò—é–Ω—è": "–° –î–Ω—ë–º –†–æ—Å—Å–∏–∏!\n–ú–∏—Ä–∞, –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—è –∏ –ø—Ä–æ—Ü–≤–µ—Ç–∞–Ω–∏—è –Ω–∞—à–µ–π —Å—Ç—Ä–∞–Ω–µ!",
    "ü§ù 4 –ù–æ—è–±—Ä—è": "–° –î–Ω—ë–º –Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –µ–¥–∏–Ω—Å—Ç–≤–∞!\n–°–æ–≥–ª–∞—Å–∏—è, –º–∏—Ä–∞ –∏ –¥–æ–±—Ä–∞!"
}

# ========== –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ==========
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ========== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø FASTAPI ==========
app = FastAPI()
application = None  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Application

# ========== –ì–õ–û–ë–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –ë–û–¢–ê ==========
BOT_STATE = {
    'running': False,
    'start_time': None,
    'last_activity': None
}

# ========== –ë–ê–ó–ê –î–ê–ù–ù–´–• ==========
def get_db_connection() -> sqlite3.Connection:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
    conn = sqlite3.connect(DB_FILE, check_same_thread=False)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        with get_db_connection() as conn:
            conn.execute("""
            CREATE TABLE IF NOT EXISTS applications (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                username TEXT,
                type TEXT NOT NULL,
                subtype TEXT,
                from_name TEXT,
                to_name TEXT,
                text TEXT NOT NULL,
                status TEXT DEFAULT 'pending',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                publish_date DATE,
                published_at TIMESTAMP,
                congrat_type TEXT
            )
            """)
            conn.execute("""
            CREATE INDEX IF NOT EXISTS idx_approved_unpublished
            ON applications(status, published_at)
            WHERE status = 'approved' AND published_at IS NULL
            """)
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}", exc_info=True)
        raise

def add_application(data: Dict[str, Any]) -> Optional[int]:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    try:
        with get_db_connection() as conn:
            cur = conn.cursor()
            cur.execute("""
            INSERT INTO applications
            (user_id, username, type, subtype, from_name, to_name, text, publish_date, congrat_type)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                data['user_id'],
                data.get('username'),
                data['type'],
                data.get('subtype'),
                data.get('from_name'),
                data.get('to_name'),
                data['text'],
                data.get('publish_date'),
                data.get('congrat_type')
            ))
            app_id = cur.lastrowid
            conn.commit()
            return app_id
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}\n–î–∞–Ω–Ω—ã–µ: {data}", exc_info=True)
        return None

def get_application_details(app_id: int) -> Optional[sqlite3.Row]:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ –ø–æ ID."""
    try:
        with get_db_connection() as conn:
            cur = conn.cursor()
            cur.execute("SELECT * FROM applications WHERE id = ?", (app_id,))
            return cur.fetchone()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ #{app_id}: {e}", exc_info=True)
        return None

def get_approved_unpublished_applications() -> list:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ, –Ω–æ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏."""
    try:
        with get_db_connection() as conn:
            cur = conn.cursor()
            cur.execute("""
            SELECT id, user_id, username, type, subtype, from_name, to_name, text, publish_date, congrat_type
            FROM applications
            WHERE status = 'approved' AND published_at IS NULL
            """)
            return cur.fetchall()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {e}", exc_info=True)
        return []

def update_application_status(app_id: int, status: str) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏."""
    try:
        with get_db_connection() as conn:
            conn.execute("UPDATE applications SET status = ? WHERE id = ?", (status, app_id))
            conn.commit()
            return True
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ #{app_id}: {e}", exc_info=True)
        return False

def mark_application_as_published(app_id: int) -> bool:
    """–ü–æ–º–µ—á–∞–µ—Ç –∑–∞—è–≤–∫—É –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—É—é."""
    try:
        with get_db_connection() as conn:
            conn.execute("""
            UPDATE applications
            SET published_at = CURRENT_TIMESTAMP, status = 'published'
            WHERE id = ?
            """, (app_id,))
            conn.commit()
            return True
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞—è–≤–∫–∏ #{app_id}: {e}", exc_info=True)
        return False

# ========== –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê ==========
async def load_bad_words() -> List[str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤."""
    try:
        async with aiofiles.open(BAD_WORDS_FILE, 'r', encoding='utf-8') as f:
            content = await f.read()
            return [word.strip() for line in content.splitlines() for word in line.split(',') if word.strip()]
    except FileNotFoundError:
        logger.warning("–§–∞–π–ª —Å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        return DEFAULT_BAD_WORDS
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤: {e}", exc_info=True)
        return DEFAULT_BAD_WORDS

async def censor_text(text: str) -> Tuple[str, bool]:
    """–¶–µ–Ω–∑—É—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    bad_words = await load_bad_words()
    censored = text
    has_bad = False

    for word in bad_words:
        try:
            if re.search(re.escape(word), censored, re.IGNORECASE):
                has_bad = True
                censored = re.sub(re.escape(word), '***', censored, flags=re.IGNORECASE)
        except re.error as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ü–µ–Ω–∑—É—Ä—ã —Å–ª–æ–≤–∞ '{word}': {e}\n–¢–µ–∫—Å—Ç: {text[:100]}...", exc_info=True)

    try:
        censored = re.sub(
            r'(–∑–≤–æ–Ω–∏—Ç–µ|–ø–∏—à–∏—Ç–µ|—Ç–µ–ª–µ—Ñ–æ–Ω|–Ω–æ–º–µ—Ä|—Ç–µ–ª\.?|—Ç\.)[:;\s]*([\+\d\(\).\s-]{7,})',
            '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–∫—Ä—ã—Ç–∞ (–ø–∏—à–∏—Ç–µ –≤ –õ–°)',
            censored,
            flags=re.IGNORECASE
        )
    except re.error as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ü–µ–Ω–∑—É—Ä—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {e}", exc_info=True)

    return censored, has_bad

async def safe_send_message(bot: Bot, chat_id: int, text: str, **kwargs) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    try:
        await bot.send_message(chat_id=chat_id, text=text, **kwargs)
        return True
    except TelegramError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {chat_id}: {e}\n–¢–µ–∫—Å—Ç: {text[:100]}...")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {chat_id}: {e}\n–¢–µ–∫—Å—Ç: {text[:100]}...", exc_info=True)
    return False

async def safe_edit_message_text(query: Update.callback_query, text: str, **kwargs):
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    if not query or not query.message:
        return
    try:
        await query.edit_message_text(text=text, **kwargs)
    except TelegramError as e:
        if "message is not modified" not in str(e).lower():
            logger.warning(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}", exc_info=True)

async def safe_reply_text(update: Update, text: str, **kwargs):
    """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    if update.callback_query:
        await safe_edit_message_text(update.callback_query, text, **kwargs)
    elif update.message:
        try:
            await update.message.reply_text(text=text, **kwargs)
        except TelegramError as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: {e}", exc_info=True)

async def send_bot_status(bot: Bot, status: str, force_send: bool = False) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
    if not ADMIN_CHAT_ID or not bot:
        return False

    try:
        current_time = datetime.now(TIMEZONE)
        message = (
            f"ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {status}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {current_time.strftime('%H:%M %d.%m.%Y')}\n"
            f"‚Ä¢ –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è: {'–î–∞' if is_working_hours() else '–ù–µ—Ç'}\n"
            f"‚Ä¢ Uptime: {get_uptime()}"
        )

        await bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=message,
            disable_notification=True
        )
        return True
    except TelegramError as e:
        logger.warning(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ Telegram: {e}")
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
        return False

async def publish_to_channel(app_id: int, bot: Bot) -> bool:
    """–ü—É–±–ª–∏–∫—É–µ—Ç –∑–∞—è–≤–∫—É –≤ –∫–∞–Ω–∞–ª —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    if not CHANNEL_ID:
        logger.error("CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
        return False

    app_details = get_application_details(app_id)
    if not app_details:
        logger.error(f"–ó–∞—è–≤–∫–∞ #{app_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return False

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
    current_time = datetime.now(TIMEZONE).strftime("%H:%M")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ö–µ—à—Ç–µ–≥–∏ –ø–æ —Ç–∏–ø—É —Å–æ–æ–±—â–µ–Ω–∏—è
    HASHTAGS = {
        'congrat': '#–ù–µ–±–æ–ª—å—à–æ–π–ú–∏—Ä–ù–∏–∫–æ–ª–∞–µ–≤—Å–∫ #–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è',
        'announcement': '#–ù–µ–±–æ–ª—å—à–æ–π–ú–∏—Ä–ù–∏–∫–æ–ª–∞–µ–≤—Å–∫ #–û–±—ä—è–≤–ª–µ–Ω–∏—è', 
        'news': '#–ù–µ–±–æ–ª—å—à–æ–π–ú–∏—Ä–ù–∏–∫–æ–ª–∞–µ–≤—Å–∫ #–ù–æ–≤–æ—Å—Ç–∏'
    }

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    if app_details['type'] == 'congrat':
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –ë–î
        from_name = app_details['from_name'] if 'from_name' in app_details.keys() else ''
        to_name = app_details['to_name'] if 'to_name' in app_details.keys() else ''
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ñ—Ä–∞–∑
        clean_text = app_details['text']
        if from_name and to_name:
            patterns_to_remove = [
                f"{from_name} –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ—Ç {to_name}",
                "–ø–æ–∑–¥—Ä–∞–≤–ª—è–µ—Ç",
                "—Å ",
                "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é"
            ]
            
            for pattern in patterns_to_remove:
                if pattern in clean_text:
                    clean_text = clean_text.replace(pattern, "", 1).strip()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = (
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç {from_name}\n\n"
            f"{from_name} –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ—Ç {to_name}:\n"
            f"¬´{clean_text}¬ª\n\n"
            f"{HASHTAGS['congrat']}\n"
            f"‚è≥ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {current_time}"
        )
    else:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–æ–≤–æ—Å—Ç–∏/–æ–±—ä—è–≤–ª–µ–Ω–∏—è)
        message_text = (
            f"{app_details['text']}\n\n"
            f"{HASHTAGS.get(app_details['type'], '')}\n"
            f"‚è≥ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {current_time}"
        )

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(
            chat_id=CHANNEL_ID,
            text=message_text,
            disable_web_page_preview=True
        )
        
        # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–µ
        mark_application_as_published(app_id)
        logger.info(f"–ó–∞—è–≤–∫–∞ #{app_id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ {CHANNEL_ID}")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞—è–≤–∫–∏ #{app_id}: {str(e)}")
        return False
async def check_pending_applications(context: CallbackContext) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏."""
    applications = get_approved_unpublished_applications()
    for app in applications:
        if app['type'] == 'congrat' and app['congrat_type'] == 'custom':
            if app['publish_date']:
                publish_date_obj = datetime.strptime(app['publish_date'], "%Y-%m-%d").date()
                today = datetime.now().date()
                if publish_date_obj <= today:
                    logger.info(f"–ü–ª–∞–Ω–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è #{app['id']} (–¥–∞—Ç–∞ –ø–æ–¥–æ—à–ª–∞).")
                    await publish_to_channel(app['id'], context.bot)
                    await asyncio.sleep(1)
            else:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ #{app['id']} –±–µ–∑ –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ü—É–±–ª–∏–∫—É–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ.")
                await publish_to_channel(app['id'], context.bot)
                await asyncio.sleep(1)
        elif app['type'] in ['news', 'announcement'] or (app['type'] == 'congrat' and app['congrat_type'] != 'custom'):
            logger.warning(f"–ó–∞—è–≤–∫–∞ #{app['id']} —Ç–∏–ø–∞ '{app['type']}' –Ω–µ –±—ã–ª–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞. –ü—É–±–ª–∏–∫—É–µ–º —Å–µ–π—á–∞—Å.")
            await publish_to_channel(app['id'], context.bot)
            await asyncio.sleep(1)

def is_working_hours() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–∞—Ö."""
    now = datetime.now(TIMEZONE)

    if not (WORKING_HOURS[0] <= now.hour < WORKING_HOURS[1]):
        return False

    if not WORK_ON_WEEKENDS and now.weekday() >= 5:
        return False

    return True

def check_environment() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö."""
    checks = {
        "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö": os.path.exists(DB_FILE),
        "–§–∞–π–ª –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤": os.path.exists(BAD_WORDS_FILE),
        "–¢–æ–∫–µ–Ω –±–æ—Ç–∞": bool(TOKEN),
        "ID –∫–∞–Ω–∞–ª–∞": bool(CHANNEL_ID),
        "–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å": str(datetime.now(TIMEZONE))
    }

    for name, status in checks.items():
        logger.info(f"{name}: {'OK' if status else 'ERROR'}")
        if not status and name != "–§–∞–π–ª –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤":
            return False
    return True

def get_uptime() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
    if not BOT_STATE.get('start_time'):
        return "N/A"
    
    uptime = datetime.now(TIMEZONE) - BOT_STATE['start_time']
    hours, remainder = divmod(uptime.seconds, 3600)
    minutes, seconds = divmod(remainder, 60)
    return f"{uptime.days}d {hours}h {minutes}m {seconds}s"

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ==========
async def start_command(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username if user else 'N/A'} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    context.user_data.clear()

    text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏:"
    keyboard = []
    for key, info in REQUEST_TYPES.items():
        keyboard.append([InlineKeyboardButton(f"{info['icon']} {info['name']}", callback_data=key)])
    keyboard += BACK_BUTTON

    await safe_reply_text(update, text, reply_markup=InlineKeyboardMarkup(keyboard))
    return TYPE_SELECTION

async def handle_type_selection(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞—è–≤–∫–∏."""
    query = update.callback_query
    if not query or not query.data:
        return ConversationHandler.END
        
    try:
        await query.answer()
    except TelegramError as e:
        logger.warning(f"Error answering callback query {query.id}: {e}")

    context.user_data["type"] = query.data
    request_type = query.data

    keyboard_nav = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]]

    if request_type == "congrat":
        await safe_edit_message_text(query,
            "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–∫—Ç–æ –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä: –í–Ω—É–∫ –í–∏—Ç–∞–ª–∏–π)",
            reply_markup=InlineKeyboardMarkup(keyboard_nav))
        return SENDER_NAME_INPUT

    elif request_type == "announcement":
        keyboard = [[InlineKeyboardButton(v, callback_data=k)] for k, v in ANNOUNCE_SUBTYPES.items()]
        keyboard.extend(keyboard_nav)
        await safe_edit_message_text(query,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard))
        return ANNOUNCE_SUBTYPE_SELECTION

    elif request_type == "news":
        await safe_edit_message_text(query,
            f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –Ω–æ–≤–æ—Å—Ç—å (–¥–æ {MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):",
            reply_markup=InlineKeyboardMarkup(keyboard_nav))
        return ANNOUNCE_TEXT_INPUT
        
    else:
        await safe_edit_message_text(query, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞—è–≤–∫–∏.")
        return ConversationHandler.END

async def get_sender_name(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è."""
    if not update.message or not update.message.text or not update.message.text.strip():
        await safe_reply_text(update,
            "–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]]))
        return SENDER_NAME_INPUT

    sender_name = update.message.text.strip()
    if not validate_name(sender_name):
        await safe_reply_text(update,
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã, –æ—Ç 2 –¥–æ {MAX_NAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]]))
        return SENDER_NAME_INPUT

    context.user_data["from_name"] = sender_name
    await safe_reply_text(update,
        "–ö–æ–≥–æ –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ—Ç–µ? –ù–∞–ø—Ä–∏–º–µ—Ä: –±–∞–±—É—à–∫—É –í–∏–∫—É",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]]))
    return RECIPIENT_NAME_INPUT

def validate_name(name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏."""
    if len(name) < 2 or len(name) > MAX_NAME_LENGTH:
        return False
    return bool(re.match(r'^[a-zA-Z–∞-—è–ê-–Ø—ë–Å\s\-]+$', name))

async def get_recipient_name(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è."""
    if not update.message or not update.message.text or not update.message.text.strip():
        await safe_reply_text(update,
            "–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]]))
        return RECIPIENT_NAME_INPUT

    recipient_name = update.message.text.strip()
    if not validate_name(recipient_name):
        await safe_reply_text(update,
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã, –æ—Ç 2 –¥–æ {MAX_NAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]]))
        return RECIPIENT_NAME_INPUT

    context.user_data["to_name"] = recipient_name

    keyboard = [
        [InlineKeyboardButton(holiday, callback_data=f"holiday_{holiday}")]
        for holiday in HOLIDAYS
    ] + [
        [InlineKeyboardButton("üéÇ –°–≤–æ–π –ø—Ä–∞–∑–¥–Ω–∏–∫", callback_data="custom_congrat")],
        [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]
    ]

    await safe_reply_text(update,
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–∑–¥–Ω–∏–∫ –¥–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard))
    return CONGRAT_HOLIDAY_CHOICE

async def back_to_start(update: Update, context: CallbackContext) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    context.user_data.clear()
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username if user else 'N/A'} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –Ω–∞—á–∞–ª–æ")
    if update.callback_query:
        try:
            await update.callback_query.answer()
        except TelegramError as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback –≤ back_to_start: {e}")
    return await start_command(update, context)

async def cancel_command(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel."""
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username if user else 'N/A'} –æ—Ç–º–µ–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ")
    
    await safe_reply_text(
        update,
        "‚ùå –¢–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]
        ])
    )
    
    context.user_data.clear()
    return await back_to_start(update, context)

def is_holiday_active(holiday_date_str: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç—É–∞–ª–µ–Ω –ª–∏ –ø—Ä–∞–∑–¥–Ω–∏–∫ –≤ —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥."""
    current_year = datetime.now().year
    holiday_date = datetime.strptime(f"{current_year}-{holiday_date_str}", "%Y-%m-%d").date()
    today = datetime.now().date()
    return (holiday_date - timedelta(days=5)) <= today <= (holiday_date + timedelta(days=5))

async def handle_congrat_holiday_choice(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–∞–∑–¥–Ω–∏–∫–∞."""
    query = update.callback_query
    if not query or not query.data:
        logger.warning("–ü—É—Å—Ç–æ–π callback_query –≤ handle_congrat_holiday_choice")
        return ConversationHandler.END

    try:
        await query.answer()
    except TelegramError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: {e}")

    if query.data == "publish_today":
        context.user_data["publish_date"] = datetime.now().strftime("%Y-%m-%d")
        return await complete_request(update, context)

    if query.data == "custom_date":
        keyboard_nav = [
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—Ä–∞–∑–¥–Ω–∏–∫–∞", callback_data="back_to_holiday_choice")],
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]
        ]
        await safe_edit_message_text(query,
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì –∏–ª–∏ '—Å–µ–≥–æ–¥–Ω—è':",
            reply_markup=InlineKeyboardMarkup(keyboard_nav))
        return CONGRAT_DATE_INPUT
    
    if query.data == "custom_congrat":
        return await process_custom_congrat_message(update, context)

    holiday = query.data.replace("holiday_", "")
    if holiday not in HOLIDAYS:
        await safe_edit_message_text(query,
            "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–∞–∑–¥–Ω–∏–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—Ä–∞–∑–¥–Ω–∏–∫", callback_data="back_to_holiday_choice")],
                [InlineKeyboardButton("üîô –í –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]
            ]))
        return ConversationHandler.END

    holiday_date_str = HOLIDAYS[holiday]
    if not is_holiday_active(holiday_date_str):
        current_year = datetime.now().year
        holiday_date_obj = datetime.strptime(f"{current_year}-{holiday_date_str}", "%Y-%m-%d")
        start_date = (holiday_date_obj - timedelta(days=5)).strftime("%d.%m")
        end_date = (holiday_date_obj + timedelta(days=5)).strftime("%d.%m")
        
        await safe_edit_message_text(query,
            f"‚ùå –ü—Ä–∞–∑–¥–Ω–∏–∫ ¬´{holiday}¬ª –∞–∫—Ç—É–∞–ª–µ–Ω —Ç–æ–ª—å–∫–æ —Å {start_date} –ø–æ {end_date}.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ:\n"
            "1. –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—Ä–∞–∑–¥–Ω–∏–∫\n"
            "2. –°–æ–∑–¥–∞—Ç—å —Å–≤–æ—ë –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ (–∫–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ)",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üéÇ –°–≤–æ—ë –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="custom_congrat")],
                [InlineKeyboardButton("üîô –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—Ä–∞–∑–¥–Ω–∏–∫", callback_data="back_to_holiday_choice")],
                [InlineKeyboardButton("üîô –í –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]
            ]))
        return CONGRAT_HOLIDAY_CHOICE

    context.user_data["congrat_type"] = holiday
    template = HOLIDAY_TEMPLATES.get(holiday, "–° –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º!")
    from_name = context.user_data.get("from_name", "")
    to_name = context.user_data.get("to_name", "")

    formatted_text = f"{from_name} –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ—Ç {to_name} —Å {holiday}!\n\n{template}"
    context.user_data["text"] = formatted_text

    censored_text, has_bad = await censor_text(formatted_text)
    if has_bad:
        context.user_data["censored_text"] = censored_text
        await safe_edit_message_text(query,
            "‚ö†Ô∏è –í —Ç–µ–∫—Å—Ç–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ (–∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ ***):\n\n"
            f"{censored_text}\n\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ —Ç–µ–∫—Å—Ç:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="accept")],
                [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit")],
                [InlineKeyboardButton("üîô –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—Ä–∞–∑–¥–Ω–∏–∫", callback_data="back_to_holiday_choice")]
            ]))
        return WAIT_CENSOR_APPROVAL

    keyboard = [
        [InlineKeyboardButton("üìÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è", callback_data="publish_today")],
        [InlineKeyboardButton("üóìÔ∏è –£–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É", callback_data="custom_date")],
        [InlineKeyboardButton("üîô –í –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]
    ]

    await safe_edit_message_text(query,
        f"üéâ –¢–µ–∫—Å—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ç–æ–≤!\n\n{formatted_text}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard))
    return CONGRAT_DATE_INPUT

async def process_custom_congrat_message(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è."""
    query = update.callback_query
    if query:
        try:
            await query.answer()
        except TelegramError as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: {e}")

    context.user_data["congrat_type"] = "custom"
    await safe_reply_text(update,
        f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è (–¥–æ {MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]]))
    return CUSTOM_CONGRAT_MESSAGE_INPUT

async def process_congrat_text(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è."""
    if not update.message or not update.message.text or not update.message.text.strip():
        await safe_reply_text(update,
            "–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]]))
        return CUSTOM_CONGRAT_MESSAGE_INPUT

    text = update.message.text.strip()
    if len(text) > MAX_TEXT_LENGTH:
        await safe_reply_text(update,
            f"–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –µ–≥–æ –¥–æ {MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]]))
        return CUSTOM_CONGRAT_MESSAGE_INPUT

    if len(text) < 10:
        await safe_reply_text(update,
            "–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤).",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]]))
        return CUSTOM_CONGRAT_MESSAGE_INPUT

    from_name = context.user_data.get("from_name", "")
    to_name = context.user_data.get("to_name", "")
    formatted_text = f"{from_name} –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ—Ç {to_name}!\n\n{text}"
    context.user_data["text"] = formatted_text

    censored_text, has_bad = await censor_text(formatted_text)
    if has_bad:
        context.user_data["censored_text"] = censored_text
        await safe_reply_text(update,
            "‚ö†Ô∏è –í –≤–∞—à–µ–º —Ç–µ–∫—Å—Ç–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞. –û–Ω–∏ –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ ***.\n\n"
            f"–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:\n\n{censored_text}\n\n"
            "–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å —Ü–µ–Ω–∑—É—Ä–æ–π?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data="accept")],
                [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit")],
                [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]
            ]))
        return WAIT_CENSOR_APPROVAL

    keyboard = [
        [InlineKeyboardButton("üìÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è", callback_data="publish_today")],
        [InlineKeyboardButton("üóìÔ∏è –£–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É", callback_data="custom_date")],
        [InlineKeyboardButton("üîô –í –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]
    ]
    await safe_reply_text(update,
        f"üéâ –¢–µ–∫—Å—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ç–æ–≤!\n\n{formatted_text}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard))
    return CONGRAT_DATE_INPUT

async def back_to_holiday_choice(update: Update, context: CallbackContext) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É –ø—Ä–∞–∑–¥–Ω–∏–∫–∞."""
    query = update.callback_query
    if query:
        try:
            await query.answer()
        except TelegramError as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback: {e}")

    keyboard = [
        [InlineKeyboardButton(holiday, callback_data=f"holiday_{holiday}")]
        for holiday in HOLIDAYS
    ] + [
        [InlineKeyboardButton("üéÇ –°–≤–æ–π –ø—Ä–∞–∑–¥–Ω–∏–∫", callback_data="custom_congrat")],
        [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]
    ]

    await safe_edit_message_text(query,
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–∑–¥–Ω–∏–∫ –¥–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard))
    return CONGRAT_HOLIDAY_CHOICE

async def handle_announce_subtype_selection(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–¥—Ç–∏–ø–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è."""
    query = update.callback_query
    if not query or not query.data:
        return ConversationHandler.END

    try:
        await query.answer()
    except TelegramError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: {e}")

    subtype_key = query.data.replace("subtype_", "")
    if subtype_key not in ANNOUNCE_SUBTYPES:
        await safe_edit_message_text(query,
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]]))
        return ConversationHandler.END

    context.user_data["subtype"] = subtype_key
    subtype_name = ANNOUNCE_SUBTYPES[subtype_key]
    context.user_data["subtype_emoji"] = subtype_name.split()[0]

    await safe_edit_message_text(query,
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {subtype_name}\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–¥–æ {MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]]))
    return ANNOUNCE_TEXT_INPUT

async def process_announce_news_text(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–ª–∏ –Ω–æ–≤–æ—Å—Ç–∏."""
    if not update.message or not update.message.text or not update.message.text.strip():
        await safe_reply_text(update,
            "–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]]))
        return ANNOUNCE_TEXT_INPUT

    text = update.message.text.strip()
    if len(text) > MAX_TEXT_LENGTH:
        await safe_reply_text(update,
            f"–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –µ–≥–æ –¥–æ {MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]]))
        return ANNOUNCE_TEXT_INPUT

    if len(text) < 10:
        await safe_reply_text(update,
            "–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤).",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]]))
        return ANNOUNCE_TEXT_INPUT

    request_type = context.user_data.get("type")
    username = f"@{update.effective_user.username}" if update.effective_user.username else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"

    if request_type == "news":
        formatted_text = f"üóûÔ∏è –ù–æ–≤–æ—Å—Ç—å –æ—Ç {username}\n\n{text}"
    elif request_type == "announcement":
        subtype_key = context.user_data.get("subtype")
        if subtype_key in ANNOUNCE_SUBTYPES:
            subtype_emoji = ANNOUNCE_SUBTYPES[subtype_key].split()[0]
            formatted_text = f"{subtype_emoji} –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç {username}\n\n{text}"
        else:
            formatted_text = f"üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç {username}\n\n{text}"
    else:
        formatted_text = text

    context.user_data["text"] = formatted_text

    censored_text, has_bad = await censor_text(formatted_text)
    if has_bad:
        context.user_data["censored_text"] = censored_text
        await safe_reply_text(update,
            "‚ö†Ô∏è –í –≤–∞—à–µ–º —Ç–µ–∫—Å—Ç–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞. –û–Ω–∏ –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ ***.\n\n"
            f"–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:\n\n{censored_text}\n\n"
            "–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å —Ü–µ–Ω–∑—É—Ä–æ–π?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data="accept")],
                [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit")],
                [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]
            ]))
        return WAIT_CENSOR_APPROVAL

    return await complete_request(update, context, formatted_text)

async def handle_censor_choice(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —Ü–µ–Ω–∑—É—Ä—ã."""
    query = update.callback_query
    if not query or not query.data:
        return ConversationHandler.END

    try:
        await query.answer()
    except TelegramError as e:
        logger.warning(f"Error answering callback query {query.id}: {e}")

    choice = query.data
    current_type = context.user_data.get("type")

    if choice == "accept":
        if current_type == "congrat" and context.user_data.get("congrat_type") == "custom":
            keyboard_nav_date = [
                [InlineKeyboardButton("üìÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è", callback_data="publish_today")],
                [InlineKeyboardButton("üóìÔ∏è –£–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É", callback_data="custom_date")],
                [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤–≤–æ–¥—É —Ç–µ–∫—Å—Ç–∞", callback_data="back_to_custom_message")],
                [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—Ä–∞–∑–¥–Ω–∏–∫–∞", callback_data="back_to_holiday_choice")],
                [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]
            ]
            await safe_edit_message_text(query,
                "–¢–µ–∫—Å—Ç –ø—Ä–∏–Ω—è—Ç —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
                reply_markup=InlineKeyboardMarkup(keyboard_nav_date))
            return CONGRAT_DATE_INPUT
        else:
            context.user_data["publish_date"] = datetime.now().strftime("%Y-%m-%d")
            return await complete_request(update, context)

    elif choice == "edit":
        if current_type == "congrat" and context.user_data.get("congrat_type") == "custom":
            keyboard_nav_custom = [
                [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—Ä–∞–∑–¥–Ω–∏–∫–∞", callback_data="back_to_holiday_choice")],
                [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]
            ]
            await safe_edit_message_text(query,
                f"–í–≤–µ–¥–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è (–¥–æ {MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):",
                reply_markup=InlineKeyboardMarkup(keyboard_nav_custom))
            return CUSTOM_CONGRAT_MESSAGE_INPUT
        else:
            keyboard_nav = [
                [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]
            ]
            await safe_edit_message_text(query,
                f"–í–≤–µ–¥–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–¥–æ {MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):",
                reply_markup=InlineKeyboardMarkup(keyboard_nav))
            return ANNOUNCE_TEXT_INPUT
    else:
        keyboard_nav = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]]
        await safe_edit_message_text(query,
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.",
            reply_markup=InlineKeyboardMarkup(keyboard_nav))
        return WAIT_CENSOR_APPROVAL

async def process_congrat_date(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏."""
    keyboard_nav = [
        [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–µ–∫—Å—Ç—É", callback_data="back_to_custom_message")],
        [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—Ä–∞–∑–¥–Ω–∏–∫–∞", callback_data="back_to_holiday_choice")],
        [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]
    ]

    if update.callback_query:
        callback_data = update.callback_query.data
        try:
            await update.callback_query.answer()
        except TelegramError as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback: {e}")

        if callback_data == "publish_today":
            context.user_data["publish_date"] = datetime.now().strftime("%Y-%m-%d")
            return await complete_request(update, context)
        elif callback_data == "custom_date":
            await safe_edit_message_text(update.callback_query,
                "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì –∏–ª–∏ '—Å–µ–≥–æ–¥–Ω—è':",
                reply_markup=InlineKeyboardMarkup(keyboard_nav))
            return CONGRAT_DATE_INPUT
        elif callback_data == "back_to_start":
            return await start_command(update, context)
        elif callback_data == "back_to_holiday_choice":
            return await back_to_holiday_choice(update, context)
        elif callback_data == "back_to_custom_message":
            return await back_to_custom_message(update, context)
        else:
            await safe_edit_message_text(update.callback_query,
                "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
                reply_markup=InlineKeyboardMarkup(keyboard_nav))
            return CONGRAT_DATE_INPUT

    if not update.message or not update.message.text:
        await safe_reply_text(update,
            "‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì –∏–ª–∏ '—Å–µ–≥–æ–¥–Ω—è'.",
            reply_markup=InlineKeyboardMarkup(keyboard_nav))
        return CONGRAT_DATE_INPUT

    date_str = update.message.text.strip().lower().replace('.', '-')
    
    if date_str == "—Å–µ–≥–æ–¥–Ω—è":
        context.user_data["publish_date"] = datetime.now().strftime("%Y-%m-%d")
        return await complete_request(update, context)

    try:
        publish_date = datetime.strptime(date_str, "%d-%m-%Y")
        today = datetime.now().date()

        if publish_date.date() < today:
            await safe_reply_text(update,
                "‚ùå –ù–µ–ª—å–∑—è —É–∫–∞–∑–∞—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É. –í–≤–µ–¥–∏—Ç–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –∏–ª–∏ –±—É–¥—É—â—É—é –¥–∞—Ç—É (–î–î-–ú–ú-–ì–ì–ì–ì):",
                reply_markup=InlineKeyboardMarkup(keyboard_nav))
            return CONGRAT_DATE_INPUT

        context.user_data["publish_date"] = publish_date.strftime("%Y-%m-%d")
        return await complete_request(update, context)

    except ValueError:
        await safe_reply_text(update,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì –∏–ª–∏ '—Å–µ–≥–æ–¥–Ω—è':",
            reply_markup=InlineKeyboardMarkup(keyboard_nav))
        return CONGRAT_DATE_INPUT

async def back_to_custom_message(update: Update, context: CallbackContext) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤–≤–æ–¥—É —Ç–µ–∫—Å—Ç–∞ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è."""
    query = update.callback_query
    if query:
        try:
            await query.answer()
        except TelegramError as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback: {e}")

    await safe_edit_message_text(query,
        f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è (–¥–æ {MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—Ä–∞–∑–¥–Ω–∏–∫–∞", callback_data="back_to_holiday_choice")],
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]
        ]))
    return CUSTOM_CONGRAT_MESSAGE_INPUT

async def notify_admin_new_application(bot: Bot, app_id: int, app_details: dict) -> None:
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ."""
    if not ADMIN_CHAT_ID:
        return

    app_type = REQUEST_TYPES.get(app_details['type'], {}).get('name', app_details['type'])
    text = (
        f"üì® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{app_id}\n"
        f"‚Ä¢ –¢–∏–ø: {app_type}\n"
        f"‚Ä¢ –û—Ç: @{app_details['username'] or 'N/A'} (ID: {app_details['user_id']})\n"
        f"‚Ä¢ –¢–µ–∫—Å—Ç: {app_details['text'][:200]}...\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{app_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{app_id}")
        ],
        [InlineKeyboardButton("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é", callback_data=f"view_{app_id}")]
    ]

    await safe_send_message(
        bot,
        ADMIN_CHAT_ID,
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_admin_decision(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ –∑–∞—è–≤–∫–µ."""
    query = update.callback_query
    if not query or not query.data:
        return

    action, app_id = query.data.split('_', 1)
    app_id = int(app_id)
    app_details = get_application_details(app_id)

    if not app_details:
        await query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return

    if action == "approve":
        update_application_status(app_id, "approved")
        await query.edit_message_text(f"‚úÖ –ó–∞—è–≤–∫–∞ #{app_id} –æ–¥–æ–±—Ä–µ–Ω–∞!")
        await notify_user_about_decision(context.bot, app_details, approved=True)

        should_publish_immediately = True
        publication_reason = "–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –Ω–æ–≤–æ—Å—Ç—å –∏–ª–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–ø—Ä–æ—à–ª–æ–µ)"

        if app_details['type'] == 'congrat' and app_details['congrat_type'] == 'custom':
            if app_details['publish_date']:
                publish_date_obj = datetime.strptime(app_details['publish_date'], "%Y-%m-%d").date()
                today = datetime.now().date()
                if publish_date_obj > today:
                    should_publish_immediately = False
                    publication_reason = f"–ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (–¥–∞—Ç–∞: {app_details['publish_date']})"
        
        if should_publish_immediately:
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞—è–≤–∫–∏ #{app_id} (–¢–∏–ø: {app_details['type']}). –ü—Ä–∏—á–∏–Ω–∞: {publication_reason}.")
            await publish_to_channel(app_id, context.bot)
        else:
            logger.info(f"–ó–∞—è–≤–∫–∞ #{app_id} –æ–¥–æ–±—Ä–µ–Ω–∞, –Ω–æ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ. –ü—Ä–∏—á–∏–Ω–∞: {publication_reason}.")

    elif action == "reject":
        update_application_status(app_id, "rejected")
        await query.edit_message_text(f"‚ùå –ó–∞—è–≤–∫–∞ #{app_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!")
        await notify_user_about_decision(context.bot, app_details, approved=False)
    elif action == "view":
        full_text = (
            f"üìã –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ #{app_id}:\n\n"
            f"{app_details['text']}\n\n"
            f"–°—Ç–∞—Ç—É—Å: {app_details['status']}"
        )
        await query.answer()
        await safe_send_message(
            context.bot,
            ADMIN_CHAT_ID,
            full_text,
            reply_to_message_id=query.message.message_id
        )

async def notify_user_about_decision(bot: Bot, app_details: dict, approved: bool) -> None:
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–µ—à–µ–Ω–∏–∏ –ø–æ –µ–≥–æ –∑–∞—è–≤–∫–µ."""
    user_id = app_details['user_id']
    app_type = REQUEST_TYPES.get(app_details['type'], {}).get('name', app_details['type'])
    
    if approved:
        text = (
            f"üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ {app_type} –æ–¥–æ–±—Ä–µ–Ω–∞!\n"
            f"–û–Ω–∞ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ {CHANNEL_NAME}."
        )
    else:
        text = (
            f"üòï –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ {app_type} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –∫–∞–Ω–∞–ª–∞."
        )

    await safe_send_message(bot, user_id, text)

async def complete_request(update: Update, context: CallbackContext, text: str = None) -> int:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"""
    try:
        user = update.effective_user
        if not user:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        user_data = context.user_data
        if not text:
            text = user_data.get('censored_text', user_data.get('text', ''))
        
        if not text or 'type' not in user_data:
            await safe_reply_text(update,
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –í –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]
                ]))
            return ConversationHandler.END

        app_data = {
            'user_id': user.id,
            'username': user.username,
            'type': user_data['type'],
            'text': text,
            'status': 'pending'
        }

        if user_data['type'] == 'congrat':
            app_data.update({
                'from_name': user_data.get('from_name', ''),
                'to_name': user_data.get('to_name', ''),
                'congrat_type': user_data.get('congrat_type'),
                'publish_date': user_data.get('publish_date')
            })
        elif user_data['type'] == 'announcement':
            app_data['subtype'] = user_data.get('subtype')

        app_id = add_application(app_data)
        if not app_id:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –≤ –ë–î")

        await safe_reply_text(update,
            "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é! –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –æ —Ä–µ—à–µ–Ω–∏–∏.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –í –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]
            ]))
        
        await notify_admin_new_application(context.bot, app_id, app_data)
        
        return ConversationHandler.END

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ complete_request: {e}", exc_info=True)
        await safe_reply_text(update,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –í –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]
            ]))
        return ConversationHandler.END
    finally:
        context.user_data.clear()

def can_submit_request(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É."""
    try:
        with get_db_connection() as conn:
            cur = conn.cursor()
            cur.execute("""
                SELECT COUNT(*) FROM applications
                WHERE user_id = ? AND created_at > datetime('now', '-1 hour')
            """, (user_id,))
            count = cur.fetchone()[0]
            return count < 5
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞ –∑–∞—è–≤–æ–∫: {e}")
        return True

async def check_spam(update: Update, context: CallbackContext) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–ø–∞–º."""
    user = update.effective_user
    if not can_submit_request(user.id):
        await safe_reply_text(update,
            "üîô –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞—è–≤–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]])
        )
        return False
    return True

async def unknown_message_fallback(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{update.effective_user.username}: {update.message.text}")
    await safe_reply_text(update,
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start.",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]])
    )
    return ConversationHandler.END

# ========== –ù–ê–°–¢–†–û–ô–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í ==========
def setup_handlers(application: Application) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥."""
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start_command)],
        states={
            TYPE_SELECTION: [CallbackQueryHandler(handle_type_selection)],
            SENDER_NAME_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_sender_name)],
            RECIPIENT_NAME_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_recipient_name)],
            CONGRAT_HOLIDAY_CHOICE: [CallbackQueryHandler(handle_congrat_holiday_choice)],
            CUSTOM_CONGRAT_MESSAGE_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_congrat_text)],
            CONGRAT_DATE_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_congrat_date),
                CallbackQueryHandler(process_congrat_date)
            ],
            ANNOUNCE_SUBTYPE_SELECTION: [CallbackQueryHandler(handle_announce_subtype_selection)],
            ANNOUNCE_TEXT_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_announce_news_text)],
            WAIT_CENSOR_APPROVAL: [CallbackQueryHandler(handle_censor_choice)]
        },
        fallbacks=[
            CommandHandler('cancel', cancel_command),
            CallbackQueryHandler(back_to_start, pattern="^back_to_start$"),
            CallbackQueryHandler(back_to_holiday_choice, pattern="^back_to_holiday_choice$"),
            CallbackQueryHandler(back_to_custom_message, pattern="^back_to_custom_message$"),
            MessageHandler(filters.TEXT & ~filters.COMMAND, unknown_message_fallback)
        ],
        per_message=False
    )
    
    application.add_handler(conv_handler)
    application.add_handler(
        CallbackQueryHandler(handle_admin_decision, pattern=r"^(approve|reject|view)_\d+$"),
        group=2
    )
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, check_spam),
        group=3
    )

# ========== –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ==========
@app.on_event("startup")  # –í–µ—Ä–Ω–∏—Ç–µ —Å—Ç–∞—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
async def startup_event():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ FastAPI."""
    global application
    application = Application.builder().token(TOKEN).build()
    setup_handlers(application)
    
    scheduler = AsyncIOScheduler(timezone=TIMEZONE)
    scheduler.add_job(
        check_pending_applications,
        'interval',
        minutes=5,
        args=[application]
    )
    scheduler.start()
    
    if WEBHOOK_URL:
        logger.info("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –≤–µ–±—Ö—É–∫–∞...")
        await application.initialize()
        await application.start()
        await application.bot.set_webhook(
            url=f"{WEBHOOK_URL}/webhook",
            allowed_updates=Update.ALL_TYPES
        )
        
        BOT_STATE['running'] = True
        BOT_STATE['start_time'] = datetime.now(TIMEZONE)
    else:
        logger.info("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling...")
        BOT_STATE['running'] = True
        BOT_STATE['start_time'] = datetime.now(TIMEZONE)
        asyncio.create_task(application.run_polling())

@app.post("/webhook")
async def handle_webhook(update: dict):
    try:
        if application:
            await application.update_queue.put(Update.de_json(update, application.bot))
            return {"status": "ok"}
        return {"status": "error", "detail": "Application not initialized"}
    except Exception as e:
        logger.error(f"Webhook error: {str(e)}")
        return {"status": "error", "detail": str(e)}, 500
@app.get("/webhook")
async def webhook_check():
    return {"status": "webhook_ready"}

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    init_db()
    
    if not check_environment():
        logger.error("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞!")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=PORT,
        log_level="info"
    )
@app.get("/")
async def health_check():
    return {"status": "ok", "bot_running": BOT_STATE.get('running', False)}

@app.post("/webhook")
async def handle_webhook(update: dict):
    try:
        if application:
            await application.update_queue.put(Update.de_json(update, application.bot))
            return {"status": "ok"}
        return {"status": "error", "detail": "Application not initialized"}, 500
    except Exception as e:
        logger.error(f"Webhook error: {str(e)}")
        return {"status": "error", "detail": str(e)}, 500
if __name__ == "__main__":
    main()
